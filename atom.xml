<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lomo | 朱幸民</title>
  
  <subtitle>on the way</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuxingmin.com/"/>
  <updated>2019-07-19T06:42:37.006Z</updated>
  <id>https://www.zhuxingmin.com/</id>
  
  <author>
    <name>Lomo 朱幸民</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《小王子》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/07/16/%E3%80%8A%E5%B0%8F%E7%8E%8B%E5%AD%90%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/07/16/《小王子》随笔/</id>
    <published>2019-07-16T10:09:01.000Z</published>
    <updated>2019-07-19T06:42:37.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>也许世界上也有五千朵和你一模一样的花，但只有你是我独一无二的玫瑰。</p></blockquote><p><img src="/images/posts/小王子.jpg" alt="小王子" title="小王子"></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>&emsp;&emsp;<strong>小王子 （法国儿童文学短篇童话）</strong>是法国作家安托万·德·圣·埃克苏佩里于1942年写成的著名儿童文学短篇小说。本书的主人公是来自外星球的小王子。书中以一位飞行员作为故事叙述者，讲述了小王子从自己星球出发前往地球的过程中，所经历的各种历险。作者以小王子的孩子式的眼光，透视出成人的空虚、盲目，愚妄和死板教条，用浅显天真的语言写出了人类的孤独寂寞、没有根基随风流浪的命运。同时，也表达出作者对金钱关系的批判，对真善美的讴歌。</p></blockquote><p><img src="/images/posts/小王子03.jpg" alt="小王子" title="小王子"></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><blockquote><p>&emsp;&emsp;小说叙述者是个飞行员，他在故事一开始告诉读者，他在大人世界找不到一个说话投机的人，因为大人都太讲实际了。<br>&emsp;&emsp;接着，飞行员讲了六年前他因飞机故障迫降在撒哈拉沙漠遇见小王子故事。神秘的小王子来自另一个星球。飞行员讲了小王子和他的玫瑰的故事。小王子为什么离开自己的星球；在抵达地球之前，他又访问过哪些星球。他转述了小王子对六个星球的历险，他遇见了国王、爱虚荣的人、酒鬼、商人、点灯人、地理学家、蛇、三枚花瓣的沙漠花、玫瑰园、扳道工、商贩、狐狸以及我们的叙述者飞行员本人。<br>&emsp;&emsp;飞行员和小王子在沙漠中共同拥有过一段极为珍贵的友谊。当小王子离开地球时，飞行员非常悲伤。他一直非常怀念他们共度的时光。他为纪念小王子写了这部小说。</p></blockquote><p><img src="/images/posts/小王子01.jpg" alt="小王子" title="小王子"></p><h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2><hr><h3 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h3><ul><li>也许世界上也有五千朵和你一模一样的花，但只有你是我独一无二的玫瑰。</li><li>现代生活最病态的特征：理性化——试图用客观的标准体系来界定和衡量主观的价值意义。</li><li>仪式是什么？它使得某个日子区别于其他日子，某个时刻不同于其他的时刻。</li><li>那些人，他们坐在特快车里，却不知道他们要追寻什么。所以他们很烦躁，不停的绕圈子。</li><li>人总是对自己所处的地方不满意。</li><li>只有用心灵才能看得清事物本质，真正重要的东西是肉眼无法看见的。</li><li>语言是误解的根源。</li><li>生活才不是生命荒唐的编号，生活的意义在于生活本身。</li><li>审判自己比审判别人难多了。如果你成功地正确审判了自己，那么你就是一个真正的智者了。</li><li>如果你爱上了某个星球的一朵花。那么，只要在夜晚仰望星空，就会觉得漫天的繁星就像一朵朵盛开的花。</li><li>人们早已忘记了这个道理。可是你不应将它遗忘。你必须永远对自己所驯服的东西负责。你要对你的玫瑰花负责。</li><li>正因为你在你的玫瑰上花费了很多时间，你的玫瑰才变得如此重要。</li><li>大人自己什么都不懂，总是要小孩来给他们解释，这让我觉得很累。</li></ul><p><img src="/images/posts/小王子02.jpg" alt="小王子" title="小王子"></p><h3 id="随笔-1"><a href="#随笔-1" class="headerlink" title="随笔"></a>随笔</h3><p>&emsp;&emsp;读这本书很快。大概总共用了不到一下午时间，因为故事很短。但是读完后也是久久难以释怀。<br>&emsp;&emsp;这本书作为一本“<strong>童话</strong>”书，作为一个成年人，读起来却引人深思。小王子路过种种星球，来到地球。在地球驯化了狐狸，遇到了毒蛇……在与狐狸的“交往”中，狐狸说，语言是误解的根源，所以你不要跟我说话，只要坐在我旁边，然后每天离我更近一点，这样我就会一天天被你驯化。那么为什么要驯化呢？原文↓：</p><blockquote><p>&emsp;&emsp;狐狸对小王子说：“你看到那边的麦田了吗？我不吃面包，麦子对我来说，一点用也没有。我对麦田无动于衷。这真让人扫兴。可你有着金黄色的头发。那么，一旦你驯服了我，就美妙极了。金黄色的麦子会使我想起你。而且，我还会喜欢上风吹过麦浪的声音……”</p></blockquote><p>&emsp;&emsp;在小王子继续前行，将要离别之时：</p><blockquote><p>“啊！”狐狸说：”我会哭的。”<br>“是你的错，”小王子說：”我从没过要伤害你，但你想让我驯服你⋯⋯”<br>“是的。”狐狸說。<br>“但你要哭了！”小王子說。<br>“是的。”狐狸說。<br>“那你什么好处也没得到！”<br>“我得到了，”狐狸說：”因为那麦田的颜色。”</p></blockquote><p>&emsp;&emsp;而作为成年人，我们却难以做到如此心态。面对机会，我们总是思前虑后，然后让其在指缝间流逝。<strong>因为害怕结束，所以拒绝开始</strong>。而经历过的人才懂得，曾经拥有过才是幸福的。<strong>人生中难免有诸多遗憾，但最遗憾的，绝非是遗憾做了什么，而是遗憾没有做什么</strong>。<br>&emsp;&emsp;“<strong>你这儿的人，在一个花园里种满五千朵玫瑰，却没能从中找到自己要的东西</strong>。”小王子只有一朵玫瑰，而我们可能有许多玫瑰。但是因为他有一朵，并且在其身上投放了时间、精力与陪伴，因此它的玫瑰显得与众不同。而我们，拥有就是拥有，不知道珍惜，那无论对于谁拥有，都是一样的。<strong>珍惜现在，珍惜眼前</strong>。<br>&emsp;&emsp;最后谈一下毒蛇。这个角色的设计也绝不随手出来的。在小王子将要离开地球，返回自己星球的时候，说道，路途遥远，只能放弃自己的躯壳，因为带着躯壳是无法回去的。前文像王子与毒蛇接触的时候，发现毒蛇也是“好心肠”的，并非突兀的直接咬死小王子。并且最后小王子让毒蛇咬死自己，也是在讲述一个道理：<strong>想要追寻，必要付出</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;也许世界上也有五千朵和你一模一样的花，但只有你是我独一无二的玫瑰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/小王子.jpg&quot; alt=&quot;小王子&quot; title=&quot;小王子&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="小王子" scheme="https://www.zhuxingmin.com/tags/%E5%B0%8F%E7%8E%8B%E5%AD%90/"/>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读后感" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Mac Vue-cli3.x踩坑记录</title>
    <link href="https://www.zhuxingmin.com/2019/07/10/Mac-Vue-cli3-x%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.zhuxingmin.com/2019/07/10/Mac-Vue-cli3-x踩坑记录/</id>
    <published>2019-07-10T07:27:09.000Z</published>
    <updated>2019-07-12T02:41:59.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h3><p>&emsp;&emsp;随vue技术逐渐成熟，开发者们热爱的脚手架vue-cli也一步步升级优化。在体验度不断上升的过程中，也必不可少的要踩一些坑。<br>&emsp;&emsp;本篇主要记录下在vue-cli2.x升级到3.x以及用Mac系统的踩坑记录。</p><a id="more"></a><h3 id="一、安装问题"><a href="#一、安装问题" class="headerlink" title="一、安装问题"></a>一、安装问题</h3><h4 id="1-升级node"><a href="#1-升级node" class="headerlink" title="1. 升级node"></a>1. 升级node</h4><p>此过程只需要升级新版本node即可。</p><h4 id="2-安装vue-cli-3"><a href="#2-安装vue-cli-3" class="headerlink" title="2. 安装vue-cli 3"></a>2. 安装vue-cli 3</h4><p>执行<code>npm install -g @vue/cli</code></p><h4 id="3-创建新项目"><a href="#3-创建新项目" class="headerlink" title="3. 创建新项目"></a>3. 创建新项目</h4><p><code>sudo vue create andin</code></p><blockquote><p>备注：在Mac系统执行过程中，会产生系列报错问题，一般情况下时权限不足不可创建。</p></blockquote><h4 id="4-新建文件失败"><a href="#4-新建文件失败" class="headerlink" title="4. 新建文件失败"></a>4. 新建文件失败</h4><p>在项目内，无论新建什么文件，都会报错提示无法新建。【无此问题的可忽略此步。】解决方案是打开可读写的权限。打开终端，cd到该项目目录下，执行如下：<br><code>sudo chown -R username /Users/******</code></p><ol><li>username 代表Mac的用户名</li><li>/Users/<strong>**</strong> 代表项目路径</li></ol><h3 id="二、配置问题"><a href="#二、配置问题" class="headerlink" title="二、配置问题"></a>二、配置问题</h3><h4 id="1-安装系列依赖"><a href="#1-安装系列依赖" class="headerlink" title="1. 安装系列依赖"></a>1. 安装系列依赖</h4><ul><li>axios：交互</li><li>qs：数据格式</li><li>echarts：图表，数据可视化</li><li>px2rem：自适应解决方案</li><li>…</li></ul><h4 id="2-vue-config-js-配置"><a href="#2-vue-config-js-配置" class="headerlink" title="2. vue.config.js 配置"></a>2. vue.config.js 配置</h4><p>配置vue.config.js，解决系列问题。如基本路径、打生产包去除.map文件、代码压缩等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const resolve = dir =&gt; path.resolve(__dirname, dir);</span><br><span class="line"></span><br><span class="line">// 去除console</span><br><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">// 压缩css、js</span><br><span class="line">const CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;);</span><br><span class="line">// 要压缩的文件</span><br><span class="line">const productionGzipExtensions = [&apos;js&apos;, &apos;css&apos;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 基本路径配置，解决打包路径问题</span><br><span class="line">    publicPath: &apos;./&apos;,</span><br><span class="line"></span><br><span class="line">    configureWebpack: (config) =&gt; &#123;</span><br><span class="line">        // 如果不是开发环境</span><br><span class="line">        if (env !== &apos;development&apos;) &#123;</span><br><span class="line">            // 代码压缩</span><br><span class="line">            config.plugins.push(new CompressionWebpackPlugin(&#123;</span><br><span class="line">                algorithm: &apos;gzip&apos;,</span><br><span class="line">                test: new RegExp(`\\.($&#123;productionGzipExtensions.join(&apos;|&apos;)&#125;)$`),</span><br><span class="line">                threshold: 10240,</span><br><span class="line">                minRatio: 0.8,</span><br><span class="line">            &#125;));</span><br><span class="line"></span><br><span class="line">            // 打包后清除断点和控制台打印</span><br><span class="line">            config.plugins.push(</span><br><span class="line">                new UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            drop_debugger: true, // 注释debugger</span><br><span class="line">                            drop_console: true, // 注释console</span><br><span class="line">                            pure_funcs:[&apos;console.log&apos;] // 移除console</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: false,   // 去除打包后生成的.map文件</span><br><span class="line">                    parallel: true,</span><br><span class="line">                &#125;),</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 路径</span><br><span class="line">        config.resolve = &#123;</span><br><span class="line">            extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">            alias: &#123;</span><br><span class="line">                &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">                &apos;@&apos;: resolve(&apos;src&apos;),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    chainWebpack: config =&gt; &#123;</span><br><span class="line">        // 字体自适应</span><br><span class="line">        config.module</span><br><span class="line">            .rule(&apos;css&apos;)</span><br><span class="line">            .test(/\.css$/)</span><br><span class="line">            .oneOf(&apos;vue&apos;)</span><br><span class="line">            .resourceQuery(/\?vue/)</span><br><span class="line">            .use(&apos;px2rem&apos;)</span><br><span class="line">            .loader(&apos;px2rem-loader&apos;)</span><br><span class="line">            .options(&#123;</span><br><span class="line">                remUnit: 37.5</span><br><span class="line">            &#125;);</span><br><span class="line">        // 指定入口  es6转es5</span><br><span class="line">        // config.entry.app = [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;];</span><br><span class="line"></span><br><span class="line">        // 添加别名</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(&apos;@&apos;, resolve(&apos;src&apos;))</span><br><span class="line">            .set(&apos;assets&apos;, resolve(&apos;src/assets&apos;))</span><br><span class="line">            .set(&apos;static&apos;, resolve(&apos;src/static&apos;));</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-runtime进行时"><a href="#3-runtime进行时" class="headerlink" title="3. runtime进行时"></a>3. runtime进行时</h4><p>如果是项目脚手架升级，那么其中需要格外注意的一点是runtime进行时会报错。报错信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br></pre></td></tr></table></figure></p><p>解决方案现给出三种：</p><ol><li><p>main.js修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 原</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 修改为如下：</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure></li><li><p>config配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.resolve = &#123;</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">        &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">        &apos;@&apos;: resolve(&apos;src&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入路径修改<br><code>import Vue from &#39;vue&#39;</code>修改为<code>import Vue from &#39;vue/dist/vue.esm.js&#39;</code><br>同理，在router配置的过程中，也改成以上路径即可。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前沿&quot;&gt;&lt;a href=&quot;#前沿&quot; class=&quot;headerlink&quot; title=&quot;前沿&quot;&gt;&lt;/a&gt;前沿&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;随vue技术逐渐成熟，开发者们热爱的脚手架vue-cli也一步步升级优化。在体验度不断上升的过程中，也必不可少的要踩一些坑。&lt;br&gt;&amp;emsp;&amp;emsp;本篇主要记录下在vue-cli2.x升级到3.x以及用Mac系统的踩坑记录。&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://www.zhuxingmin.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>《蜘蛛侠之英雄远征》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/07/01/%E3%80%8A%E8%9C%98%E8%9B%9B%E4%BE%A0%E4%B9%8B%E8%8B%B1%E9%9B%84%E8%BF%9C%E5%BE%81%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/07/01/《蜘蛛侠之英雄远征》随笔/</id>
    <published>2019-07-01T07:07:48.000Z</published>
    <updated>2019-07-01T07:43:53.235Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike180%2C5%2C5%2C180%2C60/sign=297d7c11c7177f3e0439f45f11a650a2/0824ab18972bd407cd4f3d5a75899e510eb30989.jpg" alt="英雄远征" title="英雄远征"></p><a id="more"></a><h3 id="蜘蛛侠：英雄远征"><a href="#蜘蛛侠：英雄远征" class="headerlink" title="蜘蛛侠：英雄远征"></a>蜘蛛侠：英雄远征</h3><blockquote><p>&emsp;&emsp;《蜘蛛侠：英雄远征》在蜘蛛侠系列中比上一部更紧张，也更狠毒，汤姆·赫兰德所饰演的小孩英雄——尴尬又天真，浪漫又多变——非常生动，这是安德鲁·加菲尔德版彼得没做到过的。《蜘蛛侠：英雄远征》在灵魂上向托比·马奎尔版更近了一些。在结束时，这代蜘蛛侠真的找到了自己的强烈感受。《蜘蛛侠：平行宇宙》在前，有着漩涡般令人眩晕的想象力、游戏般的质感和暗门一样的感觉，《蜘蛛侠：英雄远征》则触碰到了漫威典型电影的每一个方面。这并不会让观众脱离这个真实世界。但从结果来看，这一步是走对了。</p></blockquote><h3 id="关于剧情"><a href="#关于剧情" class="headerlink" title="关于剧情"></a>关于剧情</h3><p>&emsp;&emsp;小蜘蛛在结束大战灭霸之后，恢复到好邻居蜘蛛侠，普通学生彼得·帕克。全剧以假期团建（旅游）为切入点，小蜘蛛在青春迷茫期，一心想要追求表白自己喜欢的女孩米歇尔，在旅途中遭遇的种种。当然，从他拒接神盾局局长电话那一刻开始，就注定他的旅途不会平凡。<br>&emsp;&emsp;首先在威尼斯遇到了水怪，协助神秘客KO掉此怪。接着在布拉格，遇到了四大怪中最强的火元素乖。再次协助神秘客，清理掉此怪。“顺利”刷怪完毕之后，神秘客约小蜘蛛去酒吧喝一杯，然后故事正式进入主线……<br>&emsp;&emsp;作为钢铁侠下一代“传人”，小蜘蛛收到了礼物——“眼镜”。然后在清怪结束后，在神秘客带上眼镜那一刻，小蜘蛛动摇，仿佛觉得眼前的神秘客才应该是传承者。无可厚非，神秘客演技太棒，以至于如果不是剧情太过完美，还真的无法怀疑他的身份。可惜小蜘蛛一心只想撩妹，对神秘客百分信任，毫无察觉。<br>&emsp;&emsp;在小蜘蛛和米歇尔两人约会过程中，无意间发现了“无人机”触发的特效，将剧情推入正题：神秘客有问题。之后便是受到一波又一波死亡威胁。在”越狱“之后，回到主战场，大战无人机，靠着“蜘蛛一机灵”打爆神秘客。至此，由于团建的每个地方都有威胁发生，团建活动也至此结束。</p><h3 id="两个彩蛋"><a href="#两个彩蛋" class="headerlink" title="两个彩蛋"></a>两个彩蛋</h3><h4 id="1-蜘蛛侠背锅"><a href="#1-蜘蛛侠背锅" class="headerlink" title="1. 蜘蛛侠背锅"></a>1. 蜘蛛侠背锅</h4><p>&emsp;&emsp;小蜘蛛和女友约会，一波极限飞行走位操作之后，与女友分别之时，路口电视大屏幕的新闻播放：无人机由小蜘蛛控制，并且试图对人类造成威胁，而神秘客是为阻止蜘蛛侠而死。小蜘蛛强行背锅。</p><h4 id="2-神盾局局长"><a href="#2-神盾局局长" class="headerlink" title="2. 神盾局局长"></a>2. 神盾局局长</h4><p>&emsp;&emsp;神盾局局长在开车时，显露原型——斯克鲁人。而真正的神盾局却在斯克鲁群中远程听报告，享受生活……</p><h3 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h3><p>&emsp;&emsp;小蜘蛛接过漫威接力棒。整部剧中，有小蜘蛛成长的迷茫，恋爱的酸甜以及责任的承担，也从好邻居小蜘蛛逐渐成长起来。在飞机上改装战衣的时候，颇有钢铁侠的影子，想来也是致敬。从前，就表示要成为钢铁侠那样的人，而钢铁侠也表示：“你要成为比我更优秀的人。”<br>&emsp;&emsp;在场景中，有几个镜头还是很有看点：首先是全息影像暴揍小蜘蛛，镜头感染力很足，虐心但也精彩；改装战衣，颇有托尼风范；大战无人机，镜头感十足；最后彩蛋，很棒，十分钟值得等。<br>&emsp;&emsp;另，全剧127分钟，加上之前漫威系列电影，总长3000分钟，意味着什么想必不用多说。嗯，<code>i love you three thousand.</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike180%2C5%2C5%2C180%2C60/sign=297d7c11c7177f3e0439f45f11a650a2/0824ab18972bd407cd4f3d5a75899e510eb30989.jpg&quot; alt=&quot;英雄远征&quot; title=&quot;英雄远征&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="电影" scheme="https://www.zhuxingmin.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>《月亮与六便士》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/06/18/%E3%80%8A%E6%9C%88%E4%BA%AE%E4%B8%8E%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/06/18/《月亮与六便士》随笔/</id>
    <published>2019-06-18T02:32:47.000Z</published>
    <updated>2019-06-18T07:47:02.285Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>追逐梦想就是追逐自己的厄运，在满地都是六便士的街上，他抬起头看到了月光。</p></blockquote><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="/images/posts/月亮与六便士.jpg" alt="月亮与六便士" title="月亮与六便士"></p><blockquote><p>&emsp;&emsp;<font color="deepskyblue" size="5">《月亮与六便士》</font>是英国小说家威廉· 萨默赛特·毛姆的创作的长篇小说，成书于1919年。<br>&emsp;&emsp;作品以法国印象派画家保罗·高更的生平为素材，描述了一个原本平凡的伦敦证券经纪人思特里克兰德，突然着了艺术的魔，抛妻弃子，绝弃了旁人看来优裕美满的生活，奔赴南太平洋的塔希提岛，用圆笔谱写出自己光辉灿烂的生命，把生命的价值全部注入绚烂的画布的故事。<br>&emsp;&emsp;贫穷的纠缠，病魔的折磨他毫不在意，只是后悔从来没有光顾过他的意识。作品表现了天才、个性与物质文明以及现代婚姻、家庭生活之间的矛盾，有着广阔的生命视角，用散发着消毒水味道的手术刀对皮囊包裹下的人性进行了犀利地解剖，混合着看客讪笑的幽默和残忍的目光。</p></blockquote><h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><p>&emsp;&emsp;作者依然是毛姆(英国小说家威廉· 萨默赛特·毛姆)，我也是读了书才知道的。上次读的《面纱》，依旧目前还未读的《人性的枷锁》，都是偶然买的，没想到作者是同一人。<br><img src="/images/posts/毛姆.jpg" alt="威廉· 萨默赛特·毛姆" title="威廉· 萨默赛特·毛姆"><br>&emsp;&emsp;毛姆的家庭不太美满。从小父母双亡，而后自身条件也不太好，身材矮小、口吃等，经常受到欺负，以至于后来在心灵上的创伤以及性格的孤僻和内向。他的婚姻状况也不太美满，可能由于需要创作，冷落妻子时有发生。当然最后也导致了婚姻的裂变。他年少从医，后来参加过世界大战，也周游列国，被誉为“世界旅行家”。</p><h3 id="佳句"><a href="#佳句" class="headerlink" title="佳句"></a>佳句</h3><h4 id="关于理想"><a href="#关于理想" class="headerlink" title="关于理想"></a>关于理想</h4><blockquote><ul><li>世界上只有少数人能够最终达到自己的理想。</li><li>满地都是六便士，他却抬头看见了月亮。</li><li>月亮是头顶上的理想，而现实是脚下的六便士。只顾着捡便士容易忘记抬头看看月光，他们不容易理解追月的人。但如果你选择追月，渐渐地你就会飞起来啦。</li></ul></blockquote><h4 id="关乎爱情"><a href="#关乎爱情" class="headerlink" title="关乎爱情"></a>关乎爱情</h4><blockquote><ul><li>爱让一个人比原来的自己更丰富，同时又更贫乏。</li><li>为什么漂亮的女人总嫁给无趣的男人？因为有脑子的男人不娶漂亮女人。</li><li>她只差一点儿就称得起是个美人，但是正因为就差这一点儿，却连漂亮也算不上了。</li><li>女人们不断为了爱情而自寻短见，但是一般来说她们总是做得很小心，不让自杀成为事实。通常这只是为了引起她们情人的怜悯或者恐怖而做的一个姿态。</li><li>男人同女人的区别是：女人能够整天整夜谈恋爱，而男人却只能有时有晌儿地干这件事。</li><li>爱情要占据一个人莫大的精力，它要一个人离开自己的生活专门去做一个爱人。</li></ul></blockquote><h4 id="关于社会人情"><a href="#关于社会人情" class="headerlink" title="关于社会人情"></a>关于社会人情</h4><blockquote><ul><li>老是诉说自己的不幸，人们很快就会厌烦，总是摆着一副可怜相也不会讨人喜欢。</li><li>安之若素的外表下分明有某些截然相反的戏剧性东西。</li><li>那时警句、格言还没有完全被笨拙的人拿来附庸风雅，交谈中突然冒出几句，立刻显得妙趣横生。</li><li>文明社会这样消磨自己的心智，把短促的生命浪费在无聊的应酬上实在令人莫解。</li><li>文明人践行一种奇怪的才智，他们把短暂的生命，浪费在烦琐的事务上。</li><li>仿佛是从巴尔扎克笔下走出的老式人物，凭借着人性弱点赚钱的各色男女。</li><li>如果你不在乎某一个人对你的看法，一群人对你有什么意见又有什么关系？</li><li>我们每个人生在世界上都是孤独的。每个人都被囚禁在一座铁塔里，只能靠一些符号同别人传达自己的思想，而这些符号并没有共同的价值，因此它们的意义是模糊的、不确定的……因此我们只能孤独地行走，尽管身体互相依傍却并不在一起，既不了解别人也不能为别人所了解。</li></ul></blockquote><h3 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h3><p>&emsp;&emsp;追逐梦想就是追逐自己的厄运，在满地都是六便士的街上，他抬起头看到了月光。</p><p><img src="/images/posts/月亮.jpg" alt="月光之路" title="月光之路"></p><h4 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h4><p>&emsp;&emsp;《月亮与六便士》小说时间线及内容相当明确，就是描述了斯特里克兰的一生，放弃了虽然平淡但是幸福的生活和家庭，孤身一人跑到巴黎去画画，要知道他毫无基础。而后生存艰难，对家人、朋友及认不认识的所有人都恶语相撞，对世俗毫不在乎，睡了朋友的妻子，导致最终朋友妻子自杀。然后继续颠沛流离，最终到一座小岛上，再度娶妻生子。而所有的磨砺，只为追寻原始的渴望，用绘画来表述。<br>&emsp;&emsp;<strong>斯特里克兰是谁？</strong>主角。一个工薪族——证券经纪人，有这很是体面的工作，贤惠的妻子以及一个孩子。某年带着妻子及孩子去旅行，然后一夜之间，留下一封信，便只身去往了巴黎。家人亲戚朋友极其震惊，一致认为斯特里克兰是着了某个小妖精的道，拿钱跟小三私奔了。而真实情况是只身一人，住着寒酸的小旅馆，买了一些颜料及画板，开始了自己的绘画生涯。要知道，在此之前，画画只是他的一项爱好，并且毫无基础。然后，朋友劝阻，他却恶语相迎；朋友接济，他却睡了朋友的妻子，并且占了朋友的房子，直到朋友妻子自杀……基本上毫无人性！为了填饱肚子，为了买些颜料及画板，不得不去做小工，脏活累活无所畏惧，正常人难以忍受的饥寒、疾病，在他眼里却毫不在乎，甚至身体不适自己的，就像自己只是魔鬼，占据了一具凡人之躯而已。随着时间流逝，自己的作品也越来越得心应手，仿佛天生就是为了绘画而生。可一个人要想达到理想，那么只能迎着厄运而上。因此，世界上只有少数人能够达到自己的理想。<br>&emsp;&emsp;在斯特里克兰声明的尽头，由于得了癌症，身体腐烂，行动受限。可这仿佛依然不是自己需要注意的地方，他只关心自己是否达成了理想。最终，自己在家里完成了一整副巧夺天工的画作。当医生想去救治他，为时已晚。可当医生走进他的房间，迎来的气味是恶臭，因为得了该病的人结果都是这样。但是看到的，确实一幅能让人迷失的画作，一幅原始与淫乱结合的画作。然后它还没面世，在斯特里克兰临终遗言里，让自己的妻子把房子烧掉，巨作也付之一炬。<br><img src="/images/posts/月亮和便士.jpg" alt="月亮和便士" title="月亮和便士"><br>&emsp;&emsp;《月亮与六便士》，不如说是<code>理想</code>与<code>现实</code>，在如今物欲横流的社会中，仿佛没有钱，就会一事无成，活不出来滋味。极大多数情况下，真的是这样。其实现在每个人的心里都可能会有一种声音，属于自己的声音。当自己工作不顺心，感情、亲情都处于冰冻状态时，那个声音或许怂恿过自己，与现实冲突、唱反调，可无论自己做怎样的抉择，那个声音却始终相随。或许，它也是自己的理想代表。<br>&emsp;&emsp;每个人都有理想。在平淡的生活中，可能偶尔也会想过为了理想任性一次，纯粹一次。所以有的人走了出去，不再畏惧世俗，不再担心没有六便士的生活。有的人却是“冷静”下来，将理想之火瞬间扑灭，如我，如你，如芸芸众生。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;追逐梦想就是追逐自己的厄运，在满地都是六便士的街上，他抬起头看到了月光。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="毛姆" scheme="https://www.zhuxingmin.com/tags/%E6%AF%9B%E5%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>切换模块下划线跟随效果</title>
    <link href="https://www.zhuxingmin.com/2019/06/13/%E5%88%87%E6%8D%A2%E6%A8%A1%E5%9D%97%E4%B8%8B%E5%88%92%E7%BA%BF%E8%B7%9F%E9%9A%8F%E6%95%88%E6%9E%9C/"/>
    <id>https://www.zhuxingmin.com/2019/06/13/切换模块下划线跟随效果/</id>
    <published>2019-06-13T05:51:22.000Z</published>
    <updated>2019-06-13T06:58:51.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/posts/下划线跟随.gif" alt="切换标签下划线跟随" title="切换标签下划线跟随"></p><a id="more"></a><h3 id><a href="#" class="headerlink" title="*"></a>*</h3><p><strong>&emsp;&emsp;经常看到一些网页的导航栏点击切换时，不仅改变当前样式，同时下划线会跟随鼠标点击的标签栏缓慢滑到相应位置，那么这个简单而又好看的效果是如何实现的呢？</strong></p><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><blockquote><ol><li>环境/依赖</li><li>分析</li><li>代码</li></ol></blockquote><h4 id="1-环境-依赖"><a href="#1-环境-依赖" class="headerlink" title="1. 环境/依赖"></a>1. 环境/依赖</h4><ul><li>原生JavaScript / jQuery</li></ul><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h4><p>&emsp;&emsp;首先给出基本布局（如下）。html及css都是基础布局，<code>active</code>样式则是当点击某个li标签时动态添加即可。那么下划线我们如何处理呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;ul class=&quot;menu&quot;&gt;</span><br><span class="line">    &lt;li&gt;Hey&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;ClickMe&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;I&apos;mIndex&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;AboutMe&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;MyCultureWall&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// css</span><br><span class="line">&lt;style&gt;</span><br><span class="line">ul&#123;display: inline-block;text-align: center;padding: 0;position: relative;list-style: none;transition: all .4s ease-in;&#125;</span><br><span class="line">ul li&#123;display: inline-block;cursor: pointer;padding: 5px 10px;transition: all .5s ease-in;&#125;</span><br><span class="line">.active&#123;color: deepskyblue;transition: all .5s ease-in;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;第一反应肯定是使用<code>border-bottom</code>。如果仅仅是切换，那么它完全可以满足需求，但是前面我们提到了，要<code>动</code>起来，显然，border暂时还做不到这一步。<br>&emsp;&emsp;此路不通，next one.如果我们用一个新的div来绑定到当前ul上，是否能满足需求呢？have a try.我在li标签同级增加一个div元素，给出一个定高不定宽的线段，宽度则跟随当前所点击的li标签走。然后定位在ul下方，这样视觉效果则是下划线位置。思路明确了，接下来要做的就是在js中来获取想要的宽度和定位左边距即可。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;ul class=&quot;menu&quot;&gt;</span><br><span class="line">    &lt;li&gt;Hey&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;ClickMe&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;I&apos;mIndex&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;AboutMe&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;MyCultureWall&lt;/li&gt;</span><br><span class="line">++  &lt;div class=&quot;slider&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// css</span><br><span class="line">&lt;style&gt;</span><br><span class="line">ul&#123;display: inline-block;text-align: center;padding: 0;position: relative;list-style: none;transition: all .4s ease-in;&#125;</span><br><span class="line">ul li&#123;display: inline-block;cursor: pointer;padding: 5px 10px;transition: all .5s ease-in;&#125;</span><br><span class="line">.active&#123;color: deepskyblue;transition: all .5s ease-in;&#125;</span><br><span class="line">++.slider&#123;width: 0;height: 3px;position: relative;transition: all .5s ease-in;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(&apos;.menu&apos;).on(&apos;click&apos;, &apos;li&apos;, function () &#123;</span><br><span class="line">// 获取所需要的 宽、左边距， 此处新增一个随机色</span><br><span class="line">let liWidth = $(this).width(),</span><br><span class="line">offsetLeft = $(this).offset().left,</span><br><span class="line">color = `rgba($&#123;Math.floor(Math.random()*255)&#125;,$&#123;Math.floor(Math.random()*255)&#125;,$&#123;Math.floor(Math.random()*255)&#125;,0.9)`;</span><br><span class="line">// 点击时，当前标签添加active样式，‘下划线’也随之变化</span><br><span class="line">$(this).addClass(&apos;active&apos;).siblings().removeClass(&apos;active&apos;);</span><br><span class="line">$(&apos;.slider&apos;).css(&#123;&apos;width&apos;: `$&#123;liWidth&#125;px`,&apos;left&apos;: `$&#123;offsetLeft&#125;px`,&apos;background&apos;: `$&#123;color&#125;`&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/下划线跟随.gif&quot; alt=&quot;切换标签下划线跟随&quot; title=&quot;切换标签下划线跟随&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="下划线跟随" scheme="https://www.zhuxingmin.com/tags/%E4%B8%8B%E5%88%92%E7%BA%BF%E8%B7%9F%E9%9A%8F/"/>
    
      <category term="jquery" scheme="https://www.zhuxingmin.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>秒懂——惹人烦恼的this指向</title>
    <link href="https://www.zhuxingmin.com/2019/06/11/%E7%A7%92%E6%87%82-%E6%83%B9%E4%BA%BA%E7%83%A6%E6%81%BC%E7%9A%84this%E6%8C%87%E5%90%91/"/>
    <id>https://www.zhuxingmin.com/2019/06/11/秒懂-惹人烦恼的this指向/</id>
    <published>2019-06-11T08:50:47.000Z</published>
    <updated>2019-06-11T12:35:22.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于-This"><a href="#关于-This" class="headerlink" title="关于 This"></a>关于 This</h3><ul><li>它是JS关键字，在JS中具有特殊意义，代表一个空间地址；</li><li>this是执行的主体，谁执行的这个函数谁就是this。</li></ul><a id="more"></a><h3 id="惹人烦恼的this"><a href="#惹人烦恼的this" class="headerlink" title="惹人烦恼的this"></a>惹人烦恼的this</h3><p>&emsp;&emsp;This是什么？什么是this指针？this指针指向哪里？何时使用this？<code>use or not use, that is a question.</code><br>&emsp;&emsp;其中至关重要的<code>this指向</code>问题，不仅自身麻烦，而且各类层出不穷的相关面试题更是让人应接不暇。既然这么麻烦，难倒无数js开发er，我们到底要做怎样的挣扎才能记住呢？且听下回…哦不，且往下看。</p><hr><h3 id="THIS"><a href="#THIS" class="headerlink" title="THIS"></a>THIS</h3><p><strong>&emsp;&emsp;首先，我们介绍下关于this。</strong></p><h4 id="1-什么是this指针？this指针指向哪里？何时使用this？"><a href="#1-什么是this指针？this指针指向哪里？何时使用this？" class="headerlink" title="1. 什么是this指针？this指针指向哪里？何时使用this？"></a>1. 什么是this指针？this指针指向哪里？何时使用this？</h4><blockquote><p>&emsp;&emsp;在JavaScript中，在创建函数时，系统默认会生成的两个隐式参数：<code>this</code>和<code>arguments</code>。函数执行时，自动生成的一个内部对象，只能在函数内部使用。this指针指向与该函数调用进行隐式关联的一个对象，该对象被称为“函数上下文”。this是js的一个关键字，随着函数使用场合不同，this的值会发生变化。<br>&emsp;&emsp;this永远指向其所在函数的真实调用者（谁调用的就指向谁，）如果没有所有者时，指向全局对象window。</p></blockquote><p><strong>&emsp;&emsp;接着，我们来看一下常见函数调用方式</strong></p><h4 id="2-常见函数调用方式"><a href="#2-常见函数调用方式" class="headerlink" title="2. 常见函数调用方式"></a>2. 常见函数调用方式</h4><ul><li><p>直接调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fn (n) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(n);</span><br></pre></td></tr></table></figure></li><li><p>作为对象方法调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    fn: function (n) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.fn(n);</span><br></pre></td></tr></table></figure></li><li><p>call/apply</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fn (n)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(context, n);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-变幻"><a href="#3-变幻" class="headerlink" title="3. 变幻"></a>3. 变幻</h4><p>&emsp;&emsp;观察 <strong>2</strong> 中的几种常见方式，其实前几种都与最后一种密不可分。原因是前两种都是第三种方式的简写（语法糖）。当然，前两种方式也可以转变为第三种：</p><ul><li><code>fn(n)</code> =&gt; <code>fn.call(undefined, n)</code></li><li><code>obj.fn(n)</code> =&gt; <code>obj.fn.call(obj, n)</code></li></ul><p>&emsp;&emsp;因此，我们函数调用归根就是一种：<code>fn.call(context, n)</code></p><h4 id="4-结论"><a href="#4-结论" class="headerlink" title="4. 结论"></a>4. 结论</h4><p>&emsp;&emsp;可是我们总结以上，跟this有什么关系呢？其实答案已经呼之欲出了！<strong><code>context</code>就是<code>this</code>所指向！当context为null或undefined时，也可省略不写，并且this指向window。</strong>那么这时我们再来看看，就发现this指向很是明了了。<br>&emsp;&emsp;</p><blockquote><p>当转换为标准写法时，this指向context。<br>当context为null或undefined时，也可省略不写，并且this指向window。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于-This&quot;&gt;&lt;a href=&quot;#关于-This&quot; class=&quot;headerlink&quot; title=&quot;关于 This&quot;&gt;&lt;/a&gt;关于 This&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;它是JS关键字，在JS中具有特殊意义，代表一个空间地址；&lt;/li&gt;
&lt;li&gt;this是执行的主体，谁执行的这个函数谁就是this。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="this指向" scheme="https://www.zhuxingmin.com/tags/this%E6%8C%87%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>电商放大镜及动态边框效果</title>
    <link href="https://www.zhuxingmin.com/2019/06/02/%E7%94%B5%E5%95%86%E6%94%BE%E5%A4%A7%E9%95%9C%E5%8F%8A%E5%8A%A8%E6%80%81%E8%BE%B9%E6%A1%86%E6%95%88%E6%9E%9C/"/>
    <id>https://www.zhuxingmin.com/2019/06/02/电商放大镜及动态边框效果/</id>
    <published>2019-06-02T08:40:18.000Z</published>
    <updated>2019-06-11T08:47:16.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><blockquote><p>&emsp;&emsp;大家在网购的时候一定没少用过此功能吧~某宝某猫某东，在PC端所有商品的展示均是如此：鼠标放在缩略图上，旁边便会有细节图展示出来，并随鼠标移动展示相应缩略图细节。下面我用js(jq)来展示一下，并且加入一丢丢的动态边框效果。</p></blockquote><a id="more"></a><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/posts/电商放大镜.gif" alt="电商放大镜" title="电商放大镜"></p><h3 id="环境及语言"><a href="#环境及语言" class="headerlink" title="环境及语言"></a>环境及语言</h3><ul><li>html</li><li>css</li><li>js / jq</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>放大镜<ol><li>缩略图及细节图布局</li><li>鼠标划入事件：鼠标放在缩略图，出现小的蒙层和细节图；当鼠标移动，细节图随之变化</li><li>鼠标及蒙层边界判断处理</li><li>鼠标移除事件：隐藏蒙蒙层及细节图</li></ol></li><li>动态边框<ol><li>鼠标悬浮，边框出现</li><li>鼠标移除，边框消失<br><strong>那么问题来了，细节图怎么随鼠标变化？边框以何种形式展现？</strong></li></ol></li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>由浅入深，我先来实现动态边框</p><h4 id="1-动态边框"><a href="#1-动态边框" class="headerlink" title="1. 动态边框"></a>1. 动态边框</h4><h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/posts/动态边框.gif" alt="动态边框" title="动态边框"></p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>看到该效果，一般思路有二：</p><blockquote><ol><li>设置border</li><li>周边4个div</li></ol></blockquote><p>&emsp;&emsp;但是以上两个思路均有问题。如果设置border，如何使其边框动画？如果周边设置4个div，那么不仅是需要js操控，并且无形之中增加了许多复杂度，与编程思想背道而驰。<br>&emsp;&emsp;那么我们还有别的办法来处理使边框动起来吗？首先，动画是一定要有的。其次，如果不能用border，那么用background怎么样呢？<code>just do it.</code></p><h5 id="新属性-linear-gradient-函数"><a href="#新属性-linear-gradient-函数" class="headerlink" title="新属性 linear-gradient() 函数"></a>新属性 linear-gradient() 函数</h5><blockquote><p>inear-gradient函数作为css3新属性，用于创建一个线性渐变的“图像”。你还要定义终止色。终止色就是你想让Gecko去平滑的过渡，并且你必须指定至少两种，当然也会可以指定更多的颜色去创建更复杂的渐变效果。</p></blockquote><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// html </span><br><span class="line">&lt;div class=&quot;transBorder&quot;&gt;</span><br><span class="line">    here</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// css</span><br><span class="line">.transBorder &#123;</span><br><span class="line">margin: 0 15px;</span><br><span class="line">cursor: pointer;</span><br><span class="line">display: block;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 200px;</span><br><span class="line">transition: ease-in .4s;</span><br><span class="line">background: linear-gradient(0, #108b96 2px, #009606 2px) no-repeat,</span><br><span class="line">linear-gradient(-90deg, #96645f 2px, #961478 2px) no-repeat,</span><br><span class="line">linear-gradient(-180deg, #869660 2px, #544996 2px) no-repeat,</span><br><span class="line">linear-gradient(-270deg, #439638 2px, #308e96 2px) no-repeat;</span><br><span class="line">background-size: 0 2px, 2px 0, 0 2px, 2px 0;</span><br><span class="line">background-position: left top, right top, right bottom, left bottom;</span><br><span class="line">&#125;</span><br><span class="line">.transBorder:hover &#123;</span><br><span class="line">border-radius: 20%;</span><br><span class="line">background-size: 100%  5px ,  5px 100%, 100% 5px, 5px 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-放大镜"><a href="#2-放大镜" class="headerlink" title="2. 放大镜"></a>2. 放大镜</h4><h5 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/posts/电商放大镜.png" alt="电商放大镜" title="电商放大镜"></p><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><blockquote></blockquote><ul><li>鼠标移入<ol><li>显示蒙层及细节图</li><li>指定蒙层位置</li><li>为蒙层及细节图做相关计算，如蒙层中心、细节图走向等</li><li>鼠标及蒙层边界判断及处理</li><li>细节图展示及变化</li></ol></li><li>鼠标移除<br>  蒙层及细节图隐藏</li></ul><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// html </span><br><span class="line">&lt;div class=&quot;small&quot;&gt;</span><br><span class="line">&lt;div id=&quot;small&quot;&gt;</span><br><span class="line">&lt;img src=&quot;./img/small.png&quot; alt=&quot;&quot; width=&quot;100%&quot;&gt;</span><br><span class="line">&lt;div id=&quot;modal&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;big&quot;&gt;</span><br><span class="line">&lt;img src=&quot;./img/big.png&quot; alt=&quot;&quot; id=&quot;bigImg&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// css</span><br><span class="line">// ...略</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">$(&apos;#small&apos;).mousemove((e) =&gt; &#123;</span><br><span class="line">// 显示大图区域</span><br><span class="line">$(&apos;#big, #modal&apos;).fadeIn(500);</span><br><span class="line">// 指定蒙层位置，随鼠标变化</span><br><span class="line">let x = e.clientX - $(&apos;#small&apos;).offset().left - $(&quot;#modal&quot;).width() / 2 + &apos;px&apos;;</span><br><span class="line">var y = e.clientY - $(&quot;#small&quot;).offset().top - $(&quot;#modal&quot;).height() / 2 + &apos;px&apos;;</span><br><span class="line">$(&apos;#modal&apos;).css(&#123;&apos;top&apos;: y, &apos;left&apos;: x&#125;);</span><br><span class="line"></span><br><span class="line">// 小图和蒙层的宽高差</span><br><span class="line">let maxW = $(&apos;#small&apos;).width() - $(&apos;#modal&apos;).width();</span><br><span class="line">let maxH = $(&apos;#small&apos;).height() - $(&apos;#modal&apos;).height();</span><br><span class="line"></span><br><span class="line">// 蒙层距离小图边界值</span><br><span class="line">var l = $(&apos;#modal&apos;).offset().left - $(&apos;#small&apos;).offset().left;   // 蒙层距离左边界距离</span><br><span class="line">var t = $(&apos;#modal&apos;).offset().top - $(&apos;#small&apos;).offset().top;     // 蒙层距离上边界距离</span><br><span class="line"></span><br><span class="line">// 边界判断</span><br><span class="line">// 到达左边距 固定left</span><br><span class="line">if (l &lt; 0)&#123;</span><br><span class="line">$(&apos;#modal&apos;).css(&apos;left&apos;, &apos;0&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// 到达上边距 固定top</span><br><span class="line">if (t &lt; 0)&#123;</span><br><span class="line">$(&apos;#modal&apos;).css(&apos;top&apos;, &apos;0&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// 到达右边距 固定left</span><br><span class="line">if (l &gt;= maxW)&#123;</span><br><span class="line">$(&apos;#modal&apos;).css(&apos;left&apos;, maxW);</span><br><span class="line">&#125;</span><br><span class="line">// 到达下边距 固定top</span><br><span class="line">if (t &gt;= maxH)&#123;</span><br><span class="line">$(&apos;#modal&apos;).css(&apos;top&apos;, maxH);</span><br><span class="line">&#125;</span><br><span class="line">// 鼠标滑动轨迹及大图相应变化</span><br><span class="line">let l1 = ($(&apos;#modal&apos;).offset().left - $(&apos;#small&apos;).offset().left) &lt; 0 ? 0 : ($(&apos;#modal&apos;).offset().left - $(&apos;#small&apos;).offset().left);</span><br><span class="line">let t1 = ($(&apos;#modal&apos;).offset().top - $(&apos;#small&apos;).offset().top) &lt; 0 ? 0 : ($(&apos;#modal&apos;).offset().top - $(&apos;#small&apos;).offset().top);</span><br><span class="line">let scaleX = (l1 / maxW) * ($(&apos;#big&apos;).width() - $(&apos;#bigImg&apos;).width()) + &apos;px&apos;;</span><br><span class="line">let scaleY = (t1 / maxW) * ($(&apos;#big&apos;).height() - $(&apos;#bigImg&apos;).height()) + &apos;px&apos;;</span><br><span class="line">$(&apos;#bigImg&apos;).css(&#123;&apos;left&apos;: scaleX,&apos;top&apos;: scaleY&#125;);</span><br><span class="line">&#125;).mouseleave(() =&gt; &#123;</span><br><span class="line">// 鼠标离开小图，大图消失</span><br><span class="line">$(&apos;#big, #modal&apos;).fadeOut(500);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;大家在网购的时候一定没少用过此功能吧~某宝某猫某东，在PC端所有商品的展示均是如此：鼠标放在缩略图上，旁边便会有细节图展示出来，并随鼠标移动展示相应缩略图细节。下面我用js(jq)来展示一下，并且加入一丢丢的动态边框效果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="jquery" scheme="https://www.zhuxingmin.com/tags/jquery/"/>
    
      <category term="电商放大镜" scheme="https://www.zhuxingmin.com/tags/%E7%94%B5%E5%95%86%E6%94%BE%E5%A4%A7%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>vue弹窗屏蔽滑动的两种解决方案</title>
    <link href="https://www.zhuxingmin.com/2019/05/28/vue%E5%BC%B9%E7%AA%97%E5%B1%8F%E8%94%BD%E6%BB%91%E5%8A%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://www.zhuxingmin.com/2019/05/28/vue弹窗屏蔽滑动的两种解决方案/</id>
    <published>2019-05-28T06:38:59.000Z</published>
    <updated>2019-05-28T09:40:26.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>&emsp;&emsp;在开发过程中，我们经常会遇到要加弹窗的需求，而如果当前页的展示数据一屏展示不完，则在打开弹窗后，有滑动操作时，页面也会随之滑动。那么如何处理这一问题呢？</p><a id="more"></a><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>&emsp;&emsp;我们开发过程中，最常见的问题上文已叙述：打开弹窗后，有滑动操作时，页面也会随之滑动。问题示意图如下：<br><img src="/images/posts/背景无法屏蔽弹窗.gif" alt="背景数据仍可滑动" title="背景数据仍可滑动"></p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><strong>我们来看一波正确示范</strong><br><img src="/images/posts/可滑动弹窗.gif" alt="可滑动弹窗" title="可滑动弹窗"></p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>&emsp;&emsp;两种解决方案，针对两种不同情况：</p><ol><li>弹框数据少，无需滑动</li><li>弹框内数据需要滑动展示</li></ol><h4 id="1-无需滑动弹窗"><a href="#1-无需滑动弹窗" class="headerlink" title="1. 无需滑动弹窗"></a>1. 无需滑动弹窗</h4><h5 id="a-思路"><a href="#a-思路" class="headerlink" title="a. 思路"></a>a. 思路</h5><blockquote><p>思路：<br>vue自带修饰符可解决该问题—— <code>@touchmove.prevent</code> </p></blockquote><p>此方案重点在将<code>@touchmove.prevent</code>绑定到弹窗模块，然后动态控制弹窗显示隐藏即可。</p><h5 id="b-效果"><a href="#b-效果" class="headerlink" title="b. 效果"></a>b. 效果</h5><p><img src="/images/posts/不可滑动弹窗.gif" alt="不可滑动弹窗" title="不可滑动弹窗"></p><h5 id="c-代码"><a href="#c-代码" class="headerlink" title="c. 代码"></a>c. 代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;modalTest&quot;&gt;</span><br><span class="line">        &lt;!-- 按钮组 --&gt;</span><br><span class="line">        &lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;success&quot; size=&quot;small&quot; @click=&quot;modalSign1 = true&quot;&gt;弹窗1&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 背景数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;listBG&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;item in 50&quot;&gt;这是第&#123;&#123;item&#125;&#125;条背景数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 弹框1 --&gt;</span><br><span class="line">        &lt;div class=&quot;modalBox&quot; v-if=&quot;modalSign1&quot; @touchmove.prevent @click.self=&quot;modalSign1 = false&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;item in 8&quot;&gt;这是第&#123;&#123;item&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                modalSign1: false, // 弹窗是否打开</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-弹框内数据需要滑动展示"><a href="#2-弹框内数据需要滑动展示" class="headerlink" title="2. 弹框内数据需要滑动展示"></a>2. 弹框内数据需要滑动展示</h4><h5 id="a-思路-1"><a href="#a-思路-1" class="headerlink" title="a. 思路"></a>a. 思路</h5><p>&emsp;&emsp;首先，我们使用正常的vue操作，比如刚才的修饰符/语法糖进行操作时，虽然可以屏蔽掉背景数据滑动，但是该事件同时会将弹框内的滑动也阻止掉，我们则无法完成该需求。如果这个不行，我们还有别的方法来完成需求吗？<br>&emsp;&emsp;我考虑到一种方案，但是属于DOM操作，与vue的初衷可能不太符合。不过此方案也不矢为一种能够有效解决问题的办法。</p><blockquote><p>思路：<br>利用css<code>position: fixed</code>以及<code>top: x px</code>来固定位置。步骤分解如下：</p><ol><li>写一个样式放到公共css中备用；</li><li>点击按钮，控制弹窗显示隐藏；</li><li>两个方法，一个控制将步骤<code>1</code>写的css动态添加到<code>body</code>上，另外一个则控制移除该效果；<ul><li>添加方法：①获取当前页面距离顶部高度，保存到data中；②给body添加步骤1的css；③设置body的高度为刚才获取到的高度。</li><li>移除方法： ①将刚才冬天给body添加的css移除；②当前滑动高度设置为data中存储的高度。</li></ul></li></ol></blockquote><h5 id="b-效果-1"><a href="#b-效果-1" class="headerlink" title="b. 效果"></a>b. 效果</h5><p><img src="/images/posts/可滑动弹窗.gif" alt="可滑动弹窗" title="可滑动弹窗"></p><h5 id="c-两个案例完整代码"><a href="#c-两个案例完整代码" class="headerlink" title="c. 两个案例完整代码"></a>c. 两个案例完整代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;modalTest&quot;&gt;</span><br><span class="line">        &lt;!-- 按钮组 --&gt;</span><br><span class="line">        &lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;success&quot; size=&quot;small&quot; @click=&quot;modalSign1 = true&quot;&gt;弹窗1&lt;/el-button&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; @click=&quot;openModal&quot;&gt;弹窗2&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 背景数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;listBG&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;item in 50&quot;&gt;这是第&#123;&#123;item&#125;&#125;条背景数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 弹框1 --&gt;</span><br><span class="line">        &lt;div class=&quot;modalBox&quot; v-if=&quot;modalSign1&quot; @touchmove.prevent @click.self=&quot;modalSign1 = false&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;item in 8&quot;&gt;这是第&#123;&#123;item&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 弹框2 --&gt;</span><br><span class="line">        &lt;div class=&quot;modalBox&quot; v-if=&quot;modalSign2&quot; @click.self=&quot;closeModal&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;item in 20&quot;&gt;这是第&#123;&#123;item&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                modalSign1: false, // 弹窗是否打开</span><br><span class="line">                modalSign2: false, // 弹窗是否打开</span><br><span class="line">                scrollTop: undefined, // 距离顶端的值</span><br><span class="line">                className: &apos;modalOpen&apos;, // 类名</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 打开弹层 要做的事</span><br><span class="line">            afterOpen () &#123;</span><br><span class="line">                this.scrollTop = document.scrollingElement.scrollTop;</span><br><span class="line">                document.body.classList.add(this.className);</span><br><span class="line">                document.body.style.top = `-$&#123;this.scrollTop&#125;px`;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 弹层关闭之前 要做的事</span><br><span class="line">            beforeClose () &#123;</span><br><span class="line">                document.body.classList.remove(this.className);</span><br><span class="line">                document.scrollingElement.scrollTop = this.scrollTop;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 打开弹窗</span><br><span class="line">            openModal () &#123;</span><br><span class="line">                this.modalSign2 = true;</span><br><span class="line">                this.afterOpen();</span><br><span class="line">            &#125;,</span><br><span class="line">            // 关闭弹窗</span><br><span class="line">            closeModal () &#123;</span><br><span class="line">                this.modalSign2 = false;</span><br><span class="line">                this.beforeClose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/scss&quot; lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .modalTest&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        min-height: 100vh;</span><br><span class="line">        overflow: scroll;</span><br><span class="line">        .btn&#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            z-index: 10;</span><br><span class="line">            &amp;&gt;button&#123;</span><br><span class="line">                margin: 10px 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .listBG&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        .modalBox&#123;</span><br><span class="line">            width: 100vw;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            background: rgba(0,0,0,0.4);</span><br><span class="line">            z-index: 999;</span><br><span class="line"></span><br><span class="line">            .modal&#123;</span><br><span class="line">                width: 220px;</span><br><span class="line">                height: 280px;</span><br><span class="line">                overflow: scroll;</span><br><span class="line">                background: #fff;</span><br><span class="line">                border-radius: 10px;</span><br><span class="line">                position: absolute;</span><br><span class="line">                left: 50%;</span><br><span class="line">                top: 50%;</span><br><span class="line">                transform: translate(-50%, -50%);</span><br><span class="line">                -moz-box-shadow:10px 10px 9px #332A0D;</span><br><span class="line">                -webkit-box-shadow:10px 10px 9px #332A0D;</span><br><span class="line">                box-shadow:10px 10px 9px #332A0D;</span><br><span class="line">                padding: 30px 0 0;</span><br><span class="line"></span><br><span class="line">                ul&#123;</span><br><span class="line">                    text-align: center;</span><br><span class="line">                    li&#123;</span><br><span class="line">                        list-style: none;</span><br><span class="line">                        line-height: 30px;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="d-备注"><a href="#d-备注" class="headerlink" title="d. 备注"></a>d. 备注</h5><p><em><code>.modalOpen</code>的css样式，放在公共样式中，因为我们要改变的是body的样式，因此在组件中写的样式可能会失效。例如，我将样式放在了<code>src/assets/css/common.css</code></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*弹层*/</span><br><span class="line">body.modalOpen &#123;</span><br><span class="line">    -webkit-overflow-scrolling:touch;</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在开发过程中，我们经常会遇到要加弹窗的需求，而如果当前页的展示数据一屏展示不完，则在打开弹窗后，有滑动操作时，页面也会随之滑动。那么如何处理这一问题呢？&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="弹窗" scheme="https://www.zhuxingmin.com/tags/%E5%BC%B9%E7%AA%97/"/>
    
      <category term="滑动" scheme="https://www.zhuxingmin.com/tags/%E6%BB%91%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue中引入并使用markdown编辑器</title>
    <link href="https://www.zhuxingmin.com/2019/05/23/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8markdown%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    <id>https://www.zhuxingmin.com/2019/05/23/vue中引入并使用markdown相关组件/</id>
    <published>2019-05-23T11:45:17.000Z</published>
    <updated>2019-05-23T12:33:48.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/posts/markdown示例.png" alt="markdown组件示例"></p><a id="more"></a><h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p>&emsp;&emsp;不知道各位是否对<code>markdown</code>熟悉。它算是一门标记语言，但是语法简单，却本领强大。例如本篇博客，便是用<code>markdown</code>语法编写，然后根据不同的环境及依赖生成各种我想要的样式，比如直接生成本篇博客样式或者使用一些依赖或者工具赋之更加美观的样式。同样，一般在<strong>CMS</strong>后台管理系统中，也经常会用到编辑器来编写一些文章材料。其中最常用的还是<code>markdown编辑器</code>和<code>富文本编辑器</code>。</p><h3 id="Markdown-介绍"><a href="#Markdown-介绍" class="headerlink" title="Markdown 介绍"></a>Markdown 介绍</h3><p><strong><em>1. 什么是Markdown</em></strong><br>&emsp;&emsp;首先，各位框架玩家一定不会陌生，因为无论是在各类框架下还是开源项目中，都会有一个<code>.md</code>的文件，该文件一般是项目说明文件，不仅语法简洁，而且所生成的“页面”也要比普通标记语言更加整洁明了。那么它到底是什么呢？<br>&emsp;&emsp;<strong>Markdown是一种可以使用普通文本编辑器编写的标记语言</strong>，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>&emsp;&emsp;Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p><p><strong><em>2. Markdown用途</em></strong><br>&emsp;&emsp;Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。<br>&emsp;&emsp;用于编写说明文档，并且以“README.md”的文件名保存在软件的目录下面。<br>除此之外，由于我们有了RStudio这样的神级编辑器，我们还可以快速将Markdown转化为演讲PPT、Word产品文档、LaTex论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown已经广泛使用，极大地推进了动态可重复性研究的历史进程。</p><h3 id="vue-中如何使用"><a href="#vue-中如何使用" class="headerlink" title="vue 中如何使用"></a>vue 中如何使用</h3><p><em>注： 本示例选用的是<code>mavon-editor</code></em><br><strong>很明显，所有组件逃不过三步走原则：</strong></p><blockquote><ol><li>安装</li><li>引入、配置</li><li>使用</li></ol></blockquote><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>安装mavon-editor:<code>npm install mavon-editor --save</code></p><h4 id="2-引入、配置"><a href="#2-引入、配置" class="headerlink" title="2. 引入、配置"></a>2. 引入、配置</h4><p>在要使用markdown编辑器的组件内操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 导入组件 及 组件样式</span><br><span class="line">import &#123; mavonEditor &#125; from &apos;mavon-editor&apos;</span><br><span class="line">import &apos;mavon-editor/dist/css/index.css&apos;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><blockquote><p>注意：</p><ol><li>绑定model</li><li>实时改变：将<code>markdown</code>实时转化为<code>html</code></li></ol></blockquote><p>在要使用markdown编辑器的组件内操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;mavon-editor </span><br><span class="line">v-model=&quot;content&quot; </span><br><span class="line">ref=&quot;md&quot; </span><br><span class="line">@change=&quot;change&quot; </span><br><span class="line">style=&quot;min-height: 600px&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">// 注册</span><br><span class="line">components: &#123;</span><br><span class="line">mavonEditor,</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">content:&apos;&apos;,// 输入的markdown</span><br><span class="line">html:&apos;&apos;,// 及时转的html</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 所有操作都会被解析重新渲染</span><br><span class="line">change(value, render)&#123;</span><br><span class="line">// render 为 markdown 解析后的结果[html]</span><br><span class="line">this.html = render;</span><br><span class="line">&#125;,</span><br><span class="line">// 提交</span><br><span class="line">submit()&#123;</span><br><span class="line">console.log(this.content);</span><br><span class="line">console.log(this.html);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>那么，在常用的操作里面，例如各级标题、表格、加粗加斜、标记、图文……图？此时，我们发现一个问题：如何添加本地图片呢？</p><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p><strong><em>在某些IDE里面使用markdown时，可以自由的插入本地图片，那我们在页面中使用此编译器组件如何添加图片呢？</em></strong></p><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p><strong>监听。</strong>没错，就是监听输入框变化。如果监听到有图片插入，那么我们可以先将图片上传至服务器，然后获取到线上url，拿到该url再插入到该位置。那么具体过程就很明显了：</p><ol><li>选择本地图片，插入</li><li>监听到有图片插入</li><li>将该图上传至服务器</li><li>获取到服务器返回的图片url</li><li>将该线上url冬天插入到输入框中</li></ol><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;markdown&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;mavon-editor v-model=&quot;content&quot; ref=&quot;md&quot; @imgAdd=&quot;$imgAdd&quot; @change=&quot;change&quot; style=&quot;min-height: 600px&quot;/&gt;</span><br><span class="line">            &lt;button @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123; mavonEditor &#125; from &apos;mavon-editor&apos;</span><br><span class="line">    import &apos;mavon-editor/dist/css/index.css&apos;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;&quot;,</span><br><span class="line">        props: [],</span><br><span class="line">        components: &#123;</span><br><span class="line">            mavonEditor,</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                content:&apos;&apos;,</span><br><span class="line">                html:&apos;&apos;,</span><br><span class="line">                configs: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 将图片上传到服务器，返回地址替换到md中</span><br><span class="line">            $imgAdd(pos, $file)&#123;</span><br><span class="line">                let formdata = new FormData();</span><br><span class="line"></span><br><span class="line">                this.$upload.post(&apos;/上传接口地址&apos;, formdata).then(res =&gt; &#123;</span><br><span class="line">                    console.log(res.data);</span><br><span class="line">                    this.$refs.md.$img2Url(pos, res.data);</span><br><span class="line">                &#125;).catch(err =&gt; &#123;</span><br><span class="line">                    console.log(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            // 所有操作都会被解析重新渲染</span><br><span class="line">            change(value, render)&#123;</span><br><span class="line">                // render 为 markdown 解析后的结果[html]</span><br><span class="line">                this.html = render;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 提交</span><br><span class="line">            submit()&#123;</span><br><span class="line">                console.log(this.content);</span><br><span class="line">                console.log(this.html);</span><br><span class="line">                this.$message.success(&apos;提交成功，已打印至控制台！&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="后"><a href="#后" class="headerlink" title="后"></a>后</h3><p>&emsp;&emsp;到这里，vue中使用markdown编辑器教程结束。那么更为大众广泛使用的<code>富文本编辑器</code>如何使用呢？且看下回~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/markdown示例.png&quot; alt=&quot;markdown组件示例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="markdown" scheme="https://www.zhuxingmin.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>520特辑———旋转爱</title>
    <link href="https://www.zhuxingmin.com/2019/05/20/520%E7%89%B9%E8%BE%91%E2%80%94%E2%80%94%E2%80%94%E6%97%8B%E8%BD%AC%E7%88%B1/"/>
    <id>https://www.zhuxingmin.com/2019/05/20/520特辑———旋转爱/</id>
    <published>2019-05-20T05:55:53.000Z</published>
    <updated>2019-05-20T07:36:49.891Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>&emsp;&emsp;<font color="deepskyblue" size="18">520</font>：网络情人节是信息时代的爱情节日，定于每年的5月20日和5月21日。该节日源于歌手范晓萱的《数字恋爱》中“520”被喻成“我爱你” ，以及音乐人吴玉龙的网络歌曲中“我爱你”与“网络情人”的紧密联系。后来，“521”也逐渐被情侣们赋予了“我愿意、我爱你”的意思。“网络情人节”又被称为“结婚吉日”、“表白日”、“撒娇日”、“求爱节”。<br>&emsp;&emsp;那么，作为程序员，如何通过专业技能向自己的另一半表达爱意呢？</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/posts/520.gif" alt="520" title="520"></p><a id="more"></a><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><table><thead><tr><th style="text-align:center">技术栈[及环境]</th><th style="text-align:center">版本</th></tr></thead><tbody><tr><td style="text-align:center">vue-cli</td><td style="text-align:center">3.x</td></tr><tr><td style="text-align:center">vue</td><td style="text-align:center">2.x</td></tr><tr><td style="text-align:center">element-ui</td><td style="text-align:center">2.x</td></tr><tr><td style="text-align:center">sass</td><td style="text-align:center">scss</td></tr></tbody></table><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li>不难看出，页面分为三个部分：背景、旋转导航花瓣及弹框；</li><li>6个花瓣对应对个导航栏，每个导航栏颜色及打开弹窗的背景色相同；</li><li>弹窗共用，动态展示不同的弹窗内容区域及改变标题即可；</li><li>动画：这里动画均有原生css3的@keyframes完成，在animation里调用。</li></ol><h4 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h4><ul><li>导航切换</li><li>旋转动画</li><li>走马灯（相册轮播）</li><li>标签切换（足迹中标签）</li><li>table表格（说说）</li><li>时间轴（时刻）</li><li>弹幕效果（留言）</li><li>缩放效果（中心图片点击缩放）</li></ul><h4 id="项目一览"><a href="#项目一览" class="headerlink" title="项目一览"></a>项目一览</h4><p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── README.md// 项目说明</span><br><span class="line">├── babel.config// babel配置</span><br><span class="line">├── package.json// 包配置</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico// 放在title前的页面logo</span><br><span class="line">│   └── index.html// 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── css// 自定义配置css</span><br><span class="line">│   │   └── love// 图片资源</span><br><span class="line">│   ├── love</span><br><span class="line">│   │   └── love.vue// 520主题组件</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── router.js// 路由</span><br><span class="line">│   └── main.js// 主配置</span><br><span class="line">└── vue.config.js// vue自定义配置</span><br></pre></td></tr></table></figure></p><blockquote><p>其中，项目重点在<code>love.vue</code>组件中</p></blockquote><h4 id="功能点简述"><a href="#功能点简述" class="headerlink" title="功能点简述"></a>功能点简述</h4><h5 id="1-导航及切换"><a href="#1-导航及切换" class="headerlink" title="1. 导航及切换"></a>1. 导航及切换</h5><p><img src="/images/posts/旋转菜单切换.gif" alt="导航切换效果" title="旋转菜单切换"></p><blockquote><p>首先，6个导航位，文字不同，icon不同；<br>其次，点击菜单需要有旋转效果，菜单旋转缩小，弹框旋转放大展示；<br>最后，判断/写入弹框卡片(下简称卡片)背景色。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">// template 部分</span><br><span class="line">&lt;div class=&quot;leafs&quot;&gt;</span><br><span class="line">&lt;div v-for=&quot;(item, index) in menuList&quot;</span><br><span class="line"> :key=&quot;item.name&quot;</span><br><span class="line"> class=&quot;leaf&quot;</span><br><span class="line"> @click=&quot;runCircle(item.name, index)&quot;</span><br><span class="line"> :class=&quot;`leaf$&#123;index+1&#125;`&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;item.url&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;span class=&quot;nameSpain&quot;&gt;&lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt; &#123;&#123; item.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 小心心 --&gt;</span><br><span class="line">&lt;div class=&quot;heart&quot;</span><br><span class="line"> :class=&quot;&#123;heartScale: heartScaleSign&#125;&quot;</span><br><span class="line"> @click=&quot;heartScale&quot;&gt;</span><br><span class="line">&lt;img src=&quot;../assets/love/heart.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// script部分</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">show: false,</span><br><span class="line">runCircleSign: false,   // 旋转变小</span><br><span class="line">heartScaleSign: false,  // 心 变大缩小</span><br><span class="line">cardMiss: false,    // 卡片动画消失</span><br><span class="line">showCard: false,    // 卡片显示状态</span><br><span class="line">cardName: &apos;&apos;,   // 卡片title</span><br><span class="line">cardChange: -1, //切换卡片</span><br><span class="line">cardGround: &apos;&apos;, // 卡片背景色</span><br><span class="line">menuList: [</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf1.png&apos;),</span><br><span class="line">icon: &apos;el-icon-picture-outline&apos;,</span><br><span class="line">name: &apos;相册&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf2.png&apos;),</span><br><span class="line">icon: &apos;el-icon-location&apos;,</span><br><span class="line">name: &apos;足迹&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf3.png&apos;),</span><br><span class="line">icon: &apos;el-icon-edit&apos;,</span><br><span class="line">name: &apos;说说&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf4.png&apos;),</span><br><span class="line">icon: &apos;el-icon-date&apos;,</span><br><span class="line">name: &apos;时刻&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf5.png&apos;),</span><br><span class="line">icon: &apos;el-icon-news&apos;,</span><br><span class="line">name: &apos;留言&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf6.png&apos;),</span><br><span class="line">icon: &apos;el-icon-printer&apos;,</span><br><span class="line">name: &apos;影集&apos;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">cardType: 0,</span><br><span class="line">menuIndex: -1,</span><br><span class="line">activeName: &apos;first&apos;,   // 当前标签</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 菜单缩放</span><br><span class="line">runCircle (name, index) &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">// 缩放</span><br><span class="line">this.runCircleSign = ! this.runCircleSign;</span><br><span class="line">this.menuIndex = index;</span><br><span class="line">// 赋值名称</span><br><span class="line">this.cardName = name;</span><br><span class="line">// 显示卡片</span><br><span class="line">this.showCard = true;</span><br><span class="line">// 卡片颜色</span><br><span class="line">switch (index) &#123;</span><br><span class="line">case 0:</span><br><span class="line">_this.cardGround = &apos;rgba(129,15,175,0.4)&apos;;</span><br><span class="line">_this.cardType = 0;</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">_this.cardGround = &apos;rgba(12,136,145,0.6)&apos;;</span><br><span class="line">_this.cardType = 1;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">_this.cardGround = &apos;rgba(255,235,45,0.6)&apos;;</span><br><span class="line">_this.cardType = 2;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">_this.cardGround = &apos;rgba(196,0,83,0.6)&apos;;</span><br><span class="line">_this.cardType = 3;</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">_this.cardGround = &apos;rgba(87,174,157,0.6)&apos;;</span><br><span class="line">_this.cardType = 4;</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">_this.cardGround = &apos;rgba(255,125,0,0.6)&apos;;</span><br><span class="line">_this.cardType = 5;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 心 缩放</span><br><span class="line">heartScale () &#123;</span><br><span class="line">this.heartScaleSign = ! this.heartScaleSign;</span><br><span class="line">&#125;,</span><br><span class="line">// 消失卡片 &amp;&amp; 菜单复原</span><br><span class="line">backSign () &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">_this.cardMiss = true;</span><br><span class="line">_this.runCircleSign = ! _this.runCircleSign;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">_this.showCard = false;</span><br><span class="line">_this.cardMiss = false;</span><br><span class="line">&#125;, 3000)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="2-弹幕效果"><a href="#2-弹幕效果" class="headerlink" title="2. 弹幕效果"></a>2. 弹幕效果</h5><p><img src="/images/posts/弹幕效果.gif" alt="留言弹幕效果" title="留言弹幕效果"></p><blockquote><p>1.输入内容；<br>2.循环展示；<br>3.随即高度及标签颜色；<br>4.利用本地存储持久化;<br>5.动画漂移效果。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;div class=&quot;haveWords&quot;&gt;</span><br><span class="line">&lt;!-- 展示内容 --&gt;</span><br><span class="line">&lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">&lt;el-tag v-for=&quot;el in ku&quot;</span><br><span class="line">:key=&quot;el.id&quot;</span><br><span class="line">class=&quot;fly&quot;</span><br><span class="line">:type=&quot;el.type&quot;</span><br><span class="line">:style=&quot;&#123;top:el.top + &apos;px&apos;&#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&#123;&#123; el.msg &#125;&#125;</span><br><span class="line">&lt;/el-tag&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 输入内容 --&gt;</span><br><span class="line">&lt;div class=&quot;dealBox&quot;&gt;</span><br><span class="line">&lt;el-input</span><br><span class="line">type=&quot;textarea&quot;</span><br><span class="line">:autosize=&quot;&#123; minRows: 2, maxRows: 5&#125;&quot;</span><br><span class="line">placeholder=&quot;请输入留言&quot;</span><br><span class="line">v-model.trim=&quot;msg&quot;</span><br><span class="line">size=&quot;small&quot;&gt;</span><br><span class="line">&lt;/el-input&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;sendData&quot;&gt;Biu~&lt;/el-button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// script</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: null, //缓存</span><br><span class="line">ku: JSON.parse(localStorage.kuArr), //存取数据</span><br><span class="line">msgKu: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 弹幕</span><br><span class="line">sendData () &#123;</span><br><span class="line">// 5中标签模式</span><br><span class="line">let typeArr = [&apos;&apos;,&apos;success&apos;,&apos;info&apos;,&apos;warning&apos;,&apos;danger&apos;];</span><br><span class="line">let localArr = this.ku;</span><br><span class="line">//判空 不为空则继续 为空则提示输入</span><br><span class="line">if(this.msg !== &apos;&apos; &amp;&amp; this.msg !== null) &#123;</span><br><span class="line">let num1 = Math.random() * 500;</span><br><span class="line">let num2 = Math.random() * 5;</span><br><span class="line">let arrMark = Math.floor(num2);</span><br><span class="line">let top = Math.floor(num1);</span><br><span class="line">let obj = &#123;msg:this.msg,top:top,type:typeArr[arrMark]&#125;;</span><br><span class="line">localArr.push(obj);</span><br><span class="line">localStorage.kuArr = JSON.stringify(localArr);</span><br><span class="line">this.msg = &quot;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.$message.warning(&apos;要先输入哦~&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;别的功能点基本上都是element-ui中组件自带或基于组件开发的，熟悉element-ui的小伙伴应该极为熟悉。有感兴趣的朋友可自行去element-ui官网学习。<a href="https://element.eleme.cn/2.0/#/zh-CN" title="element飞机票" target="_blank" rel="noopener">element飞机票</a></p></blockquote><h3 id="后"><a href="#后" class="headerlink" title="后"></a>后</h3><p>&emsp;&emsp;有对本demo感兴趣的或者想要作者源码的可以关注公众号<code>流眸</code>，回复“520源码”拿到代码哦~<br><img src="/images/posts/公众号二维码.jpg" alt="扫码关注公众号" title="扫码关注公众号"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;font color=&quot;deepskyblue&quot; size=&quot;18&quot;&gt;520&lt;/font&gt;：网络情人节是信息时代的爱情节日，定于每年的5月20日和5月21日。该节日源于歌手范晓萱的《数字恋爱》中“520”被喻成“我爱你” ，以及音乐人吴玉龙的网络歌曲中“我爱你”与“网络情人”的紧密联系。后来，“521”也逐渐被情侣们赋予了“我愿意、我爱你”的意思。“网络情人节”又被称为“结婚吉日”、“表白日”、“撒娇日”、“求爱节”。&lt;br&gt;&amp;emsp;&amp;emsp;那么，作为程序员，如何通过专业技能向自己的另一半表达爱意呢？&lt;/p&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/520.gif&quot; alt=&quot;520&quot; title=&quot;520&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="css" scheme="https://www.zhuxingmin.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js页面全屏</title>
    <link href="https://www.zhuxingmin.com/2019/05/13/js%E9%A1%B5%E9%9D%A2%E5%85%A8%E5%B1%8F/"/>
    <id>https://www.zhuxingmin.com/2019/05/13/js页面全屏/</id>
    <published>2019-05-13T06:20:51.000Z</published>
    <updated>2019-05-13T08:19:55.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><img src="/images/posts/页面全屏.gif" alt="页面全屏" title="页面全屏"></p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>&emsp;&emsp;在做前端PC端项目中，我们经常会遇到让页面全屏的需求。大多情况下，这样可以使得用户在该页面更加专注，屏蔽掉该页面之外的干扰。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>状态判断</li><li>事件操作<h4 id="1-状态判断"><a href="#1-状态判断" class="headerlink" title="1. 状态判断"></a>1. 状态判断</h4>首先，我们需要给出一个默认状态，即非全屏。然后，在此基础上我们进行DOM操作，每次用户进行操作时，我们先判断当前状态，进行相应的操作，操作过后改变当前状态即可。<h4 id="2-事件操作"><a href="#2-事件操作" class="headerlink" title="2. 事件操作"></a>2. 事件操作</h4><code>注：</code>下表中<code>de</code>代表<code>document.documentElement</code></li></ol><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">浏览器</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">全屏</td><td style="text-align:center">W3C</td><td style="text-align:center">de.requestFullscreen()</td></tr><tr><td style="text-align:center">全屏</td><td style="text-align:center">CHROME</td><td style="text-align:center">de.webkitRequestFullScreen()</td></tr><tr><td style="text-align:center">全屏</td><td style="text-align:center">FIREFOX</td><td style="text-align:center">de.mozRequestFullScreen()</td></tr><tr><td style="text-align:center">全屏</td><td style="text-align:center">IE</td><td style="text-align:center">de.msRequestFullscreen()</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">W3C</td><td style="text-align:center">document.exitFullscreen</td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">CHROME</td><td style="text-align:center">document.webkitCancelFullScreen</td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">FIREFOX</td><td style="text-align:center">document.mozCancelFullScreen</td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">IE</td><td style="text-align:center">document.msExitFullscreen</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>注：</code> 本demo在vue中使用。如果使用正常.html，自行将<code>@click</code>转为正常点击事件(如<code>onclick</code>)即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;div @click=&quot;handleFullScreen&quot;&gt;</span><br><span class="line">一个按钮</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">fullscreen: false  // 是否全屏</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 全屏事件</span><br><span class="line">handleFullScreen()&#123;</span><br><span class="line">let element = document.documentElement;</span><br><span class="line">// 判断是否已经是全屏</span><br><span class="line">// 如果是全屏，退出</span><br><span class="line">if (this.fullscreen) &#123;</span><br><span class="line">if (document.exitFullscreen) &#123;</span><br><span class="line">document.exitFullscreen();</span><br><span class="line">&#125; else if (document.webkitCancelFullScreen) &#123;</span><br><span class="line">document.webkitCancelFullScreen();</span><br><span class="line">&#125; else if (document.mozCancelFullScreen) &#123;</span><br><span class="line">document.mozCancelFullScreen();</span><br><span class="line">&#125; else if (document.msExitFullscreen) &#123;</span><br><span class="line">document.msExitFullscreen();</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;已还原！&apos;);</span><br><span class="line">&#125; else &#123;// 否则，进入全屏</span><br><span class="line">if (element.requestFullscreen) &#123;</span><br><span class="line">element.requestFullscreen();</span><br><span class="line">&#125; else if (element.webkitRequestFullScreen) &#123;</span><br><span class="line">element.webkitRequestFullScreen();</span><br><span class="line">&#125; else if (element.mozRequestFullScreen) &#123;</span><br><span class="line">element.mozRequestFullScreen();</span><br><span class="line">&#125; else if (element.msRequestFullscreen) &#123;</span><br><span class="line">// IE11</span><br><span class="line">element.msRequestFullscreen();</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;已全屏！&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// 改变当前全屏状态</span><br><span class="line">this.fullscreen = !this.fullscreen;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/页面全屏.gif&quot; alt=&quot;页面全屏&quot; title=&quot;页面全屏&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="全屏" scheme="https://www.zhuxingmin.com/tags/%E5%85%A8%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 3.x 打包白屏、清除console及IE白屏问题解决</title>
    <link href="https://www.zhuxingmin.com/2019/05/06/vue-cli-3-x-%E6%89%93%E5%8C%85%E7%99%BD%E5%B1%8F%E3%80%81%E6%B8%85%E9%99%A4console%E5%8F%8AIe%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://www.zhuxingmin.com/2019/05/06/vue-cli-3-x-打包白屏、清除console及Ie白屏问题解决/</id>
    <published>2019-05-06T01:27:27.000Z</published>
    <updated>2019-05-06T04:05:11.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>打包白屏</li><li>IE白屏</li><li>打包后清除控制台所有console信息</li><li>js\css压缩问题</li></ul><a id="more"></a><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="问题1-打包白屏"><a href="#问题1-打包白屏" class="headerlink" title="问题1. 打包白屏"></a>问题1. 打包白屏</h4><p><strong><em>描述</em></strong><br><code>npm run build</code>打包后，生成<code>dist</code>文件夹。从该文件夹打开<code>dist/index.html</code>页面，发现页面空白，且控制台报错。原因是路径配置有问题。<br><strong><em>方案</em></strong><br>根目录打开/新建<code>vue.config.js</code>，配置路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 基本路径配置</span><br><span class="line">  publicPath: &apos;./&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新打包验证，问题得以解决。</p><h4 id="问题2-IE白屏"><a href="#问题2-IE白屏" class="headerlink" title="问题2. IE白屏"></a>问题2. IE白屏</h4><p><strong><em>描述</em></strong><br>在打包完成之后，如果是pc项目，或者移动端低版本兼容项目，则会有许多问题，其中白屏问题困扰着很多开发者，在安卓4.0、IE多个版本环境中体现的尤为别致。<br><strong><em>方案</em></strong></p><ol><li><p>下载相关插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/plugin-transform-runtime @babel/preset-env es6-promise babel-polyfill --save-dev-dev</span><br></pre></td></tr></table></figure></li><li><p>根目录新建文件<code>.babelrc</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel/preset-env&quot;],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@babel/plugin-transform-runtime&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <em>[注: 基于vue-cli 3.x]</em></p></li><li><p>修改根目录下的文件<code>babel.config.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// ... some other codes</span><br><span class="line"></span><br><span class="line">// 打包时删除console</span><br><span class="line">const plugins = [];</span><br><span class="line">if ([&apos;production&apos;, &apos;prod&apos;].includes(process.env.NODE_ENV)) &#123;</span><br><span class="line">  plugins.push(&quot;transform-remove-console&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      &apos;@vue/app&apos;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;useBuiltIns&quot;: &quot;entry&quot;,</span><br><span class="line">        polyfills: [</span><br><span class="line">          &apos;es6.promise&apos;,</span><br><span class="line">          &apos;es6.symbol&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  plugins: plugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建/修改根目录下的文件<code>vue.config.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">// 显式转义依赖</span><br><span class="line">transpileDependencies: [&apos;webpack-dev-server/client&apos;],</span><br><span class="line"></span><br><span class="line">chainWebpack: config =&gt; &#123;</span><br><span class="line">            // 指定入口  es6转es5</span><br><span class="line">            config.entry.app = [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>入口引入相关插件<code>src/main.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 解决ie白屏问题</span><br><span class="line">import &apos;@babel/polyfill&apos;</span><br><span class="line">import Es6Promise from &apos;es6-promise&apos;</span><br><span class="line">Es6Promise.polyfill()</span><br></pre></td></tr></table></figure></li><li><p>重启服务/重新打包<br>页面正常显示，控制台无报错信息。问题解决。</p></li></ol><h4 id="问题3-打包后清除控制台所有console信息"><a href="#问题3-打包后清除控制台所有console信息" class="headerlink" title="问题3. 打包后清除控制台所有console信息"></a>问题3. 打包后清除控制台所有console信息</h4><p><strong><em>描述</em></strong><br>在开发环境中，我们调试过程中会添加些许的<code>console.log</code>或者<code>debugger</code>相关代码，来帮助我们完成开发。但是有时候此类代码太多或者马虎了，上线前没有删除干净，那么打包后生产环境中就会在控制台留下相关信息。那么为了避免这一不友好行为，我们采取插件来在打包时，清除所有打印信息。<br><strong><em>方案</em></strong></p><ol><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置<code>vue.config.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 去除console</span><br><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">// ... other codes</span><br><span class="line"></span><br><span class="line">// 去除console</span><br><span class="line">    configureWebpack: (config) =&gt; &#123;</span><br><span class="line">        if (env !== &apos;development&apos; || env !== &apos;test&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            config.plugins.push(</span><br><span class="line">                new UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            warnings: false,</span><br><span class="line">                            drop_debugger: true, // 注释console</span><br><span class="line">                            drop_console: true,</span><br><span class="line">                            pure_funcs:[&apos;console.log&apos;] // 移除console</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: false,</span><br><span class="line">                    parallel: true,</span><br><span class="line">                &#125;),</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新打包<br>配置完成后，重新打包<code>npm run build</code>，打开<code>dist/index.html</code>验证，console全部清除。</p></li></ol><h4 id="问题4-js-css压缩问题"><a href="#问题4-js-css压缩问题" class="headerlink" title="问题4. js\css压缩问题"></a>问题4. js\css压缩问题</h4><p><strong><em>描述</em></strong><br>在打包成功后，为了缩小包体积，提高页面响应速度，一般会对包进行压缩，此处主要针对js\css来处理。<br><strong><em>方案</em></strong></p><ol><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置<code>vue.config.js</code>中的configureWebpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 压缩css、js</span><br><span class="line">const CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;);</span><br><span class="line">// 要压缩的文件</span><br><span class="line">const productionGzipExtensions = [&apos;js&apos;, &apos;css&apos;];</span><br><span class="line"></span><br><span class="line">configureWebpack: (config) =&gt; &#123;</span><br><span class="line">if (env !== &apos;development&apos; || env !== &apos;test&apos;) &#123;</span><br><span class="line">config.plugins.push(new CompressionWebpackPlugin(&#123;</span><br><span class="line">algorithm: &apos;gzip&apos;,</span><br><span class="line">test: new RegExp(`\\.($&#123;productionGzipExtensions.join(&apos;|&apos;)&#125;)$`),</span><br><span class="line">threshold: 10240,</span><br><span class="line">minRatio: 0.8,</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启服务<br>完成陪之后重启服务/重新打包，处理完成，搞定收工！</p></li></ol><hr><h3 id="附赠"><a href="#附赠" class="headerlink" title="附赠"></a>附赠</h3><p>这里附上基于vue-cli3的一些简单配置文件</p><h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">const resolve = dir =&gt; path.resolve(__dirname, dir);</span><br><span class="line"></span><br><span class="line">// const IS_PROD = [&apos;production&apos;, &apos;prod&apos;].includes(process.env.NODE_ENV);</span><br><span class="line"></span><br><span class="line">// const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 去除console</span><br><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);</span><br><span class="line">// 压缩css、js</span><br><span class="line">const CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;);</span><br><span class="line">// 要压缩的文件</span><br><span class="line">const productionGzipExtensions = [&apos;js&apos;, &apos;css&apos;];</span><br><span class="line">// const productionGzipExtensions = /\.(js|css|json|txt|html|ico|svg)(\?.*)?$/i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 基本路径配置</span><br><span class="line">    publicPath: &apos;./&apos;,</span><br><span class="line"></span><br><span class="line">    // 显式转义依赖</span><br><span class="line">    transpileDependencies: [&apos;webpack-dev-server/client&apos;],</span><br><span class="line"></span><br><span class="line">    // 配置less</span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            less: &#123;</span><br><span class="line">                javascriptEnabled: true,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    configureWebpack: (config) =&gt; &#123;</span><br><span class="line">        if (env !== &apos;development&apos; || env !== &apos;test&apos;) &#123;</span><br><span class="line">            config.plugins.push(new CompressionWebpackPlugin(&#123;</span><br><span class="line">                algorithm: &apos;gzip&apos;,</span><br><span class="line">                test: new RegExp(`\\.($&#123;productionGzipExtensions.join(&apos;|&apos;)&#125;)$`),</span><br><span class="line">                threshold: 10240,</span><br><span class="line">                minRatio: 0.8,</span><br><span class="line">            &#125;));</span><br><span class="line">            config.plugins.push(</span><br><span class="line">                new UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            warnings: false,</span><br><span class="line">                            drop_debugger: true, // 注释console</span><br><span class="line">                            drop_console: true,</span><br><span class="line">                            pure_funcs:[&apos;console.log&apos;] // 移除console</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: false,</span><br><span class="line">                    parallel: true,</span><br><span class="line">                &#125;),</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    chainWebpack: config =&gt; &#123;</span><br><span class="line">        // 指定入口  es6转es5</span><br><span class="line">        config.entry.app = [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;];</span><br><span class="line"></span><br><span class="line">        // 修复HMR</span><br><span class="line">        config.resolve.symlinks(true);</span><br><span class="line"></span><br><span class="line">        // //修复 Lazy loading routes Error</span><br><span class="line">        // config.plugin(&apos;html&apos;).tap(args =&gt; &#123;</span><br><span class="line">        //     args[0].chunksSortMode = &apos;none&apos;;</span><br><span class="line">        //     return args;</span><br><span class="line">        // &#125;);</span><br><span class="line"></span><br><span class="line">        // 添加别名</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(&apos;@&apos;, resolve(&apos;src&apos;))</span><br><span class="line">            .set(&apos;assets&apos;, resolve(&apos;src/assets&apos;))</span><br><span class="line">            .set(&apos;static&apos;, resolve(&apos;src/static&apos;));</span><br><span class="line"></span><br><span class="line">        // //压缩图片</span><br><span class="line">        // config.module</span><br><span class="line">        //     .rule(&quot;images&quot;)</span><br><span class="line">        //     .use(&quot;image-webpack-loader&quot;)</span><br><span class="line">        //     .loader(&quot;image-webpack-loader&quot;)</span><br><span class="line">        //     .options(&#123;</span><br><span class="line">        //         mozjpeg: &#123;progressive: true, quality: 65&#125;,</span><br><span class="line">        //         optipng: &#123;enabled: false&#125;,</span><br><span class="line">        //         pngquant: &#123;quality: &quot;65-90&quot;, speed: 4&#125;,</span><br><span class="line">        //         gifsicle: &#123;interlaced: false&#125;,</span><br><span class="line">        //         webp: &#123;quality: 75&#125;</span><br><span class="line">        //     &#125;);</span><br><span class="line"></span><br><span class="line">        // // 打包分析</span><br><span class="line">        // if (process.env.IS_ANALYZ) &#123;</span><br><span class="line">        //     config.plugin(&apos;webpack-report&apos;)</span><br><span class="line">        //         .use(BundleAnalyzerPlugin, [&#123;</span><br><span class="line">        //             analyzerMode: &apos;static&apos;,</span><br><span class="line">        //         &#125;]);</span><br><span class="line">        // &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 是否使用包含运行时编译器的 Vue 构建版本</span><br><span class="line">    // runtimeCompiler: true,</span><br><span class="line"></span><br><span class="line">    // 去除打包.map后缀文件</span><br><span class="line">    // productionSourceMap: false,</span><br><span class="line"></span><br><span class="line">    // devServer: &#123;//跨域</span><br><span class="line">    //     port: 8080,// 端口号</span><br><span class="line">    //     open: true, //配置自动启动浏览器</span><br><span class="line">    //     proxy: &#123;// 配置跨域处理 可以设置多个</span><br><span class="line">    //         &apos;/api&apos;: &#123;</span><br><span class="line">    //             target: &apos;&apos;,</span><br><span class="line">    //             ws: true,</span><br><span class="line">    //             changeOrigin: true</span><br><span class="line">    //         &#125;,</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title="babel.config.js"></a>babel.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 打包时删除console</span><br><span class="line">const plugins = [];</span><br><span class="line">if ([&apos;production&apos;, &apos;prod&apos;].includes(process.env.NODE_ENV)) &#123;</span><br><span class="line">  plugins.push(&quot;transform-remove-console&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      &apos;@vue/app&apos;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;useBuiltIns&quot;: &quot;entry&quot;,</span><br><span class="line">        polyfills: [</span><br><span class="line">          &apos;es6.promise&apos;,</span><br><span class="line">          &apos;es6.symbol&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  // 配置babel-plugin-import, 用于按需加载组件代码和样式</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &quot;import&quot;,</span><br><span class="line">      &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: true &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel/preset-env&quot;],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@babel/plugin-transform-runtime&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line">import store from &apos;./store&apos;</span><br><span class="line"></span><br><span class="line">// 解决ie白屏问题</span><br><span class="line">import &apos;@babel/polyfill&apos;</span><br><span class="line">import Es6Promise from &apos;es6-promise&apos;</span><br><span class="line">Es6Promise.polyfill()</span><br><span class="line"></span><br><span class="line">// 使用antd-vue Button组件</span><br><span class="line">import &#123; Button &#125; from &apos;ant-design-vue&apos;</span><br><span class="line"></span><br><span class="line">// Button组件</span><br><span class="line">Vue.component(Button.name, Button);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打包白屏&lt;/li&gt;
&lt;li&gt;IE白屏&lt;/li&gt;
&lt;li&gt;打包后清除控制台所有console信息&lt;/li&gt;
&lt;li&gt;js\css压缩问题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://www.zhuxingmin.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3.x及相关配置</title>
    <link href="https://www.zhuxingmin.com/2019/05/05/vue-cli3-x%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/05/05/vue-cli3-x及相关配置/</id>
    <published>2019-05-05T09:10:33.000Z</published>
    <updated>2019-05-05T12:48:43.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-cli-3-x"><a href="#vue-cli-3-x" class="headerlink" title="vue-cli 3.x"></a>vue-cli 3.x</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h4 id="2-环境-windows"><a href="#2-环境-windows" class="headerlink" title="2.环境(windows)"></a>2.环境(windows)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy&gt;node -v</span><br><span class="line">v8.12.0</span><br><span class="line"></span><br><span class="line">E:\stydy&gt;webpack -v</span><br><span class="line">4.29.6</span><br><span class="line"></span><br><span class="line">E:\stydy&gt;npm -v</span><br><span class="line">6.4.1</span><br><span class="line"></span><br><span class="line">E:\stydy&gt;vue -V</span><br><span class="line">3.7.0</span><br></pre></td></tr></table></figure><h4 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3.创建项目"></a>3.创建项目</h4><p>我在此处想使用<code>ant-design-vue</code>，所以创建了一个<code>antd</code>的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create antd</span><br></pre></td></tr></table></figure></p><h4 id="4-项目配置"><a href="#4-项目配置" class="headerlink" title="4.项目配置"></a>4.项目配置</h4><p>我选择的项目配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.7.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset for future projects? No</span><br><span class="line">? Pick the package manager to use when installing dependencies: NPM</span><br></pre></td></tr></table></figure></p><h4 id="5-运行"><a href="#5-运行" class="headerlink" title="5.运行"></a>5.运行</h4><p>依赖安装完成后，cd到该项目路径下，运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cd antd</span><br><span class="line">$ npm run serve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DONE  Compiled successfully in 4229ms</span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http://localhost:8080/</span><br><span class="line"> - Network: http://192.168.100.111:8080/</span><br><span class="line"></span><br><span class="line"> Note that the development build is not optimized.</span><br><span class="line"> To create a production build, run npm run build.</span><br></pre></td></tr></table></figure></p><p>此时浏览器会访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，看到 Welcome to Your Vue.js App 的界面就算成功了。</p><h4 id="6-目录结构"><a href="#6-目录结构" class="headerlink" title="6.目录结构"></a>6.目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── babel.config</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── postcss.config.js</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">└── .gitignore</span><br></pre></td></tr></table></figure><hr><h3 id="使用ant-design-vue"><a href="#使用ant-design-vue" class="headerlink" title="使用ant-design-vue"></a>使用ant-design-vue</h3><p>由于在实际开发工程中，加载全部样式/组件会影响前端性能，因此我们直接采取按需加载组件及样式。</p><h4 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install ant-design-vue --save-dev</span><br><span class="line"></span><br><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure><h4 id="2-引入src-main-js"><a href="#2-引入src-main-js" class="headerlink" title="2.引入src/main.js"></a>2.引入<code>src/main.js</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 以 Button 组件为例</span><br><span class="line">import &#123; Button &#125; from &apos;ant-design-vue&apos;</span><br><span class="line">Vue.component(Button.name, Button);</span><br></pre></td></tr></table></figure><h4 id="3-组件使用"><a href="#3-组件使用" class="headerlink" title="3.组件使用"></a>3.组件使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;a-button type=&quot;danger&quot;&gt;Danger&lt;/a-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="4-babel-plugin-import"><a href="#4-babel-plugin-import" class="headerlink" title="4.babel-plugin-import"></a>4.babel-plugin-import</h4><h5 id="4-1安装"><a href="#4-1安装" class="headerlink" title="4.1安装"></a>4.1安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import --save-dev</span><br></pre></td></tr></table></figure><h5 id="4-2修改babel-config-js"><a href="#4-2修改babel-config-js" class="headerlink" title="4.2修改babel.config.js"></a>4.2修改<code>babel.config.js</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">   &apos;@vue/app&apos;,</span><br><span class="line">  ],</span><br><span class="line">  // 配置babel-plugin-import, 用于按需加载组件代码和样式</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &quot;import&quot;,</span><br><span class="line">      &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: true &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3报错解决方案"><a href="#4-3报错解决方案" class="headerlink" title="4.3报错解决方案"></a>4.3报错解决方案</h5><p>此时重启项目，会遇到报错情况。以下两种方案<strong><em><code>任选其一即可</code></em></strong>。两种方案：</p><ul><li><p><em>配置<code>vue.config.js</code></em><br>在根目录下新建<code>vue.config.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    // 配置less</span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            less: &#123;</span><br><span class="line">                javascriptEnabled: true,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>修改<code>babel.config.js</code></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">plugins: [</span><br><span class="line">  [</span><br><span class="line">    &quot;import&quot;,</span><br><span class="line">    &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: &apos;css&apos; &#125;</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-4完成"><a href="#4-4完成" class="headerlink" title="4.4完成"></a>4.4完成</h5><p>保存，重启项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><p>可以看到，antd 组件的 js 和 css代码都会按需加载。</p>]]></content>
    
    <summary type="html">
    
      vue-cli 3.x 项目创建使用及ant-design-vue框架使用
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="vue-cli3" scheme="https://www.zhuxingmin.com/tags/vue-cli3/"/>
    
  </entry>
  
  <entry>
    <title>《复联4之终局之战》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/05/02/%E3%80%8A%E5%A4%8D%E8%81%944%E4%B9%8B%E7%BB%88%E5%B1%80%E4%B9%8B%E6%88%98%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/05/02/《复联4之终局之战》随笔/</id>
    <published>2019-05-02T11:24:19.000Z</published>
    <updated>2019-05-13T05:37:05.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&emsp;&emsp;<font size="4" color="deepskyblue">复仇者联盟4：终局之战</font>（Avengers: Endgame）是安东尼·罗素和乔·罗素执导的美国科幻电影，改编自美国漫威漫画，漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU）第22部影片，由小罗伯特·唐尼、克里斯·埃文斯、克里斯·海姆斯沃斯、马克·鲁法洛、斯嘉丽·约翰逊、杰瑞米·雷纳、保罗·路德、布丽·拉尔森、唐·钱德尔、凯伦·吉兰、乔什·布洛林等主演。</p></blockquote><p>### </p>]]></content>
    
    <summary type="html">
    
      I love you three thousand times.
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="电影" scheme="https://www.zhuxingmin.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="复仇者联盟" scheme="https://www.zhuxingmin.com/tags/%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>js模拟信号灯</title>
    <link href="https://www.zhuxingmin.com/2019/04/29/js%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7%E7%81%AF/"/>
    <id>https://www.zhuxingmin.com/2019/04/29/js模拟信号灯/</id>
    <published>2019-04-29T02:21:28.000Z</published>
    <updated>2019-04-29T02:44:24.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/images/posts/信号灯.gif" alt="信号灯" title="信号灯"></p><a id="more"></a><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>给出一个div元素块，模拟一个如下条件的交通信号灯：</p><ul><li>绿灯亮x毫秒，转黄灯</li><li>黄灯亮y毫秒，转红灯</li><li>红灯亮z毫秒，转绿灯</li><li>无限循环执行</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>&emsp;&emsp;首先，div元素块设置css变圆；其次，每隔一定时间，转换元素块背景色；接着，控制显示时长；然后，将上两步组合；最后，无限循环执行。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><ol><li>css<ul><li>border-radius</li><li>background</li></ul></li><li>js<ul><li>setTimeout</li><li>Promise</li><li>async/await</li><li>while</li></ul></li></ol><h4 id="技术栈分析"><a href="#技术栈分析" class="headerlink" title="技术栈分析"></a>技术栈分析</h4><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">技术</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">样式</td><td style="text-align:center">border-radius</td><td style="text-align:center">元素形状</td></tr><tr><td style="text-align:center">样式</td><td style="text-align:center">background</td><td style="text-align:center">元素背景色</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">setTimeout</td><td style="text-align:center">定时器</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">Promise</td><td style="text-align:center">处理回调</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">async/await</td><td style="text-align:center">配合使用</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">while</td><td style="text-align:center">循环</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;div id=&quot;signal-lamp&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;button class=&quot;btn&quot; onclick=&quot;run()&quot;&gt;执行&lt;/button&gt;</span><br><span class="line">&lt;span id=&quot;showText&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// css</span><br><span class="line">#signal-lamp &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border-radius: 50%;</span><br><span class="line">border: 1px solid #ffcecc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line"></span><br><span class="line">// 定义函数sleep</span><br><span class="line">function sleep(ms)&#123;</span><br><span class="line">// 返回一个Promise实例</span><br><span class="line">return new Promise(function(resolve)&#123;</span><br><span class="line">setTimeout(resolve, ms);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 改变颜色 等待参数时间 （时间及颜色均为参数）</span><br><span class="line">async function ChangeColor(ms, color)&#123;</span><br><span class="line">// 改变颜色</span><br><span class="line">document.getElementById(&quot;signal-lamp&quot;).style.background = color;</span><br><span class="line">// 打印出显示时间</span><br><span class="line">document.getElementById(&quot;showText&quot;).innerText = `$&#123;color&#125;:显示$&#123;ms&#125;ms`;</span><br><span class="line">// 睡眠ms毫秒</span><br><span class="line">await sleep(ms);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 循环依次执行</span><br><span class="line">async function run()&#123;</span><br><span class="line">// while 循环</span><br><span class="line">while (true) &#123;</span><br><span class="line">// 绿灯 1.8s</span><br><span class="line">await ChangeColor(1800,&quot;green&quot;);</span><br><span class="line">// 黄灯 0.8s</span><br><span class="line">await ChangeColor(800, &quot;yellow&quot;);</span><br><span class="line">// 红灯 1.2s</span><br><span class="line">await ChangeColor(1200, &quot;red&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/信号灯.gif&quot; alt=&quot;信号灯&quot; title=&quot;信号灯&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="Promise" scheme="https://www.zhuxingmin.com/tags/Promise/"/>
    
      <category term="信号灯" scheme="https://www.zhuxingmin.com/tags/%E4%BF%A1%E5%8F%B7%E7%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>js执行——Promise</title>
    <link href="https://www.zhuxingmin.com/2019/04/28/js%E6%89%A7%E8%A1%8C%E2%80%94%E2%80%94Promise/"/>
    <id>https://www.zhuxingmin.com/2019/04/28/js执行——Promise/</id>
    <published>2019-04-28T04:09:15.000Z</published>
    <updated>2019-04-28T07:53:07.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理且更强大。它最早由社区提出并实现，ES6将其写进了语言标准，统一了用法，并原生提供了Promise对象。</p></blockquote><a id="more"></a><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>对象的状态不受外界影响 （3种状态）<ul><li>Pending状态（进行中）</li><li>Fulfilled状态（已成功）</li><li>Rejected状态（已失败）</li></ul></li><li>一旦状态改变就不会再变 （两种状态改变：成功或失败）<ul><li>Pending -&gt; Fulfilled</li><li>Pending -&gt; Rejected</li></ul></li></ol><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="创建Promise实例"><a href="#创建Promise实例" class="headerlink" title="创建Promise实例"></a>创建Promise实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">// ... some code</span><br><span class="line"></span><br><span class="line">if (/* 异步操作成功 */) &#123;</span><br><span class="line">resolve(value);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">reject(error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由JavaScript引擎提供，不用自己部署。<br>&emsp;&emsp;resolve作用是将Promise对象状态由“未完成”变为“成功”，也就是<code>Pending -&gt; Fulfilled</code>，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；而reject函数则是将Promise对象状态由“未完成”变为“失败”，也就是<code>Pending -&gt; Rejected</code>，在异步操作失败时调用，并将异步操作的结果作为参数传递出去。</p><h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>&emsp;&emsp;Promise实例生成后，可用<code>then</code>方法分别指定两种状态回调参数。then 方法可以接受两个回调函数作为参数：</p><ol><li>Promise对象状态改为Resolved时调用 （必选）</li><li>Promise对象状态改为Rejected时调用 （可选）</li></ol><h4 id="基本用法示例"><a href="#基本用法示例" class="headerlink" title="基本用法示例"></a>基本用法示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sleep(ms) &#123;</span><br><span class="line">return new Promise(function(resolve, reject) &#123;</span><br><span class="line">setTimeout(resolve, ms);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">sleep(500).then( ()=&gt; console.log(&quot;finished&quot;));</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码定义了一个函数sleep，调用后，等待了指定参数(500)毫秒后执行then中的函数。值得注意的是，Promise新建后就会立即执行。</p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>&emsp;&emsp;接下来我们探究一下它的执行顺序，看以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">console.log(&quot;AAA&quot;);</span><br><span class="line">resolve()</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(() =&gt; console.log(&quot;BBB&quot;));</span><br><span class="line">console.log(&quot;CCC&quot;)</span><br><span class="line"></span><br><span class="line">// AAA</span><br><span class="line">// CCC</span><br><span class="line">// BBB</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;执行后，我们发现输出顺序总是 <code>AAA -&gt; CCC -&gt; BBB</code>。表明，在Promise新建后会立即执行，所以<code>首先输出 AAA</code>。然后，then方法指定的回调函数将在当前脚本所有同步任务执行完后才会执行，所以<code>BBB 最后输出</code>。</p><h4 id="与定时器混用"><a href="#与定时器混用" class="headerlink" title="与定时器混用"></a>与定时器混用</h4><p>&emsp;&emsp;首先看一个实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">console.log(&quot;1&quot;);</span><br><span class="line">resolve();</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(()=&gt;console.log(&quot;2&quot;), 0);</span><br><span class="line">promise.then(() =&gt; console.log(&quot;3&quot;));</span><br><span class="line">console.log(&quot;4&quot;);</span><br><span class="line"></span><br><span class="line">// 1</span><br><span class="line">// 4</span><br><span class="line">// 3</span><br><span class="line">// 2</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到，结果输出顺序总是：<code>1 -&gt; 4 -&gt; 3 -&gt; 2</code>。1与4的顺序不必再说，而2与3先输出Promise的then，而后输出定时器任务。原因则是Promise属于JavaScript引擎内部任务，而setTimeout则是浏览器API，而引擎内部任务优先级高于浏览器API任务，所以有此结果。</p><h3 id="拓展-async-await"><a href="#拓展-async-await" class="headerlink" title="拓展 async/await"></a>拓展 async/await</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>&emsp;&emsp;顾名思义，异步。async函数对 Generator 函数的改进，async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。特点体现在以下四点：</p><ul><li>内置执行器</li><li>更好的语义</li><li>更广的适用性</li><li>返回值是 Promise</li></ul><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p>&emsp;&emsp;顾名思义，等待。正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。另一种情况是，await命令后面是一个thenable对象（即定义then方法的对象），那么await会将其等同于 Promise 对象。</p><h4 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h4><p>&emsp;&emsp;先看示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function sleep(ms) &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(resolve,ms);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">async function handle()&#123;</span><br><span class="line">    console.log(&quot;AAA&quot;)</span><br><span class="line">    await sleep(5000)</span><br><span class="line">    console.log(&quot;BBB&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle();</span><br><span class="line"></span><br><span class="line">// AAA</span><br><span class="line">// BBB (5000ms后)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们定义函数sleep，返回一个Promise。然后在handle函数前加上async关键词，这样就定义了一个async函数。在该函数中，利用await来等待一个Promise。</p><h3 id="Promise优缺点"><a href="#Promise优缺点" class="headerlink" title="Promise优缺点"></a>Promise优缺点</h3><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">解决回调</td><td style="text-align:center">无法监测进行状态</td></tr><tr><td style="text-align:center">链式调用</td><td style="text-align:center">新建立即执行且无法取消</td></tr><tr><td style="text-align:center">减少嵌套</td><td style="text-align:center">内部错误无法抛出</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理且更强大。它最早由社区提出并实现，ES6将其写进了语言标准，统一了用法，并原生提供了Promise对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="es6" scheme="https://www.zhuxingmin.com/tags/es6/"/>
    
      <category term="Promise" scheme="https://www.zhuxingmin.com/tags/Promise/"/>
    
      <category term="定时器" scheme="https://www.zhuxingmin.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue吸顶效果</title>
    <link href="https://www.zhuxingmin.com/2019/04/26/vue%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C/"/>
    <id>https://www.zhuxingmin.com/2019/04/26/vue吸顶效果/</id>
    <published>2019-04-26T12:28:13.000Z</published>
    <updated>2019-04-26T13:03:34.223Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于吸顶"><a href="#关于吸顶" class="headerlink" title="关于吸顶"></a>关于吸顶</h4><blockquote><p>吸顶效果在使得用户在滑动读取数据的时候把产品需要持续展示的控件及信息一直固定在屏幕上方，以便用户操作和交互。</p></blockquote><a id="more"></a><h4 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h4><p>&emsp;&emsp;随着技术不断更新与用户审美不断提升，一些App中/浏览器中的常用交互也在对用户更加友好，在某些数据展示较多页面或者导航栏页面，为了将栏目划分，使得视图模块更加明显，吸顶效果便在此背景下孕育而生。<br>&emsp;&emsp;那么，我们如何在web端来做一个吸顶效果呢？</p><hr><h4 id="切入正题——吸顶"><a href="#切入正题——吸顶" class="headerlink" title="切入正题——吸顶"></a>切入正题——吸顶</h4><h5 id="简单效果展示"><a href="#简单效果展示" class="headerlink" title="简单效果展示"></a>简单效果展示</h5><p><img src="/images/posts/吸顶.gif" alt="简单吸顶效果" title="简单吸顶效果"></p><h5 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h5><ol><li>有了效果图，首先我们要分析一下结构：<ul><li>吸顶上方数据</li><li>需要吸顶的元素</li><li>吸顶下方数据</li></ul></li><li>接着我们逻辑走一下：(我们设吸顶元素为X)<ul><li>在页面滑动距离 &lt;= 吸顶元素距离顶端距离时，不吸顶</li><li>否则，吸顶</li></ul></li><li>有了这个大前提，继续考虑，如何做到吸顶呢？<ul><li>设置该元素的position为fixed属性</li><li>动态控制是否展示该样式</li><li>扩展：加点动画效果(这里以渐变为示例)</li></ul></li></ol><h5 id="代码及注释"><a href="#代码及注释" class="headerlink" title="代码及注释"></a>代码及注释</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;scrollFixed&quot;&gt;</span><br><span class="line">        &lt;!-- 上方数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;sTop&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(ietm, index) in 10&quot;&gt;这是吸顶上方的第&#123;&#123;index + 1&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 吸顶元素 --&gt;</span><br><span class="line">        &lt;nav class=&quot;nav&quot; id=&quot;searchBar&quot; :class=&quot;scrollFixed === true ? &apos;isFixed&apos; :&apos;&apos;&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/nav&gt;</span><br><span class="line">        &lt;!-- 下方数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;sBottom&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(ietm, index) in 30&quot;&gt;这是吸顶下方的第&#123;&#123;index + 1&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                text: &apos;需要吸顶&apos;,</span><br><span class="line">                scrollFixed: false,</span><br><span class="line">                offsetTop: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            windowScroll () &#123;</span><br><span class="line">                // 滚动条顶部 距 滚动原点的高度</span><br><span class="line">                let scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">                /**</span><br><span class="line">                 * 三目运算</span><br><span class="line">                 * 两个高度比较 </span><br><span class="line">                 * 如果滑动距离 &gt; 吸顶元素到页面顶端距离  动态添加</span><br><span class="line">                 */</span><br><span class="line">                scrollTop &gt;= this.offsetTop ? (this.scrollFixed = true, this.text = &apos;已吸顶&apos;) : (this.scrollFixed = false, this.text = &apos;需要吸顶&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            // 需吸顶元素 距 离浏览器顶端的高度</span><br><span class="line">            this.offsetTop = document.querySelector(&apos;#searchBar&apos;).offsetTop;</span><br><span class="line">            // 滚动监听</span><br><span class="line">            window.addEventListener(&apos;scroll&apos;, this.windowScroll);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed () &#123;</span><br><span class="line">            // 关闭 销毁监听</span><br><span class="line">            window.removeEventListener(&apos;scroll&apos;, this.windowScroll);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line">.isFixed&#123;</span><br><span class="line">position:fixed;</span><br><span class="line">top:0;</span><br><span class="line">left: 0;</span><br><span class="line">z-index:999;</span><br><span class="line">background: #12d168;</span><br><span class="line">transition: all 1s;</span><br><span class="line">color: #7511ff;</span><br><span class="line">&#125;</span><br><span class="line">// 基本样式略</span><br><span class="line">// ......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>&emsp;&emsp;此demo在流行浏览器中运行问题不大，但是没有详测兼容性。如果要在生产上运用，务必做好各端兼容。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于吸顶&quot;&gt;&lt;a href=&quot;#关于吸顶&quot; class=&quot;headerlink&quot; title=&quot;关于吸顶&quot;&gt;&lt;/a&gt;关于吸顶&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;吸顶效果在使得用户在滑动读取数据的时候把产品需要持续展示的控件及信息一直固定在屏幕上方，以便用户操作和交互。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="吸顶" scheme="https://www.zhuxingmin.com/tags/%E5%90%B8%E9%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>v-html指令渲染出的内容如何添加样式</title>
    <link href="https://www.zhuxingmin.com/2019/04/22/v-html%E6%8C%87%E4%BB%A4%E6%B8%B2%E6%9F%93%E5%87%BA%E7%9A%84%E5%86%85%E5%AE%B9%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/"/>
    <id>https://www.zhuxingmin.com/2019/04/22/v-html指令渲染出的内容如何添加样式/</id>
    <published>2019-04-22T12:24:20.000Z</published>
    <updated>2019-04-23T01:34:37.894Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于v-html"><a href="#关于v-html" class="headerlink" title="关于v-html"></a>关于v-html</h4><p>&emsp;&emsp;在vue使用中，指令<code>v-html</code>渲染页面经常用到，类似于jQuery的$(‘x’).html()去渲染。通过指令<code>v-html</code>渲染出来的内容还会带有原来的标签及其样式，如果需要修改或者重设其样式，应该如何去做吗？</p><a id="more"></a><h4 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h4><p>&emsp;&emsp;首先，我在style中用子级选择器去选中并修改样式，经过猛如虎的操作后，并没生效。F12打开Elements调试，发现在style里面样式根本没加载上去，没有class中也没有类名出现。除此之外，渲染非该指令元素时，所有的类名会跟有<code>[data-v-xxxxxx]</code>的东西。</p><h4 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h4><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>现给出3中方案来解决此问题：</p><ul><li><a href="#1">去掉style中的<code>scoped</code>;</a></li><li><a href="#2"><code>watch</code>监测数据变化;</a></li><li><a href="#3">深度选择器<code>&gt;&gt;&gt;</code></a></li></ul><h5 id="方案1实践"><a href="#方案1实践" class="headerlink" title="方案1实践"></a><a name="1">方案1实践</a></h5><blockquote><font color="deepskyblue">去掉style中的scoped</font></blockquote><p>&emsp;&emsp;在vue组件中，我们写style时，为了防止页面样式冲突，在每个组件中会加上<code>scoped</code>属性。经测试，去掉该属性即可渲染样式成功。但是在组件过多或者项目中大时，经常会出现页面样式冲突，因此该方法<strong><em>不建议使用</em></strong>。</p><h5 id="方案2实践"><a href="#方案2实践" class="headerlink" title="方案2实践"></a><a name="2">方案2实践</a></h5><blockquote><font color="deepskyblue">watch监测数据变化</font></blockquote><p>&emsp;&emsp;在<code>script &gt; export default</code>中,watch属性可监听v-html所绑定值的变化。如果是后台请求的数据，那么可以在watch中监听改数据变化，当数据发生改变驱动视图后，动态绑定一个class来改变子级元素样式。此方法<strong><em>有一定局限性</em></strong>。</p><h5 id="方案3实践"><a href="#方案3实践" class="headerlink" title="方案3实践"></a><a name="3">方案3实践</a></h5><blockquote><font color="deepskyblue">深度选择器 &gt;&gt;&gt;</font></blockquote><p>&emsp;&emsp;此时，深度选择器的应用则脱颖而出。深度选择器<code>&gt;&gt;&gt;</code>，可深度改变子级样式。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// ***</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.test &gt;&gt;&gt; *&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如果使用<code>scss</code>或者<code>less</code>等css扩展语言，则用<code>/deep/</code>替代：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line">.test&#123;</span><br><span class="line">/deep/ *&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><font size="2" color="gray">&emsp;&emsp;scoped属性导致css仅对当前组件生效，而html绑定渲染出的内容可以理解为是子组件的内容，一般情况下子组件不会被加上对应的属性，所以不会应用带有scoped的css。</font>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于v-html&quot;&gt;&lt;a href=&quot;#关于v-html&quot; class=&quot;headerlink&quot; title=&quot;关于v-html&quot;&gt;&lt;/a&gt;关于v-html&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在vue使用中，指令&lt;code&gt;v-html&lt;/code&gt;渲染页面经常用到，类似于jQuery的$(‘x’).html()去渲染。通过指令&lt;code&gt;v-html&lt;/code&gt;渲染出来的内容还会带有原来的标签及其样式，如果需要修改或者重设其样式，应该如何去做吗？&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="样式渲染" scheme="https://www.zhuxingmin.com/tags/%E6%A0%B7%E5%BC%8F%E6%B8%B2%E6%9F%93/"/>
    
      <category term="v-html" scheme="https://www.zhuxingmin.com/tags/v-html/"/>
    
  </entry>
  
  <entry>
    <title>vue嵌套路由</title>
    <link href="https://www.zhuxingmin.com/2019/04/20/vue%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1/"/>
    <id>https://www.zhuxingmin.com/2019/04/20/vue嵌套路由/</id>
    <published>2019-04-20T13:26:36.000Z</published>
    <updated>2019-04-22T02:10:12.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于嵌套路由"><a href="#关于嵌套路由" class="headerlink" title="关于嵌套路由"></a>关于嵌套路由</h4><p>&emsp;&emsp;在实际项目中，多个前端页面由于需求而通常由多层嵌套的组件组合而成,尤其是多导航界面。此时，路由嵌套(vue-router)的优点则表现了出来。<code>嵌套路由就是在一个被路由过来的页面下，可以继续使用路由来加载新的组件。</code>所谓嵌套，也可以理解成父子路由。</p><a id="more"></a><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>各样式导航栏切换；</li><li>标签/选项卡切换；</li></ul><hr><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>&emsp;&emsp;此处以常用布局<code>F形导航</code>当作分析案例：</p><h5 id="1-效果"><a href="#1-效果" class="headerlink" title="1.效果"></a>1.效果</h5><p><img src="/images/posts/路由嵌套.gif" alt="F形导航界面布局" title="F形导航界面布局"></p><h5 id="2-解析"><a href="#2-解析" class="headerlink" title="2.解析"></a>2.解析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/App/about/blog                       /App/about/msg    </span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| about            |                  | about            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | blog         | |  +------------&gt;  | | msg         | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure><h5 id="3-目录拆分"><a href="#3-目录拆分" class="headerlink" title="3.目录拆分"></a>3.目录拆分</h5><p>观察效果图，容易得出可将图拆分为多个组件。在主要vue中挂载<code>首页</code>和<code>关于</code>组件，然后在<code>关于</code>组件中再次挂载子路由<code>博客</code>和<code>信息</code>组件。项目中src目录拆分如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│  ├── page</span><br><span class="line">│  │  ├── index.vue// 主页组件</span><br><span class="line">│  │  ├── about.vue// 关于组件</span><br><span class="line">│  │  ├── about</span><br><span class="line">│  │  │  ├──  blog.vue// 博客子组件</span><br><span class="line">│  │  │  ├──  msg.vue// 信息子组件</span><br><span class="line">│  ├── router</span><br><span class="line">│  │  ├── index.js</span><br><span class="line">│  ├── App.vue</span><br><span class="line">│  ├── main.js</span><br></pre></td></tr></table></figure></p><h5 id="4-通用代码"><a href="#4-通用代码" class="headerlink" title="4.通用代码"></a>4.通用代码</h5><p>从目录中可以轻易的看出每个组件及所代表的模块。其中，index &amp; blog &amp; msg 三个组件均为一个带文字描述的块级元素，此处给出一个示例，不再赘述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        这是xx模块内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h5 id="5-路由管理"><a href="#5-路由管理" class="headerlink" title="5.路由管理"></a>5.路由管理</h5><p><code>router/index.js</code>进行路由管理，代码如下。此处使用懒加载模式处理。开篇已经描述，嵌套路由可以理解为父子路由，不仅如此描述，事实上我们在做路由管理也是这么处理的。<strong><em>注：在children中的path不必再添加<code>/</code>，否则会出错。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import VueRouter from &apos;vue-router&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">export default new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/index&apos;,</span><br><span class="line">            component: resolve =&gt; require([&apos;@/page/index&apos;],resolve),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/about&apos;,</span><br><span class="line">            component: resolve =&gt; require([&apos;@/page/about&apos;],resolve),</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &apos;blog&apos;,</span><br><span class="line">                    component: resolve =&gt; require([&apos;@/page/about/blog&apos;],resolve),</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &apos;msg&apos;,</span><br><span class="line">                    component: resolve =&gt; require([&apos;@/page/about/msg&apos;],resolve),</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h5 id="6-根组件配置"><a href="#6-根组件配置" class="headerlink" title="6.根组件配置"></a>6.根组件配置</h5><p><code>App.vue</code>需要挂载<code>首页</code>组件和<code>关于</code>组件。值得一提的是，由于在点击<code>关于</code>的时候，应该直接跳往第一项子级项，也就是<code>博客</code>，因此注意路由路径。此外，切记<strong><em>to:”[路径]” 中的[路径]一定要加上<code>/</code>，否则多次路由会出现路由重复而无法正确找到路由问题</em></strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">           &lt;router-link to=&quot;/index&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">           &lt;router-link to=&quot;/about/blog&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">       &lt;/header&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;router-view/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &apos;App&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line"> /*略*/</span><br><span class="line">&lt;/stylle&gt;</span><br></pre></td></tr></table></figure></p><h5 id="7-about组件配置"><a href="#7-about组件配置" class="headerlink" title="7.about组件配置"></a>7.about组件配置</h5><p>所谓嵌套，或者说父子路由，在此组件表现出来，也就是将此组件当成父组件，再次挂载两个(或多个)子组件。同样，要注意路径一定要加上<code>/</code>。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">            &lt;router-link to=&quot;/about/blog&quot;&gt;博客&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link to=&quot;/about/msg&quot;&gt;信息&lt;/router-link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;about&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line">    .about&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .left&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            border-right: 1px solid #aaa;</span><br><span class="line">            height: calc(100vh - 46px);</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            a&#123;</span><br><span class="line">                line-height: 40px;</span><br><span class="line">                text-align: center;</span><br><span class="line">                font-size: 12px;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">                color: #6260ff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .right&#123;</span><br><span class="line">            flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h5 id="8-完成"><a href="#8-完成" class="headerlink" title="8.完成"></a>8.完成</h5><p>其实步骤就这么多，不过在实际项目中还是要多加动脑灵活运用，理解嵌套路由含义及路由配置规则，一切就会变得简单起来~</p><hr><h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>&emsp;&emsp;有几点注意事项，包括上面也有提到过：</p><ul><li>子路由要写在<code>children</code>下；</li><li>router-link 中，to中的路径要加<code>/</code>，代表根路径；</li><li>每一个子路由都可以嵌套多个组件；</li><li>style中加入scoped属性，防止样式互相干扰。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于嵌套路由&quot;&gt;&lt;a href=&quot;#关于嵌套路由&quot; class=&quot;headerlink&quot; title=&quot;关于嵌套路由&quot;&gt;&lt;/a&gt;关于嵌套路由&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在实际项目中，多个前端页面由于需求而通常由多层嵌套的组件组合而成,尤其是多导航界面。此时，路由嵌套(vue-router)的优点则表现了出来。&lt;code&gt;嵌套路由就是在一个被路由过来的页面下，可以继续使用路由来加载新的组件。&lt;/code&gt;所谓嵌套，也可以理解成父子路由。&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="路由" scheme="https://www.zhuxingmin.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>axios全局拦截器配置</title>
    <link href="https://www.zhuxingmin.com/2019/04/17/axios%E5%85%A8%E5%B1%80%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/04/17/axios全局拦截器配置/</id>
    <published>2019-04-17T09:03:37.000Z</published>
    <updated>2019-04-18T03:35:14.598Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于请求拦截器"><a href="#关于请求拦截器" class="headerlink" title="关于请求拦截器"></a>关于请求拦截器</h4><p>&emsp;&emsp;项目中，我们经常遇到请求后台接口时要做后天返回的<code>code</code>码验证判断。code码通常是一个特定的数值，比如一般返回<code>200</code>作为正常请求，返回其他作为数据异常或者请求异常等。如果接口量足够大，那么每一个接口都需要做正常/异常处理。为满足统一管理，那么在全局请求拦截器便应劫而出。</p><a id="more"></a><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>统一管理</li><li>路由请求拦截 =&gt; request</li><li>路由响应拦截 =&gt; response</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="1-安装axios及qs"><a href="#1-安装axios及qs" class="headerlink" title="1.安装axios及qs"></a>1.安装axios及qs</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save-dev    //安装axios</span><br><span class="line"></span><br><span class="line">npm install qs --save-dev     //安装qs</span><br></pre></td></tr></table></figure><h5 id="2-新建一个js文件"><a href="#2-新建一个js文件" class="headerlink" title="2.新建一个js文件"></a>2.新建一个js文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── project</span><br><span class="line">│  ├── build</span><br><span class="line">│  ├── config</span><br><span class="line">│  ├── node_modules</span><br><span class="line">│  ├── src</span><br><span class="line">│  │  ├── assets</span><br><span class="line">│  │  │  ├── request.js// 我在这里新建了一个js文件来配置拦截器</span><br><span class="line">│  │  ├── components</span><br><span class="line">│  │  ├── router</span><br><span class="line">│  │  ├── App.vue</span><br><span class="line">│  │  ├── main.js</span><br><span class="line">│  ├── static</span><br><span class="line">│  ├── test</span><br><span class="line">│  ├── .babelrc</span><br><span class="line">│  ├── .editorconfig</span><br><span class="line">│  ├── .gitignore</span><br><span class="line">│  ├── .postcssrc.js</span><br><span class="line">│  ├── index.html</span><br><span class="line">│  ├── package-lock.json</span><br><span class="line">│  ├── package.json</span><br><span class="line">│  ├── README.md</span><br></pre></td></tr></table></figure><h5 id="3-js拦截器配置如下："><a href="#3-js拦截器配置如下：" class="headerlink" title="3.js拦截器配置如下："></a>3.js拦截器配置如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;//引入axios</span><br><span class="line">import qs from &apos;qs&apos;//引入qs qs可将数据转换为FormData格式</span><br><span class="line"></span><br><span class="line">// axios默认配置</span><br><span class="line">axios.defaults.timeout = 10000;   // 超时时间</span><br><span class="line">axios.defaults.baseURL = &apos;https://www.demo.com&apos;;  // 公用地址</span><br><span class="line"></span><br><span class="line">// 路由请求拦截</span><br><span class="line">// http request 拦截器</span><br><span class="line">axios.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">    // 数据格式化</span><br><span class="line">    config.data = qs.stringify(config.data);</span><br><span class="line">    // 给请求头加键值对</span><br><span class="line">    config.headers[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br><span class="line">    return config;</span><br><span class="line">&#125;, (error ) =&gt; &#123;// 错误信息</span><br><span class="line">    return Promise.reject(error.response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 路由响应拦截</span><br><span class="line">// http response 拦截器</span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    (response) =&gt; &#123;</span><br><span class="line">        if (response.data.code !== 200) &#123;</span><br><span class="line">            // 异常请求要做的事</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 正常请求要做的事</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,(error) =&gt; &#123;</span><br><span class="line">// 返回接口返回的错误信息</span><br><span class="line">        return Promise.reject(error.response)   </span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default axios;</span><br></pre></td></tr></table></figure><h5 id="4-main-js配置"><a href="#4-main-js配置" class="headerlink" title="4.main.js配置"></a>4.main.js配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 引入该配置文件</span><br><span class="line">import axios from &apos;./assets/axiosRequest&apos;</span><br><span class="line"></span><br><span class="line">// 注册到全局</span><br><span class="line">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure><h5 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 要发送的数据</span><br><span class="line">let params = &#123;</span><br><span class="line">name: &apos;AAA&apos;,</span><br><span class="line">number: &apos;10100110&apos;,</span><br><span class="line">age: &apos;18&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// post请求为例  url不用写公共部分，直接写后面即可</span><br><span class="line">this.$axios.post(&apos;/test&apos;,params</span><br><span class="line">).then((res) =&gt; &#123;</span><br><span class="line">debugger;</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">debugger;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;http全局拦截器配置完毕，不仅可在response中统一管理返回状态，而且可在request中动态添加request headers，在实际项目中有很大的运用空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于请求拦截器&quot;&gt;&lt;a href=&quot;#关于请求拦截器&quot; class=&quot;headerlink&quot; title=&quot;关于请求拦截器&quot;&gt;&lt;/a&gt;关于请求拦截器&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;项目中，我们经常遇到请求后台接口时要做后天返回的&lt;code&gt;code&lt;/code&gt;码验证判断。code码通常是一个特定的数值，比如一般返回&lt;code&gt;200&lt;/code&gt;作为正常请求，返回其他作为数据异常或者请求异常等。如果接口量足够大，那么每一个接口都需要做正常/异常处理。为满足统一管理，那么在全局请求拦截器便应劫而出。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lomo | 朱幸民</title>
  
  <subtitle>on the way</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuxingmin.com/"/>
  <updated>2019-05-28T09:40:26.191Z</updated>
  <id>https://www.zhuxingmin.com/</id>
  
  <author>
    <name>Lomo 朱幸民</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue弹窗屏蔽滑动的两种解决方案</title>
    <link href="https://www.zhuxingmin.com/2019/05/28/vue%E5%BC%B9%E7%AA%97%E5%B1%8F%E8%94%BD%E6%BB%91%E5%8A%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://www.zhuxingmin.com/2019/05/28/vue弹窗屏蔽滑动的两种解决方案/</id>
    <published>2019-05-28T06:38:59.000Z</published>
    <updated>2019-05-28T09:40:26.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>&emsp;&emsp;在开发过程中，我们经常会遇到要加弹窗的需求，而如果当前页的展示数据一屏展示不完，则在打开弹窗后，有滑动操作时，页面也会随之滑动。那么如何处理这一问题呢？</p><a id="more"></a><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>&emsp;&emsp;我们开发过程中，最常见的问题上文已叙述：打开弹窗后，有滑动操作时，页面也会随之滑动。问题示意图如下：<br><img src="/images/posts/背景无法屏蔽弹窗.gif" alt="背景数据仍可滑动" title="背景数据仍可滑动"></p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><strong>我们来看一波正确示范</strong><br><img src="/images/posts/可滑动弹窗.gif" alt="可滑动弹窗" title="可滑动弹窗"></p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>&emsp;&emsp;两种解决方案，针对两种不同情况：</p><ol><li>弹框数据少，无需滑动</li><li>弹框内数据需要滑动展示</li></ol><h4 id="1-无需滑动弹窗"><a href="#1-无需滑动弹窗" class="headerlink" title="1. 无需滑动弹窗"></a>1. 无需滑动弹窗</h4><h5 id="a-思路"><a href="#a-思路" class="headerlink" title="a. 思路"></a>a. 思路</h5><blockquote><p>思路：<br>vue自带修饰符可解决该问题—— <code>@touchmove.prevent</code> </p></blockquote><p>此方案重点在将<code>@touchmove.prevent</code>绑定到弹窗模块，然后动态控制弹窗显示隐藏即可。</p><h5 id="b-效果"><a href="#b-效果" class="headerlink" title="b. 效果"></a>b. 效果</h5><p><img src="/images/posts/不可滑动弹窗.gif" alt="不可滑动弹窗" title="不可滑动弹窗"></p><h5 id="c-代码"><a href="#c-代码" class="headerlink" title="c. 代码"></a>c. 代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;modalTest&quot;&gt;</span><br><span class="line">        &lt;!-- 按钮组 --&gt;</span><br><span class="line">        &lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;success&quot; size=&quot;small&quot; @click=&quot;modalSign1 = true&quot;&gt;弹窗1&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 背景数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;listBG&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;item in 50&quot;&gt;这是第&#123;&#123;item&#125;&#125;条背景数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 弹框1 --&gt;</span><br><span class="line">        &lt;div class=&quot;modalBox&quot; v-if=&quot;modalSign1&quot; @touchmove.prevent @click.self=&quot;modalSign1 = false&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;item in 8&quot;&gt;这是第&#123;&#123;item&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                modalSign1: false, // 弹窗是否打开</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-弹框内数据需要滑动展示"><a href="#2-弹框内数据需要滑动展示" class="headerlink" title="2. 弹框内数据需要滑动展示"></a>2. 弹框内数据需要滑动展示</h4><h5 id="a-思路-1"><a href="#a-思路-1" class="headerlink" title="a. 思路"></a>a. 思路</h5><p>&emsp;&emsp;首先，我们使用正常的vue操作，比如刚才的修饰符/语法糖进行操作时，虽然可以屏蔽掉背景数据滑动，但是该事件同时会将弹框内的滑动也阻止掉，我们则无法完成该需求。如果这个不行，我们还有别的方法来完成需求吗？<br>&emsp;&emsp;我考虑到一种方案，但是属于DOM操作，与vue的初衷可能不太符合。不过此方案也不矢为一种能够有效解决问题的办法。</p><blockquote><p>思路：<br>利用css<code>position: fixed</code>以及<code>top: x px</code>来固定位置。步骤分解如下：</p><ol><li>写一个样式放到公共css中备用；</li><li>点击按钮，控制弹窗显示隐藏；</li><li>两个方法，一个控制将步骤<code>1</code>写的css动态添加到<code>body</code>上，另外一个则控制移除该效果；<ul><li>添加方法：①获取当前页面距离顶部高度，保存到data中；②给body添加步骤1的css；③设置body的高度为刚才获取到的高度。</li><li>移除方法： ①将刚才冬天给body添加的css移除；②当前滑动高度设置为data中存储的高度。</li></ul></li></ol></blockquote><h5 id="b-效果-1"><a href="#b-效果-1" class="headerlink" title="b. 效果"></a>b. 效果</h5><p><img src="/images/posts/可滑动弹窗.gif" alt="可滑动弹窗" title="可滑动弹窗"></p><h5 id="c-两个案例完整代码"><a href="#c-两个案例完整代码" class="headerlink" title="c. 两个案例完整代码"></a>c. 两个案例完整代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;modalTest&quot;&gt;</span><br><span class="line">        &lt;!-- 按钮组 --&gt;</span><br><span class="line">        &lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;success&quot; size=&quot;small&quot; @click=&quot;modalSign1 = true&quot;&gt;弹窗1&lt;/el-button&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; @click=&quot;openModal&quot;&gt;弹窗2&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 背景数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;listBG&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;item in 50&quot;&gt;这是第&#123;&#123;item&#125;&#125;条背景数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 弹框1 --&gt;</span><br><span class="line">        &lt;div class=&quot;modalBox&quot; v-if=&quot;modalSign1&quot; @touchmove.prevent @click.self=&quot;modalSign1 = false&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;item in 8&quot;&gt;这是第&#123;&#123;item&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 弹框2 --&gt;</span><br><span class="line">        &lt;div class=&quot;modalBox&quot; v-if=&quot;modalSign2&quot; @click.self=&quot;closeModal&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;item in 20&quot;&gt;这是第&#123;&#123;item&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                modalSign1: false, // 弹窗是否打开</span><br><span class="line">                modalSign2: false, // 弹窗是否打开</span><br><span class="line">                scrollTop: undefined, // 距离顶端的值</span><br><span class="line">                className: &apos;modalOpen&apos;, // 类名</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 打开弹层 要做的事</span><br><span class="line">            afterOpen () &#123;</span><br><span class="line">                this.scrollTop = document.scrollingElement.scrollTop;</span><br><span class="line">                document.body.classList.add(this.className);</span><br><span class="line">                document.body.style.top = `-$&#123;this.scrollTop&#125;px`;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 弹层关闭之前 要做的事</span><br><span class="line">            beforeClose () &#123;</span><br><span class="line">                document.body.classList.remove(this.className);</span><br><span class="line">                document.scrollingElement.scrollTop = this.scrollTop;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 打开弹窗</span><br><span class="line">            openModal () &#123;</span><br><span class="line">                this.modalSign2 = true;</span><br><span class="line">                this.afterOpen();</span><br><span class="line">            &#125;,</span><br><span class="line">            // 关闭弹窗</span><br><span class="line">            closeModal () &#123;</span><br><span class="line">                this.modalSign2 = false;</span><br><span class="line">                this.beforeClose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/scss&quot; lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .modalTest&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        min-height: 100vh;</span><br><span class="line">        overflow: scroll;</span><br><span class="line">        .btn&#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            z-index: 10;</span><br><span class="line">            &amp;&gt;button&#123;</span><br><span class="line">                margin: 10px 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .listBG&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        .modalBox&#123;</span><br><span class="line">            width: 100vw;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            background: rgba(0,0,0,0.4);</span><br><span class="line">            z-index: 999;</span><br><span class="line"></span><br><span class="line">            .modal&#123;</span><br><span class="line">                width: 220px;</span><br><span class="line">                height: 280px;</span><br><span class="line">                overflow: scroll;</span><br><span class="line">                background: #fff;</span><br><span class="line">                border-radius: 10px;</span><br><span class="line">                position: absolute;</span><br><span class="line">                left: 50%;</span><br><span class="line">                top: 50%;</span><br><span class="line">                transform: translate(-50%, -50%);</span><br><span class="line">                -moz-box-shadow:10px 10px 9px #332A0D;</span><br><span class="line">                -webkit-box-shadow:10px 10px 9px #332A0D;</span><br><span class="line">                box-shadow:10px 10px 9px #332A0D;</span><br><span class="line">                padding: 30px 0 0;</span><br><span class="line"></span><br><span class="line">                ul&#123;</span><br><span class="line">                    text-align: center;</span><br><span class="line">                    li&#123;</span><br><span class="line">                        list-style: none;</span><br><span class="line">                        line-height: 30px;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="d-备注"><a href="#d-备注" class="headerlink" title="d. 备注"></a>d. 备注</h5><p><em><code>.modalOpen</code>的css样式，放在公共样式中，因为我们要改变的是body的样式，因此在组件中写的样式可能会失效。例如，我将样式放在了<code>src/assets/css/common.css</code></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*弹层*/</span><br><span class="line">body.modalOpen &#123;</span><br><span class="line">    -webkit-overflow-scrolling:touch;</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在开发过程中，我们经常会遇到要加弹窗的需求，而如果当前页的展示数据一屏展示不完，则在打开弹窗后，有滑动操作时，页面也会随之滑动。那么如何处理这一问题呢？&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="弹窗" scheme="https://www.zhuxingmin.com/tags/%E5%BC%B9%E7%AA%97/"/>
    
      <category term="滑动" scheme="https://www.zhuxingmin.com/tags/%E6%BB%91%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue中引入并使用markdown编辑器</title>
    <link href="https://www.zhuxingmin.com/2019/05/23/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8markdown%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
    <id>https://www.zhuxingmin.com/2019/05/23/vue中引入并使用markdown相关组件/</id>
    <published>2019-05-23T11:45:17.000Z</published>
    <updated>2019-05-23T12:33:48.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/posts/markdown示例.png" alt="markdown组件示例"></p><a id="more"></a><h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p>&emsp;&emsp;不知道各位是否对<code>markdown</code>熟悉。它算是一门标记语言，但是语法简单，却本领强大。例如本篇博客，便是用<code>markdown</code>语法编写，然后根据不同的环境及依赖生成各种我想要的样式，比如直接生成本篇博客样式或者使用一些依赖或者工具赋之更加美观的样式。同样，一般在<strong>CMS</strong>后台管理系统中，也经常会用到编辑器来编写一些文章材料。其中最常用的还是<code>markdown编辑器</code>和<code>富文本编辑器</code>。</p><h3 id="Markdown-介绍"><a href="#Markdown-介绍" class="headerlink" title="Markdown 介绍"></a>Markdown 介绍</h3><p><strong><em>1. 什么是Markdown</em></strong><br>&emsp;&emsp;首先，各位框架玩家一定不会陌生，因为无论是在各类框架下还是开源项目中，都会有一个<code>.md</code>的文件，该文件一般是项目说明文件，不仅语法简洁，而且所生成的“页面”也要比普通标记语言更加整洁明了。那么它到底是什么呢？<br>&emsp;&emsp;<strong>Markdown是一种可以使用普通文本编辑器编写的标记语言</strong>，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>&emsp;&emsp;Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p><p><strong><em>2. Markdown用途</em></strong><br>&emsp;&emsp;Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。<br>&emsp;&emsp;用于编写说明文档，并且以“README.md”的文件名保存在软件的目录下面。<br>除此之外，由于我们有了RStudio这样的神级编辑器，我们还可以快速将Markdown转化为演讲PPT、Word产品文档、LaTex论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown已经广泛使用，极大地推进了动态可重复性研究的历史进程。</p><h3 id="vue-中如何使用"><a href="#vue-中如何使用" class="headerlink" title="vue 中如何使用"></a>vue 中如何使用</h3><p><em>注： 本示例选用的是<code>mavon-editor</code></em><br><strong>很明显，所有组件逃不过三步走原则：</strong></p><blockquote><ol><li>安装</li><li>引入、配置</li><li>使用</li></ol></blockquote><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>安装mavon-editor:<code>npm install mavon-editor --save</code></p><h4 id="2-引入、配置"><a href="#2-引入、配置" class="headerlink" title="2. 引入、配置"></a>2. 引入、配置</h4><p>在要使用markdown编辑器的组件内操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 导入组件 及 组件样式</span><br><span class="line">import &#123; mavonEditor &#125; from &apos;mavon-editor&apos;</span><br><span class="line">import &apos;mavon-editor/dist/css/index.css&apos;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><blockquote><p>注意：</p><ol><li>绑定model</li><li>实时改变：将<code>markdown</code>实时转化为<code>html</code></li></ol></blockquote><p>在要使用markdown编辑器的组件内操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;mavon-editor </span><br><span class="line">v-model=&quot;content&quot; </span><br><span class="line">ref=&quot;md&quot; </span><br><span class="line">@change=&quot;change&quot; </span><br><span class="line">style=&quot;min-height: 600px&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">// 注册</span><br><span class="line">components: &#123;</span><br><span class="line">mavonEditor,</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">content:&apos;&apos;,// 输入的markdown</span><br><span class="line">html:&apos;&apos;,// 及时转的html</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 所有操作都会被解析重新渲染</span><br><span class="line">change(value, render)&#123;</span><br><span class="line">// render 为 markdown 解析后的结果[html]</span><br><span class="line">this.html = render;</span><br><span class="line">&#125;,</span><br><span class="line">// 提交</span><br><span class="line">submit()&#123;</span><br><span class="line">console.log(this.content);</span><br><span class="line">console.log(this.html);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>那么，在常用的操作里面，例如各级标题、表格、加粗加斜、标记、图文……图？此时，我们发现一个问题：如何添加本地图片呢？</p><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p><strong><em>在某些IDE里面使用markdown时，可以自由的插入本地图片，那我们在页面中使用此编译器组件如何添加图片呢？</em></strong></p><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p><strong>监听。</strong>没错，就是监听输入框变化。如果监听到有图片插入，那么我们可以先将图片上传至服务器，然后获取到线上url，拿到该url再插入到该位置。那么具体过程就很明显了：</p><ol><li>选择本地图片，插入</li><li>监听到有图片插入</li><li>将该图上传至服务器</li><li>获取到服务器返回的图片url</li><li>将该线上url冬天插入到输入框中</li></ol><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;markdown&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;mavon-editor v-model=&quot;content&quot; ref=&quot;md&quot; @imgAdd=&quot;$imgAdd&quot; @change=&quot;change&quot; style=&quot;min-height: 600px&quot;/&gt;</span><br><span class="line">            &lt;button @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123; mavonEditor &#125; from &apos;mavon-editor&apos;</span><br><span class="line">    import &apos;mavon-editor/dist/css/index.css&apos;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;&quot;,</span><br><span class="line">        props: [],</span><br><span class="line">        components: &#123;</span><br><span class="line">            mavonEditor,</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                content:&apos;&apos;,</span><br><span class="line">                html:&apos;&apos;,</span><br><span class="line">                configs: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 将图片上传到服务器，返回地址替换到md中</span><br><span class="line">            $imgAdd(pos, $file)&#123;</span><br><span class="line">                let formdata = new FormData();</span><br><span class="line"></span><br><span class="line">                this.$upload.post(&apos;/上传接口地址&apos;, formdata).then(res =&gt; &#123;</span><br><span class="line">                    console.log(res.data);</span><br><span class="line">                    this.$refs.md.$img2Url(pos, res.data);</span><br><span class="line">                &#125;).catch(err =&gt; &#123;</span><br><span class="line">                    console.log(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            // 所有操作都会被解析重新渲染</span><br><span class="line">            change(value, render)&#123;</span><br><span class="line">                // render 为 markdown 解析后的结果[html]</span><br><span class="line">                this.html = render;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 提交</span><br><span class="line">            submit()&#123;</span><br><span class="line">                console.log(this.content);</span><br><span class="line">                console.log(this.html);</span><br><span class="line">                this.$message.success(&apos;提交成功，已打印至控制台！&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="后"><a href="#后" class="headerlink" title="后"></a>后</h3><p>&emsp;&emsp;到这里，vue中使用markdown编辑器教程结束。那么更为大众广泛使用的<code>富文本编辑器</code>如何使用呢？且看下回~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/markdown示例.png&quot; alt=&quot;markdown组件示例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="markdown" scheme="https://www.zhuxingmin.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>520特辑———旋转爱</title>
    <link href="https://www.zhuxingmin.com/2019/05/20/520%E7%89%B9%E8%BE%91%E2%80%94%E2%80%94%E2%80%94%E6%97%8B%E8%BD%AC%E7%88%B1/"/>
    <id>https://www.zhuxingmin.com/2019/05/20/520特辑———旋转爱/</id>
    <published>2019-05-20T05:55:53.000Z</published>
    <updated>2019-05-20T07:36:49.891Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>&emsp;&emsp;<font color="deepskyblue" size="18">520</font>：网络情人节是信息时代的爱情节日，定于每年的5月20日和5月21日。该节日源于歌手范晓萱的《数字恋爱》中“520”被喻成“我爱你” ，以及音乐人吴玉龙的网络歌曲中“我爱你”与“网络情人”的紧密联系。后来，“521”也逐渐被情侣们赋予了“我愿意、我爱你”的意思。“网络情人节”又被称为“结婚吉日”、“表白日”、“撒娇日”、“求爱节”。<br>&emsp;&emsp;那么，作为程序员，如何通过专业技能向自己的另一半表达爱意呢？</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/posts/520.gif" alt="520" title="520"></p><a id="more"></a><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><table><thead><tr><th style="text-align:center">技术栈[及环境]</th><th style="text-align:center">版本</th></tr></thead><tbody><tr><td style="text-align:center">vue-cli</td><td style="text-align:center">3.x</td></tr><tr><td style="text-align:center">vue</td><td style="text-align:center">2.x</td></tr><tr><td style="text-align:center">element-ui</td><td style="text-align:center">2.x</td></tr><tr><td style="text-align:center">sass</td><td style="text-align:center">scss</td></tr></tbody></table><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li>不难看出，页面分为三个部分：背景、旋转导航花瓣及弹框；</li><li>6个花瓣对应对个导航栏，每个导航栏颜色及打开弹窗的背景色相同；</li><li>弹窗共用，动态展示不同的弹窗内容区域及改变标题即可；</li><li>动画：这里动画均有原生css3的@keyframes完成，在animation里调用。</li></ol><h4 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h4><ul><li>导航切换</li><li>旋转动画</li><li>走马灯（相册轮播）</li><li>标签切换（足迹中标签）</li><li>table表格（说说）</li><li>时间轴（时刻）</li><li>弹幕效果（留言）</li><li>缩放效果（中心图片点击缩放）</li></ul><h4 id="项目一览"><a href="#项目一览" class="headerlink" title="项目一览"></a>项目一览</h4><p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── README.md// 项目说明</span><br><span class="line">├── babel.config// babel配置</span><br><span class="line">├── package.json// 包配置</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico// 放在title前的页面logo</span><br><span class="line">│   └── index.html// 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── css// 自定义配置css</span><br><span class="line">│   │   └── love// 图片资源</span><br><span class="line">│   ├── love</span><br><span class="line">│   │   └── love.vue// 520主题组件</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── router.js// 路由</span><br><span class="line">│   └── main.js// 主配置</span><br><span class="line">└── vue.config.js// vue自定义配置</span><br></pre></td></tr></table></figure></p><blockquote><p>其中，项目重点在<code>love.vue</code>组件中</p></blockquote><h4 id="功能点简述"><a href="#功能点简述" class="headerlink" title="功能点简述"></a>功能点简述</h4><h5 id="1-导航及切换"><a href="#1-导航及切换" class="headerlink" title="1. 导航及切换"></a>1. 导航及切换</h5><p><img src="/images/posts/旋转菜单切换.gif" alt="导航切换效果" title="旋转菜单切换"></p><blockquote><p>首先，6个导航位，文字不同，icon不同；<br>其次，点击菜单需要有旋转效果，菜单旋转缩小，弹框旋转放大展示；<br>最后，判断/写入弹框卡片(下简称卡片)背景色。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">// template 部分</span><br><span class="line">&lt;div class=&quot;leafs&quot;&gt;</span><br><span class="line">&lt;div v-for=&quot;(item, index) in menuList&quot;</span><br><span class="line"> :key=&quot;item.name&quot;</span><br><span class="line"> class=&quot;leaf&quot;</span><br><span class="line"> @click=&quot;runCircle(item.name, index)&quot;</span><br><span class="line"> :class=&quot;`leaf$&#123;index+1&#125;`&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;item.url&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;span class=&quot;nameSpain&quot;&gt;&lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt; &#123;&#123; item.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 小心心 --&gt;</span><br><span class="line">&lt;div class=&quot;heart&quot;</span><br><span class="line"> :class=&quot;&#123;heartScale: heartScaleSign&#125;&quot;</span><br><span class="line"> @click=&quot;heartScale&quot;&gt;</span><br><span class="line">&lt;img src=&quot;../assets/love/heart.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// script部分</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">show: false,</span><br><span class="line">runCircleSign: false,   // 旋转变小</span><br><span class="line">heartScaleSign: false,  // 心 变大缩小</span><br><span class="line">cardMiss: false,    // 卡片动画消失</span><br><span class="line">showCard: false,    // 卡片显示状态</span><br><span class="line">cardName: &apos;&apos;,   // 卡片title</span><br><span class="line">cardChange: -1, //切换卡片</span><br><span class="line">cardGround: &apos;&apos;, // 卡片背景色</span><br><span class="line">menuList: [</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf1.png&apos;),</span><br><span class="line">icon: &apos;el-icon-picture-outline&apos;,</span><br><span class="line">name: &apos;相册&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf2.png&apos;),</span><br><span class="line">icon: &apos;el-icon-location&apos;,</span><br><span class="line">name: &apos;足迹&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf3.png&apos;),</span><br><span class="line">icon: &apos;el-icon-edit&apos;,</span><br><span class="line">name: &apos;说说&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf4.png&apos;),</span><br><span class="line">icon: &apos;el-icon-date&apos;,</span><br><span class="line">name: &apos;时刻&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf5.png&apos;),</span><br><span class="line">icon: &apos;el-icon-news&apos;,</span><br><span class="line">name: &apos;留言&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">url: require(&apos;../assets/love/leaf6.png&apos;),</span><br><span class="line">icon: &apos;el-icon-printer&apos;,</span><br><span class="line">name: &apos;影集&apos;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">cardType: 0,</span><br><span class="line">menuIndex: -1,</span><br><span class="line">activeName: &apos;first&apos;,   // 当前标签</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 菜单缩放</span><br><span class="line">runCircle (name, index) &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">// 缩放</span><br><span class="line">this.runCircleSign = ! this.runCircleSign;</span><br><span class="line">this.menuIndex = index;</span><br><span class="line">// 赋值名称</span><br><span class="line">this.cardName = name;</span><br><span class="line">// 显示卡片</span><br><span class="line">this.showCard = true;</span><br><span class="line">// 卡片颜色</span><br><span class="line">switch (index) &#123;</span><br><span class="line">case 0:</span><br><span class="line">_this.cardGround = &apos;rgba(129,15,175,0.4)&apos;;</span><br><span class="line">_this.cardType = 0;</span><br><span class="line">break;</span><br><span class="line">case 1:</span><br><span class="line">_this.cardGround = &apos;rgba(12,136,145,0.6)&apos;;</span><br><span class="line">_this.cardType = 1;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">_this.cardGround = &apos;rgba(255,235,45,0.6)&apos;;</span><br><span class="line">_this.cardType = 2;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">_this.cardGround = &apos;rgba(196,0,83,0.6)&apos;;</span><br><span class="line">_this.cardType = 3;</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">_this.cardGround = &apos;rgba(87,174,157,0.6)&apos;;</span><br><span class="line">_this.cardType = 4;</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">_this.cardGround = &apos;rgba(255,125,0,0.6)&apos;;</span><br><span class="line">_this.cardType = 5;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 心 缩放</span><br><span class="line">heartScale () &#123;</span><br><span class="line">this.heartScaleSign = ! this.heartScaleSign;</span><br><span class="line">&#125;,</span><br><span class="line">// 消失卡片 &amp;&amp; 菜单复原</span><br><span class="line">backSign () &#123;</span><br><span class="line">let _this = this;</span><br><span class="line">_this.cardMiss = true;</span><br><span class="line">_this.runCircleSign = ! _this.runCircleSign;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">_this.showCard = false;</span><br><span class="line">_this.cardMiss = false;</span><br><span class="line">&#125;, 3000)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="2-弹幕效果"><a href="#2-弹幕效果" class="headerlink" title="2. 弹幕效果"></a>2. 弹幕效果</h5><p><img src="/images/posts/弹幕效果.gif" alt="留言弹幕效果" title="留言弹幕效果"></p><blockquote><p>1.输入内容；<br>2.循环展示；<br>3.随即高度及标签颜色；<br>4.利用本地存储持久化;<br>5.动画漂移效果。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;div class=&quot;haveWords&quot;&gt;</span><br><span class="line">&lt;!-- 展示内容 --&gt;</span><br><span class="line">&lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">&lt;el-tag v-for=&quot;el in ku&quot;</span><br><span class="line">:key=&quot;el.id&quot;</span><br><span class="line">class=&quot;fly&quot;</span><br><span class="line">:type=&quot;el.type&quot;</span><br><span class="line">:style=&quot;&#123;top:el.top + &apos;px&apos;&#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&#123;&#123; el.msg &#125;&#125;</span><br><span class="line">&lt;/el-tag&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 输入内容 --&gt;</span><br><span class="line">&lt;div class=&quot;dealBox&quot;&gt;</span><br><span class="line">&lt;el-input</span><br><span class="line">type=&quot;textarea&quot;</span><br><span class="line">:autosize=&quot;&#123; minRows: 2, maxRows: 5&#125;&quot;</span><br><span class="line">placeholder=&quot;请输入留言&quot;</span><br><span class="line">v-model.trim=&quot;msg&quot;</span><br><span class="line">size=&quot;small&quot;&gt;</span><br><span class="line">&lt;/el-input&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;sendData&quot;&gt;Biu~&lt;/el-button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// script</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: null, //缓存</span><br><span class="line">ku: JSON.parse(localStorage.kuArr), //存取数据</span><br><span class="line">msgKu: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 弹幕</span><br><span class="line">sendData () &#123;</span><br><span class="line">// 5中标签模式</span><br><span class="line">let typeArr = [&apos;&apos;,&apos;success&apos;,&apos;info&apos;,&apos;warning&apos;,&apos;danger&apos;];</span><br><span class="line">let localArr = this.ku;</span><br><span class="line">//判空 不为空则继续 为空则提示输入</span><br><span class="line">if(this.msg !== &apos;&apos; &amp;&amp; this.msg !== null) &#123;</span><br><span class="line">let num1 = Math.random() * 500;</span><br><span class="line">let num2 = Math.random() * 5;</span><br><span class="line">let arrMark = Math.floor(num2);</span><br><span class="line">let top = Math.floor(num1);</span><br><span class="line">let obj = &#123;msg:this.msg,top:top,type:typeArr[arrMark]&#125;;</span><br><span class="line">localArr.push(obj);</span><br><span class="line">localStorage.kuArr = JSON.stringify(localArr);</span><br><span class="line">this.msg = &quot;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.$message.warning(&apos;要先输入哦~&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;&emsp;别的功能点基本上都是element-ui中组件自带或基于组件开发的，熟悉element-ui的小伙伴应该极为熟悉。有感兴趣的朋友可自行去element-ui官网学习。<a href="https://element.eleme.cn/2.0/#/zh-CN" title="element飞机票" target="_blank" rel="noopener">element飞机票</a></p></blockquote><h3 id="后"><a href="#后" class="headerlink" title="后"></a>后</h3><p>&emsp;&emsp;有对本demo感兴趣的或者想要作者源码的可以关注公众号<code>流眸</code>，回复“520源码”拿到代码哦~<br><img src="/images/posts/公众号二维码.jpg" alt="扫码关注公众号" title="扫码关注公众号"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;font color=&quot;deepskyblue&quot; size=&quot;18&quot;&gt;520&lt;/font&gt;：网络情人节是信息时代的爱情节日，定于每年的5月20日和5月21日。该节日源于歌手范晓萱的《数字恋爱》中“520”被喻成“我爱你” ，以及音乐人吴玉龙的网络歌曲中“我爱你”与“网络情人”的紧密联系。后来，“521”也逐渐被情侣们赋予了“我愿意、我爱你”的意思。“网络情人节”又被称为“结婚吉日”、“表白日”、“撒娇日”、“求爱节”。&lt;br&gt;&amp;emsp;&amp;emsp;那么，作为程序员，如何通过专业技能向自己的另一半表达爱意呢？&lt;/p&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/520.gif&quot; alt=&quot;520&quot; title=&quot;520&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="css" scheme="https://www.zhuxingmin.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js页面全屏</title>
    <link href="https://www.zhuxingmin.com/2019/05/13/js%E9%A1%B5%E9%9D%A2%E5%85%A8%E5%B1%8F/"/>
    <id>https://www.zhuxingmin.com/2019/05/13/js页面全屏/</id>
    <published>2019-05-13T06:20:51.000Z</published>
    <updated>2019-05-13T08:19:55.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><img src="/images/posts/页面全屏.gif" alt="页面全屏" title="页面全屏"></p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>&emsp;&emsp;在做前端PC端项目中，我们经常会遇到让页面全屏的需求。大多情况下，这样可以使得用户在该页面更加专注，屏蔽掉该页面之外的干扰。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>状态判断</li><li>事件操作<h4 id="1-状态判断"><a href="#1-状态判断" class="headerlink" title="1. 状态判断"></a>1. 状态判断</h4>首先，我们需要给出一个默认状态，即非全屏。然后，在此基础上我们进行DOM操作，每次用户进行操作时，我们先判断当前状态，进行相应的操作，操作过后改变当前状态即可。<h4 id="2-事件操作"><a href="#2-事件操作" class="headerlink" title="2. 事件操作"></a>2. 事件操作</h4><code>注：</code>下表中<code>de</code>代表<code>document.documentElement</code></li></ol><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">浏览器</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">全屏</td><td style="text-align:center">W3C</td><td style="text-align:center">de.requestFullscreen()</td></tr><tr><td style="text-align:center">全屏</td><td style="text-align:center">CHROME</td><td style="text-align:center">de.webkitRequestFullScreen()</td></tr><tr><td style="text-align:center">全屏</td><td style="text-align:center">FIREFOX</td><td style="text-align:center">de.mozRequestFullScreen()</td></tr><tr><td style="text-align:center">全屏</td><td style="text-align:center">IE</td><td style="text-align:center">de.msRequestFullscreen()</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">W3C</td><td style="text-align:center">document.exitFullscreen</td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">CHROME</td><td style="text-align:center">document.webkitCancelFullScreen</td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">FIREFOX</td><td style="text-align:center">document.mozCancelFullScreen</td></tr><tr><td style="text-align:center">还原</td><td style="text-align:center">IE</td><td style="text-align:center">document.msExitFullscreen</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>注：</code> 本demo在vue中使用。如果使用正常.html，自行将<code>@click</code>转为正常点击事件(如<code>onclick</code>)即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;div @click=&quot;handleFullScreen&quot;&gt;</span><br><span class="line">一个按钮</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">fullscreen: false  // 是否全屏</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 全屏事件</span><br><span class="line">handleFullScreen()&#123;</span><br><span class="line">let element = document.documentElement;</span><br><span class="line">// 判断是否已经是全屏</span><br><span class="line">// 如果是全屏，退出</span><br><span class="line">if (this.fullscreen) &#123;</span><br><span class="line">if (document.exitFullscreen) &#123;</span><br><span class="line">document.exitFullscreen();</span><br><span class="line">&#125; else if (document.webkitCancelFullScreen) &#123;</span><br><span class="line">document.webkitCancelFullScreen();</span><br><span class="line">&#125; else if (document.mozCancelFullScreen) &#123;</span><br><span class="line">document.mozCancelFullScreen();</span><br><span class="line">&#125; else if (document.msExitFullscreen) &#123;</span><br><span class="line">document.msExitFullscreen();</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;已还原！&apos;);</span><br><span class="line">&#125; else &#123;// 否则，进入全屏</span><br><span class="line">if (element.requestFullscreen) &#123;</span><br><span class="line">element.requestFullscreen();</span><br><span class="line">&#125; else if (element.webkitRequestFullScreen) &#123;</span><br><span class="line">element.webkitRequestFullScreen();</span><br><span class="line">&#125; else if (element.mozRequestFullScreen) &#123;</span><br><span class="line">element.mozRequestFullScreen();</span><br><span class="line">&#125; else if (element.msRequestFullscreen) &#123;</span><br><span class="line">// IE11</span><br><span class="line">element.msRequestFullscreen();</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;已全屏！&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// 改变当前全屏状态</span><br><span class="line">this.fullscreen = !this.fullscreen;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/页面全屏.gif&quot; alt=&quot;页面全屏&quot; title=&quot;页面全屏&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="全屏" scheme="https://www.zhuxingmin.com/tags/%E5%85%A8%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 3.x 打包白屏、清除console及IE白屏问题解决</title>
    <link href="https://www.zhuxingmin.com/2019/05/06/vue-cli-3-x-%E6%89%93%E5%8C%85%E7%99%BD%E5%B1%8F%E3%80%81%E6%B8%85%E9%99%A4console%E5%8F%8AIe%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://www.zhuxingmin.com/2019/05/06/vue-cli-3-x-打包白屏、清除console及Ie白屏问题解决/</id>
    <published>2019-05-06T01:27:27.000Z</published>
    <updated>2019-05-06T04:05:11.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>打包白屏</li><li>IE白屏</li><li>打包后清除控制台所有console信息</li><li>js\css压缩问题</li></ul><a id="more"></a><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="问题1-打包白屏"><a href="#问题1-打包白屏" class="headerlink" title="问题1. 打包白屏"></a>问题1. 打包白屏</h4><p><strong><em>描述</em></strong><br><code>npm run build</code>打包后，生成<code>dist</code>文件夹。从该文件夹打开<code>dist/index.html</code>页面，发现页面空白，且控制台报错。原因是路径配置有问题。<br><strong><em>方案</em></strong><br>根目录打开/新建<code>vue.config.js</code>，配置路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 基本路径配置</span><br><span class="line">  publicPath: &apos;./&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新打包验证，问题得以解决。</p><h4 id="问题2-IE白屏"><a href="#问题2-IE白屏" class="headerlink" title="问题2. IE白屏"></a>问题2. IE白屏</h4><p><strong><em>描述</em></strong><br>在打包完成之后，如果是pc项目，或者移动端低版本兼容项目，则会有许多问题，其中白屏问题困扰着很多开发者，在安卓4.0、IE多个版本环境中体现的尤为别致。<br><strong><em>方案</em></strong></p><ol><li><p>下载相关插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/plugin-transform-runtime @babel/preset-env es6-promise babel-polyfill --save-dev-dev</span><br></pre></td></tr></table></figure></li><li><p>根目录新建文件<code>.babelrc</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel/preset-env&quot;],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@babel/plugin-transform-runtime&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <em>[注: 基于vue-cli 3.x]</em></p></li><li><p>修改根目录下的文件<code>babel.config.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// ... some other codes</span><br><span class="line"></span><br><span class="line">// 打包时删除console</span><br><span class="line">const plugins = [];</span><br><span class="line">if ([&apos;production&apos;, &apos;prod&apos;].includes(process.env.NODE_ENV)) &#123;</span><br><span class="line">  plugins.push(&quot;transform-remove-console&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      &apos;@vue/app&apos;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;useBuiltIns&quot;: &quot;entry&quot;,</span><br><span class="line">        polyfills: [</span><br><span class="line">          &apos;es6.promise&apos;,</span><br><span class="line">          &apos;es6.symbol&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  plugins: plugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建/修改根目录下的文件<code>vue.config.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">// 显式转义依赖</span><br><span class="line">transpileDependencies: [&apos;webpack-dev-server/client&apos;],</span><br><span class="line"></span><br><span class="line">chainWebpack: config =&gt; &#123;</span><br><span class="line">            // 指定入口  es6转es5</span><br><span class="line">            config.entry.app = [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>入口引入相关插件<code>src/main.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 解决ie白屏问题</span><br><span class="line">import &apos;@babel/polyfill&apos;</span><br><span class="line">import Es6Promise from &apos;es6-promise&apos;</span><br><span class="line">Es6Promise.polyfill()</span><br></pre></td></tr></table></figure></li><li><p>重启服务/重新打包<br>页面正常显示，控制台无报错信息。问题解决。</p></li></ol><h4 id="问题3-打包后清除控制台所有console信息"><a href="#问题3-打包后清除控制台所有console信息" class="headerlink" title="问题3. 打包后清除控制台所有console信息"></a>问题3. 打包后清除控制台所有console信息</h4><p><strong><em>描述</em></strong><br>在开发环境中，我们调试过程中会添加些许的<code>console.log</code>或者<code>debugger</code>相关代码，来帮助我们完成开发。但是有时候此类代码太多或者马虎了，上线前没有删除干净，那么打包后生产环境中就会在控制台留下相关信息。那么为了避免这一不友好行为，我们采取插件来在打包时，清除所有打印信息。<br><strong><em>方案</em></strong></p><ol><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置<code>vue.config.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 去除console</span><br><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">// ... other codes</span><br><span class="line"></span><br><span class="line">// 去除console</span><br><span class="line">    configureWebpack: (config) =&gt; &#123;</span><br><span class="line">        if (env !== &apos;development&apos; || env !== &apos;test&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            config.plugins.push(</span><br><span class="line">                new UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            warnings: false,</span><br><span class="line">                            drop_debugger: true, // 注释console</span><br><span class="line">                            drop_console: true,</span><br><span class="line">                            pure_funcs:[&apos;console.log&apos;] // 移除console</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: false,</span><br><span class="line">                    parallel: true,</span><br><span class="line">                &#125;),</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新打包<br>配置完成后，重新打包<code>npm run build</code>，打开<code>dist/index.html</code>验证，console全部清除。</p></li></ol><h4 id="问题4-js-css压缩问题"><a href="#问题4-js-css压缩问题" class="headerlink" title="问题4. js\css压缩问题"></a>问题4. js\css压缩问题</h4><p><strong><em>描述</em></strong><br>在打包成功后，为了缩小包体积，提高页面响应速度，一般会对包进行压缩，此处主要针对js\css来处理。<br><strong><em>方案</em></strong></p><ol><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置<code>vue.config.js</code>中的configureWebpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 压缩css、js</span><br><span class="line">const CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;);</span><br><span class="line">// 要压缩的文件</span><br><span class="line">const productionGzipExtensions = [&apos;js&apos;, &apos;css&apos;];</span><br><span class="line"></span><br><span class="line">configureWebpack: (config) =&gt; &#123;</span><br><span class="line">if (env !== &apos;development&apos; || env !== &apos;test&apos;) &#123;</span><br><span class="line">config.plugins.push(new CompressionWebpackPlugin(&#123;</span><br><span class="line">algorithm: &apos;gzip&apos;,</span><br><span class="line">test: new RegExp(`\\.($&#123;productionGzipExtensions.join(&apos;|&apos;)&#125;)$`),</span><br><span class="line">threshold: 10240,</span><br><span class="line">minRatio: 0.8,</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启服务<br>完成陪之后重启服务/重新打包，处理完成，搞定收工！</p></li></ol><hr><h3 id="附赠"><a href="#附赠" class="headerlink" title="附赠"></a>附赠</h3><p>这里附上基于vue-cli3的一些简单配置文件</p><h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">const resolve = dir =&gt; path.resolve(__dirname, dir);</span><br><span class="line"></span><br><span class="line">// const IS_PROD = [&apos;production&apos;, &apos;prod&apos;].includes(process.env.NODE_ENV);</span><br><span class="line"></span><br><span class="line">// const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 去除console</span><br><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);</span><br><span class="line">// 压缩css、js</span><br><span class="line">const CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;);</span><br><span class="line">// 要压缩的文件</span><br><span class="line">const productionGzipExtensions = [&apos;js&apos;, &apos;css&apos;];</span><br><span class="line">// const productionGzipExtensions = /\.(js|css|json|txt|html|ico|svg)(\?.*)?$/i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 基本路径配置</span><br><span class="line">    publicPath: &apos;./&apos;,</span><br><span class="line"></span><br><span class="line">    // 显式转义依赖</span><br><span class="line">    transpileDependencies: [&apos;webpack-dev-server/client&apos;],</span><br><span class="line"></span><br><span class="line">    // 配置less</span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            less: &#123;</span><br><span class="line">                javascriptEnabled: true,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    configureWebpack: (config) =&gt; &#123;</span><br><span class="line">        if (env !== &apos;development&apos; || env !== &apos;test&apos;) &#123;</span><br><span class="line">            config.plugins.push(new CompressionWebpackPlugin(&#123;</span><br><span class="line">                algorithm: &apos;gzip&apos;,</span><br><span class="line">                test: new RegExp(`\\.($&#123;productionGzipExtensions.join(&apos;|&apos;)&#125;)$`),</span><br><span class="line">                threshold: 10240,</span><br><span class="line">                minRatio: 0.8,</span><br><span class="line">            &#125;));</span><br><span class="line">            config.plugins.push(</span><br><span class="line">                new UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            warnings: false,</span><br><span class="line">                            drop_debugger: true, // 注释console</span><br><span class="line">                            drop_console: true,</span><br><span class="line">                            pure_funcs:[&apos;console.log&apos;] // 移除console</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: false,</span><br><span class="line">                    parallel: true,</span><br><span class="line">                &#125;),</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    chainWebpack: config =&gt; &#123;</span><br><span class="line">        // 指定入口  es6转es5</span><br><span class="line">        config.entry.app = [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;];</span><br><span class="line"></span><br><span class="line">        // 修复HMR</span><br><span class="line">        config.resolve.symlinks(true);</span><br><span class="line"></span><br><span class="line">        // //修复 Lazy loading routes Error</span><br><span class="line">        // config.plugin(&apos;html&apos;).tap(args =&gt; &#123;</span><br><span class="line">        //     args[0].chunksSortMode = &apos;none&apos;;</span><br><span class="line">        //     return args;</span><br><span class="line">        // &#125;);</span><br><span class="line"></span><br><span class="line">        // 添加别名</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(&apos;@&apos;, resolve(&apos;src&apos;))</span><br><span class="line">            .set(&apos;assets&apos;, resolve(&apos;src/assets&apos;))</span><br><span class="line">            .set(&apos;static&apos;, resolve(&apos;src/static&apos;));</span><br><span class="line"></span><br><span class="line">        // //压缩图片</span><br><span class="line">        // config.module</span><br><span class="line">        //     .rule(&quot;images&quot;)</span><br><span class="line">        //     .use(&quot;image-webpack-loader&quot;)</span><br><span class="line">        //     .loader(&quot;image-webpack-loader&quot;)</span><br><span class="line">        //     .options(&#123;</span><br><span class="line">        //         mozjpeg: &#123;progressive: true, quality: 65&#125;,</span><br><span class="line">        //         optipng: &#123;enabled: false&#125;,</span><br><span class="line">        //         pngquant: &#123;quality: &quot;65-90&quot;, speed: 4&#125;,</span><br><span class="line">        //         gifsicle: &#123;interlaced: false&#125;,</span><br><span class="line">        //         webp: &#123;quality: 75&#125;</span><br><span class="line">        //     &#125;);</span><br><span class="line"></span><br><span class="line">        // // 打包分析</span><br><span class="line">        // if (process.env.IS_ANALYZ) &#123;</span><br><span class="line">        //     config.plugin(&apos;webpack-report&apos;)</span><br><span class="line">        //         .use(BundleAnalyzerPlugin, [&#123;</span><br><span class="line">        //             analyzerMode: &apos;static&apos;,</span><br><span class="line">        //         &#125;]);</span><br><span class="line">        // &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 是否使用包含运行时编译器的 Vue 构建版本</span><br><span class="line">    // runtimeCompiler: true,</span><br><span class="line"></span><br><span class="line">    // 去除打包.map后缀文件</span><br><span class="line">    // productionSourceMap: false,</span><br><span class="line"></span><br><span class="line">    // devServer: &#123;//跨域</span><br><span class="line">    //     port: 8080,// 端口号</span><br><span class="line">    //     open: true, //配置自动启动浏览器</span><br><span class="line">    //     proxy: &#123;// 配置跨域处理 可以设置多个</span><br><span class="line">    //         &apos;/api&apos;: &#123;</span><br><span class="line">    //             target: &apos;&apos;,</span><br><span class="line">    //             ws: true,</span><br><span class="line">    //             changeOrigin: true</span><br><span class="line">    //         &#125;,</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title="babel.config.js"></a>babel.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 打包时删除console</span><br><span class="line">const plugins = [];</span><br><span class="line">if ([&apos;production&apos;, &apos;prod&apos;].includes(process.env.NODE_ENV)) &#123;</span><br><span class="line">  plugins.push(&quot;transform-remove-console&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      &apos;@vue/app&apos;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;useBuiltIns&quot;: &quot;entry&quot;,</span><br><span class="line">        polyfills: [</span><br><span class="line">          &apos;es6.promise&apos;,</span><br><span class="line">          &apos;es6.symbol&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  // 配置babel-plugin-import, 用于按需加载组件代码和样式</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &quot;import&quot;,</span><br><span class="line">      &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: true &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel/preset-env&quot;],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@babel/plugin-transform-runtime&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line">import store from &apos;./store&apos;</span><br><span class="line"></span><br><span class="line">// 解决ie白屏问题</span><br><span class="line">import &apos;@babel/polyfill&apos;</span><br><span class="line">import Es6Promise from &apos;es6-promise&apos;</span><br><span class="line">Es6Promise.polyfill()</span><br><span class="line"></span><br><span class="line">// 使用antd-vue Button组件</span><br><span class="line">import &#123; Button &#125; from &apos;ant-design-vue&apos;</span><br><span class="line"></span><br><span class="line">// Button组件</span><br><span class="line">Vue.component(Button.name, Button);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打包白屏&lt;/li&gt;
&lt;li&gt;IE白屏&lt;/li&gt;
&lt;li&gt;打包后清除控制台所有console信息&lt;/li&gt;
&lt;li&gt;js\css压缩问题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://www.zhuxingmin.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3.x及相关配置</title>
    <link href="https://www.zhuxingmin.com/2019/05/05/vue-cli3-x%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/05/05/vue-cli3-x及相关配置/</id>
    <published>2019-05-05T09:10:33.000Z</published>
    <updated>2019-05-05T12:48:43.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-cli-3-x"><a href="#vue-cli-3-x" class="headerlink" title="vue-cli 3.x"></a>vue-cli 3.x</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h4 id="2-环境-windows"><a href="#2-环境-windows" class="headerlink" title="2.环境(windows)"></a>2.环境(windows)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy&gt;node -v</span><br><span class="line">v8.12.0</span><br><span class="line"></span><br><span class="line">E:\stydy&gt;webpack -v</span><br><span class="line">4.29.6</span><br><span class="line"></span><br><span class="line">E:\stydy&gt;npm -v</span><br><span class="line">6.4.1</span><br><span class="line"></span><br><span class="line">E:\stydy&gt;vue -V</span><br><span class="line">3.7.0</span><br></pre></td></tr></table></figure><h4 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3.创建项目"></a>3.创建项目</h4><p>我在此处想使用<code>ant-design-vue</code>，所以创建了一个<code>antd</code>的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create antd</span><br></pre></td></tr></table></figure></p><h4 id="4-项目配置"><a href="#4-项目配置" class="headerlink" title="4.项目配置"></a>4.项目配置</h4><p>我选择的项目配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.7.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset for future projects? No</span><br><span class="line">? Pick the package manager to use when installing dependencies: NPM</span><br></pre></td></tr></table></figure></p><h4 id="5-运行"><a href="#5-运行" class="headerlink" title="5.运行"></a>5.运行</h4><p>依赖安装完成后，cd到该项目路径下，运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cd antd</span><br><span class="line">$ npm run serve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DONE  Compiled successfully in 4229ms</span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http://localhost:8080/</span><br><span class="line"> - Network: http://192.168.100.111:8080/</span><br><span class="line"></span><br><span class="line"> Note that the development build is not optimized.</span><br><span class="line"> To create a production build, run npm run build.</span><br></pre></td></tr></table></figure></p><p>此时浏览器会访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，看到 Welcome to Your Vue.js App 的界面就算成功了。</p><h4 id="6-目录结构"><a href="#6-目录结构" class="headerlink" title="6.目录结构"></a>6.目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── babel.config</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── postcss.config.js</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">└── .gitignore</span><br></pre></td></tr></table></figure><hr><h3 id="使用ant-design-vue"><a href="#使用ant-design-vue" class="headerlink" title="使用ant-design-vue"></a>使用ant-design-vue</h3><p>由于在实际开发工程中，加载全部样式/组件会影响前端性能，因此我们直接采取按需加载组件及样式。</p><h4 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install ant-design-vue --save-dev</span><br><span class="line"></span><br><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure><h4 id="2-引入src-main-js"><a href="#2-引入src-main-js" class="headerlink" title="2.引入src/main.js"></a>2.引入<code>src/main.js</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 以 Button 组件为例</span><br><span class="line">import &#123; Button &#125; from &apos;ant-design-vue&apos;</span><br><span class="line">Vue.component(Button.name, Button);</span><br></pre></td></tr></table></figure><h4 id="3-组件使用"><a href="#3-组件使用" class="headerlink" title="3.组件使用"></a>3.组件使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;a-button type=&quot;danger&quot;&gt;Danger&lt;/a-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="4-babel-plugin-import"><a href="#4-babel-plugin-import" class="headerlink" title="4.babel-plugin-import"></a>4.babel-plugin-import</h4><h5 id="4-1安装"><a href="#4-1安装" class="headerlink" title="4.1安装"></a>4.1安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import --save-dev</span><br></pre></td></tr></table></figure><h5 id="4-2修改babel-config-js"><a href="#4-2修改babel-config-js" class="headerlink" title="4.2修改babel.config.js"></a>4.2修改<code>babel.config.js</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">   &apos;@vue/app&apos;,</span><br><span class="line">  ],</span><br><span class="line">  // 配置babel-plugin-import, 用于按需加载组件代码和样式</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &quot;import&quot;,</span><br><span class="line">      &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: true &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3报错解决方案"><a href="#4-3报错解决方案" class="headerlink" title="4.3报错解决方案"></a>4.3报错解决方案</h5><p>此时重启项目，会遇到报错情况。以下两种方案<strong><em><code>任选其一即可</code></em></strong>。两种方案：</p><ul><li><p><em>配置<code>vue.config.js</code></em><br>在根目录下新建<code>vue.config.js</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    // 配置less</span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            less: &#123;</span><br><span class="line">                javascriptEnabled: true,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>修改<code>babel.config.js</code></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">plugins: [</span><br><span class="line">  [</span><br><span class="line">    &quot;import&quot;,</span><br><span class="line">    &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: &apos;css&apos; &#125;</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-4完成"><a href="#4-4完成" class="headerlink" title="4.4完成"></a>4.4完成</h5><p>保存，重启项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><p>可以看到，antd 组件的 js 和 css代码都会按需加载。</p>]]></content>
    
    <summary type="html">
    
      vue-cli 3.x 项目创建使用及ant-design-vue框架使用
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="vue-cli3" scheme="https://www.zhuxingmin.com/tags/vue-cli3/"/>
    
  </entry>
  
  <entry>
    <title>《复联4之终局之战》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/05/02/%E3%80%8A%E5%A4%8D%E8%81%944%E4%B9%8B%E7%BB%88%E5%B1%80%E4%B9%8B%E6%88%98%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/05/02/《复联4之终局之战》随笔/</id>
    <published>2019-05-02T11:24:19.000Z</published>
    <updated>2019-05-13T05:37:05.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>&emsp;&emsp;<font size="4" color="deepskyblue">复仇者联盟4：终局之战</font>（Avengers: Endgame）是安东尼·罗素和乔·罗素执导的美国科幻电影，改编自美国漫威漫画，漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU）第22部影片，由小罗伯特·唐尼、克里斯·埃文斯、克里斯·海姆斯沃斯、马克·鲁法洛、斯嘉丽·约翰逊、杰瑞米·雷纳、保罗·路德、布丽·拉尔森、唐·钱德尔、凯伦·吉兰、乔什·布洛林等主演。</p></blockquote><p>### </p>]]></content>
    
    <summary type="html">
    
      I love you three thousand times.
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="电影" scheme="https://www.zhuxingmin.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="复仇者联盟" scheme="https://www.zhuxingmin.com/tags/%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>js模拟信号灯</title>
    <link href="https://www.zhuxingmin.com/2019/04/29/js%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7%E7%81%AF/"/>
    <id>https://www.zhuxingmin.com/2019/04/29/js模拟信号灯/</id>
    <published>2019-04-29T02:21:28.000Z</published>
    <updated>2019-04-29T02:44:24.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/images/posts/信号灯.gif" alt="信号灯" title="信号灯"></p><a id="more"></a><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>给出一个div元素块，模拟一个如下条件的交通信号灯：</p><ul><li>绿灯亮x毫秒，转黄灯</li><li>黄灯亮y毫秒，转红灯</li><li>红灯亮z毫秒，转绿灯</li><li>无限循环执行</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>&emsp;&emsp;首先，div元素块设置css变圆；其次，每隔一定时间，转换元素块背景色；接着，控制显示时长；然后，将上两步组合；最后，无限循环执行。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><ol><li>css<ul><li>border-radius</li><li>background</li></ul></li><li>js<ul><li>setTimeout</li><li>Promise</li><li>async/await</li><li>while</li></ul></li></ol><h4 id="技术栈分析"><a href="#技术栈分析" class="headerlink" title="技术栈分析"></a>技术栈分析</h4><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">技术</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">样式</td><td style="text-align:center">border-radius</td><td style="text-align:center">元素形状</td></tr><tr><td style="text-align:center">样式</td><td style="text-align:center">background</td><td style="text-align:center">元素背景色</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">setTimeout</td><td style="text-align:center">定时器</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">Promise</td><td style="text-align:center">处理回调</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">async/await</td><td style="text-align:center">配合使用</td></tr><tr><td style="text-align:center">脚本</td><td style="text-align:center">while</td><td style="text-align:center">循环</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;div id=&quot;signal-lamp&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;button class=&quot;btn&quot; onclick=&quot;run()&quot;&gt;执行&lt;/button&gt;</span><br><span class="line">&lt;span id=&quot;showText&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// css</span><br><span class="line">#signal-lamp &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border-radius: 50%;</span><br><span class="line">border: 1px solid #ffcecc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line"></span><br><span class="line">// 定义函数sleep</span><br><span class="line">function sleep(ms)&#123;</span><br><span class="line">// 返回一个Promise实例</span><br><span class="line">return new Promise(function(resolve)&#123;</span><br><span class="line">setTimeout(resolve, ms);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 改变颜色 等待参数时间 （时间及颜色均为参数）</span><br><span class="line">async function ChangeColor(ms, color)&#123;</span><br><span class="line">// 改变颜色</span><br><span class="line">document.getElementById(&quot;signal-lamp&quot;).style.background = color;</span><br><span class="line">// 打印出显示时间</span><br><span class="line">document.getElementById(&quot;showText&quot;).innerText = `$&#123;color&#125;:显示$&#123;ms&#125;ms`;</span><br><span class="line">// 睡眠ms毫秒</span><br><span class="line">await sleep(ms);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 循环依次执行</span><br><span class="line">async function run()&#123;</span><br><span class="line">// while 循环</span><br><span class="line">while (true) &#123;</span><br><span class="line">// 绿灯 1.8s</span><br><span class="line">await ChangeColor(1800,&quot;green&quot;);</span><br><span class="line">// 黄灯 0.8s</span><br><span class="line">await ChangeColor(800, &quot;yellow&quot;);</span><br><span class="line">// 红灯 1.2s</span><br><span class="line">await ChangeColor(1200, &quot;red&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/信号灯.gif&quot; alt=&quot;信号灯&quot; title=&quot;信号灯&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="Promise" scheme="https://www.zhuxingmin.com/tags/Promise/"/>
    
      <category term="信号灯" scheme="https://www.zhuxingmin.com/tags/%E4%BF%A1%E5%8F%B7%E7%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>js执行——Promise</title>
    <link href="https://www.zhuxingmin.com/2019/04/28/js%E6%89%A7%E8%A1%8C%E2%80%94%E2%80%94Promise/"/>
    <id>https://www.zhuxingmin.com/2019/04/28/js执行——Promise/</id>
    <published>2019-04-28T04:09:15.000Z</published>
    <updated>2019-04-28T07:53:07.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理且更强大。它最早由社区提出并实现，ES6将其写进了语言标准，统一了用法，并原生提供了Promise对象。</p></blockquote><a id="more"></a><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>对象的状态不受外界影响 （3种状态）<ul><li>Pending状态（进行中）</li><li>Fulfilled状态（已成功）</li><li>Rejected状态（已失败）</li></ul></li><li>一旦状态改变就不会再变 （两种状态改变：成功或失败）<ul><li>Pending -&gt; Fulfilled</li><li>Pending -&gt; Rejected</li></ul></li></ol><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="创建Promise实例"><a href="#创建Promise实例" class="headerlink" title="创建Promise实例"></a>创建Promise实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">// ... some code</span><br><span class="line"></span><br><span class="line">if (/* 异步操作成功 */) &#123;</span><br><span class="line">resolve(value);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">reject(error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由JavaScript引擎提供，不用自己部署。<br>&emsp;&emsp;resolve作用是将Promise对象状态由“未完成”变为“成功”，也就是<code>Pending -&gt; Fulfilled</code>，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；而reject函数则是将Promise对象状态由“未完成”变为“失败”，也就是<code>Pending -&gt; Rejected</code>，在异步操作失败时调用，并将异步操作的结果作为参数传递出去。</p><h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>&emsp;&emsp;Promise实例生成后，可用<code>then</code>方法分别指定两种状态回调参数。then 方法可以接受两个回调函数作为参数：</p><ol><li>Promise对象状态改为Resolved时调用 （必选）</li><li>Promise对象状态改为Rejected时调用 （可选）</li></ol><h4 id="基本用法示例"><a href="#基本用法示例" class="headerlink" title="基本用法示例"></a>基本用法示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sleep(ms) &#123;</span><br><span class="line">return new Promise(function(resolve, reject) &#123;</span><br><span class="line">setTimeout(resolve, ms);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">sleep(500).then( ()=&gt; console.log(&quot;finished&quot;));</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码定义了一个函数sleep，调用后，等待了指定参数(500)毫秒后执行then中的函数。值得注意的是，Promise新建后就会立即执行。</p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>&emsp;&emsp;接下来我们探究一下它的执行顺序，看以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">console.log(&quot;AAA&quot;);</span><br><span class="line">resolve()</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(() =&gt; console.log(&quot;BBB&quot;));</span><br><span class="line">console.log(&quot;CCC&quot;)</span><br><span class="line"></span><br><span class="line">// AAA</span><br><span class="line">// CCC</span><br><span class="line">// BBB</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;执行后，我们发现输出顺序总是 <code>AAA -&gt; CCC -&gt; BBB</code>。表明，在Promise新建后会立即执行，所以<code>首先输出 AAA</code>。然后，then方法指定的回调函数将在当前脚本所有同步任务执行完后才会执行，所以<code>BBB 最后输出</code>。</p><h4 id="与定时器混用"><a href="#与定时器混用" class="headerlink" title="与定时器混用"></a>与定时器混用</h4><p>&emsp;&emsp;首先看一个实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">console.log(&quot;1&quot;);</span><br><span class="line">resolve();</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(()=&gt;console.log(&quot;2&quot;), 0);</span><br><span class="line">promise.then(() =&gt; console.log(&quot;3&quot;));</span><br><span class="line">console.log(&quot;4&quot;);</span><br><span class="line"></span><br><span class="line">// 1</span><br><span class="line">// 4</span><br><span class="line">// 3</span><br><span class="line">// 2</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到，结果输出顺序总是：<code>1 -&gt; 4 -&gt; 3 -&gt; 2</code>。1与4的顺序不必再说，而2与3先输出Promise的then，而后输出定时器任务。原因则是Promise属于JavaScript引擎内部任务，而setTimeout则是浏览器API，而引擎内部任务优先级高于浏览器API任务，所以有此结果。</p><h3 id="拓展-async-await"><a href="#拓展-async-await" class="headerlink" title="拓展 async/await"></a>拓展 async/await</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>&emsp;&emsp;顾名思义，异步。async函数对 Generator 函数的改进，async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。特点体现在以下四点：</p><ul><li>内置执行器</li><li>更好的语义</li><li>更广的适用性</li><li>返回值是 Promise</li></ul><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p>&emsp;&emsp;顾名思义，等待。正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。另一种情况是，await命令后面是一个thenable对象（即定义then方法的对象），那么await会将其等同于 Promise 对象。</p><h4 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h4><p>&emsp;&emsp;先看示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function sleep(ms) &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(resolve,ms);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">async function handle()&#123;</span><br><span class="line">    console.log(&quot;AAA&quot;)</span><br><span class="line">    await sleep(5000)</span><br><span class="line">    console.log(&quot;BBB&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle();</span><br><span class="line"></span><br><span class="line">// AAA</span><br><span class="line">// BBB (5000ms后)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;我们定义函数sleep，返回一个Promise。然后在handle函数前加上async关键词，这样就定义了一个async函数。在该函数中，利用await来等待一个Promise。</p><h3 id="Promise优缺点"><a href="#Promise优缺点" class="headerlink" title="Promise优缺点"></a>Promise优缺点</h3><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">解决回调</td><td style="text-align:center">无法监测进行状态</td></tr><tr><td style="text-align:center">链式调用</td><td style="text-align:center">新建立即执行且无法取消</td></tr><tr><td style="text-align:center">减少嵌套</td><td style="text-align:center">内部错误无法抛出</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理且更强大。它最早由社区提出并实现，ES6将其写进了语言标准，统一了用法，并原生提供了Promise对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="Promise" scheme="https://www.zhuxingmin.com/tags/Promise/"/>
    
      <category term="es6" scheme="https://www.zhuxingmin.com/tags/es6/"/>
    
      <category term="定时器" scheme="https://www.zhuxingmin.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue吸顶效果</title>
    <link href="https://www.zhuxingmin.com/2019/04/26/vue%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C/"/>
    <id>https://www.zhuxingmin.com/2019/04/26/vue吸顶效果/</id>
    <published>2019-04-26T12:28:13.000Z</published>
    <updated>2019-04-26T13:03:34.223Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于吸顶"><a href="#关于吸顶" class="headerlink" title="关于吸顶"></a>关于吸顶</h4><blockquote><p>吸顶效果在使得用户在滑动读取数据的时候把产品需要持续展示的控件及信息一直固定在屏幕上方，以便用户操作和交互。</p></blockquote><a id="more"></a><h4 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h4><p>&emsp;&emsp;随着技术不断更新与用户审美不断提升，一些App中/浏览器中的常用交互也在对用户更加友好，在某些数据展示较多页面或者导航栏页面，为了将栏目划分，使得视图模块更加明显，吸顶效果便在此背景下孕育而生。<br>&emsp;&emsp;那么，我们如何在web端来做一个吸顶效果呢？</p><hr><h4 id="切入正题——吸顶"><a href="#切入正题——吸顶" class="headerlink" title="切入正题——吸顶"></a>切入正题——吸顶</h4><h5 id="简单效果展示"><a href="#简单效果展示" class="headerlink" title="简单效果展示"></a>简单效果展示</h5><p><img src="/images/posts/吸顶.gif" alt="简单吸顶效果" title="简单吸顶效果"></p><h5 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h5><ol><li>有了效果图，首先我们要分析一下结构：<ul><li>吸顶上方数据</li><li>需要吸顶的元素</li><li>吸顶下方数据</li></ul></li><li>接着我们逻辑走一下：(我们设吸顶元素为X)<ul><li>在页面滑动距离 &lt;= 吸顶元素距离顶端距离时，不吸顶</li><li>否则，吸顶</li></ul></li><li>有了这个大前提，继续考虑，如何做到吸顶呢？<ul><li>设置该元素的position为fixed属性</li><li>动态控制是否展示该样式</li><li>扩展：加点动画效果(这里以渐变为示例)</li></ul></li></ol><h5 id="代码及注释"><a href="#代码及注释" class="headerlink" title="代码及注释"></a>代码及注释</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;scrollFixed&quot;&gt;</span><br><span class="line">        &lt;!-- 上方数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;sTop&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(ietm, index) in 10&quot;&gt;这是吸顶上方的第&#123;&#123;index + 1&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 吸顶元素 --&gt;</span><br><span class="line">        &lt;nav class=&quot;nav&quot; id=&quot;searchBar&quot; :class=&quot;scrollFixed === true ? &apos;isFixed&apos; :&apos;&apos;&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/nav&gt;</span><br><span class="line">        &lt;!-- 下方数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;sBottom&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(ietm, index) in 30&quot;&gt;这是吸顶下方的第&#123;&#123;index + 1&#125;&#125;条数据&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                text: &apos;需要吸顶&apos;,</span><br><span class="line">                scrollFixed: false,</span><br><span class="line">                offsetTop: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            windowScroll () &#123;</span><br><span class="line">                // 滚动条顶部 距 滚动原点的高度</span><br><span class="line">                let scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">                /**</span><br><span class="line">                 * 三目运算</span><br><span class="line">                 * 两个高度比较 </span><br><span class="line">                 * 如果滑动距离 &gt; 吸顶元素到页面顶端距离  动态添加</span><br><span class="line">                 */</span><br><span class="line">                scrollTop &gt;= this.offsetTop ? (this.scrollFixed = true, this.text = &apos;已吸顶&apos;) : (this.scrollFixed = false, this.text = &apos;需要吸顶&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            // 需吸顶元素 距 离浏览器顶端的高度</span><br><span class="line">            this.offsetTop = document.querySelector(&apos;#searchBar&apos;).offsetTop;</span><br><span class="line">            // 滚动监听</span><br><span class="line">            window.addEventListener(&apos;scroll&apos;, this.windowScroll);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed () &#123;</span><br><span class="line">            // 关闭 销毁监听</span><br><span class="line">            window.removeEventListener(&apos;scroll&apos;, this.windowScroll);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line">.isFixed&#123;</span><br><span class="line">position:fixed;</span><br><span class="line">top:0;</span><br><span class="line">left: 0;</span><br><span class="line">z-index:999;</span><br><span class="line">background: #12d168;</span><br><span class="line">transition: all 1s;</span><br><span class="line">color: #7511ff;</span><br><span class="line">&#125;</span><br><span class="line">// 基本样式略</span><br><span class="line">// ......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>&emsp;&emsp;此demo在流行浏览器中运行问题不大，但是没有详测兼容性。如果要在生产上运用，务必做好各端兼容。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于吸顶&quot;&gt;&lt;a href=&quot;#关于吸顶&quot; class=&quot;headerlink&quot; title=&quot;关于吸顶&quot;&gt;&lt;/a&gt;关于吸顶&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;吸顶效果在使得用户在滑动读取数据的时候把产品需要持续展示的控件及信息一直固定在屏幕上方，以便用户操作和交互。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="吸顶" scheme="https://www.zhuxingmin.com/tags/%E5%90%B8%E9%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>v-html指令渲染出的内容如何添加样式</title>
    <link href="https://www.zhuxingmin.com/2019/04/22/v-html%E6%8C%87%E4%BB%A4%E6%B8%B2%E6%9F%93%E5%87%BA%E7%9A%84%E5%86%85%E5%AE%B9%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F/"/>
    <id>https://www.zhuxingmin.com/2019/04/22/v-html指令渲染出的内容如何添加样式/</id>
    <published>2019-04-22T12:24:20.000Z</published>
    <updated>2019-04-23T01:34:37.894Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于v-html"><a href="#关于v-html" class="headerlink" title="关于v-html"></a>关于v-html</h4><p>&emsp;&emsp;在vue使用中，指令<code>v-html</code>渲染页面经常用到，类似于jQuery的$(‘x’).html()去渲染。通过指令<code>v-html</code>渲染出来的内容还会带有原来的标签及其样式，如果需要修改或者重设其样式，应该如何去做吗？</p><a id="more"></a><h4 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h4><p>&emsp;&emsp;首先，我在style中用子级选择器去选中并修改样式，经过猛如虎的操作后，并没生效。F12打开Elements调试，发现在style里面样式根本没加载上去，没有class中也没有类名出现。除此之外，渲染非该指令元素时，所有的类名会跟有<code>[data-v-xxxxxx]</code>的东西。</p><h4 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h4><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>现给出3中方案来解决此问题：</p><ul><li><a href="#1">去掉style中的<code>scoped</code>;</a></li><li><a href="#2"><code>watch</code>监测数据变化;</a></li><li><a href="#3">深度选择器<code>&gt;&gt;&gt;</code></a></li></ul><h5 id="方案1实践"><a href="#方案1实践" class="headerlink" title="方案1实践"></a><a name="1">方案1实践</a></h5><blockquote><font color="deepskyblue">去掉style中的scoped</font></blockquote><p>&emsp;&emsp;在vue组件中，我们写style时，为了防止页面样式冲突，在每个组件中会加上<code>scoped</code>属性。经测试，去掉该属性即可渲染样式成功。但是在组件过多或者项目中大时，经常会出现页面样式冲突，因此该方法<strong><em>不建议使用</em></strong>。</p><h5 id="方案2实践"><a href="#方案2实践" class="headerlink" title="方案2实践"></a><a name="2">方案2实践</a></h5><blockquote><font color="deepskyblue">watch监测数据变化</font></blockquote><p>&emsp;&emsp;在<code>script &gt; export default</code>中,watch属性可监听v-html所绑定值的变化。如果是后台请求的数据，那么可以在watch中监听改数据变化，当数据发生改变驱动视图后，动态绑定一个class来改变子级元素样式。此方法<strong><em>有一定局限性</em></strong>。</p><h5 id="方案3实践"><a href="#方案3实践" class="headerlink" title="方案3实践"></a><a name="3">方案3实践</a></h5><blockquote><font color="deepskyblue">深度选择器 &gt;&gt;&gt;</font></blockquote><p>&emsp;&emsp;此时，深度选择器的应用则脱颖而出。深度选择器<code>&gt;&gt;&gt;</code>，可深度改变子级样式。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// ***</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.test &gt;&gt;&gt; *&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如果使用<code>scss</code>或者<code>less</code>等css扩展语言，则用<code>/deep/</code>替代：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line">.test&#123;</span><br><span class="line">/deep/ *&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><font size="2" color="gray">&emsp;&emsp;scoped属性导致css仅对当前组件生效，而html绑定渲染出的内容可以理解为是子组件的内容，一般情况下子组件不会被加上对应的属性，所以不会应用带有scoped的css。</font>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于v-html&quot;&gt;&lt;a href=&quot;#关于v-html&quot; class=&quot;headerlink&quot; title=&quot;关于v-html&quot;&gt;&lt;/a&gt;关于v-html&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在vue使用中，指令&lt;code&gt;v-html&lt;/code&gt;渲染页面经常用到，类似于jQuery的$(‘x’).html()去渲染。通过指令&lt;code&gt;v-html&lt;/code&gt;渲染出来的内容还会带有原来的标签及其样式，如果需要修改或者重设其样式，应该如何去做吗？&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="样式渲染" scheme="https://www.zhuxingmin.com/tags/%E6%A0%B7%E5%BC%8F%E6%B8%B2%E6%9F%93/"/>
    
      <category term="v-html" scheme="https://www.zhuxingmin.com/tags/v-html/"/>
    
  </entry>
  
  <entry>
    <title>vue嵌套路由</title>
    <link href="https://www.zhuxingmin.com/2019/04/20/vue%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1/"/>
    <id>https://www.zhuxingmin.com/2019/04/20/vue嵌套路由/</id>
    <published>2019-04-20T13:26:36.000Z</published>
    <updated>2019-04-22T02:10:12.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于嵌套路由"><a href="#关于嵌套路由" class="headerlink" title="关于嵌套路由"></a>关于嵌套路由</h4><p>&emsp;&emsp;在实际项目中，多个前端页面由于需求而通常由多层嵌套的组件组合而成,尤其是多导航界面。此时，路由嵌套(vue-router)的优点则表现了出来。<code>嵌套路由就是在一个被路由过来的页面下，可以继续使用路由来加载新的组件。</code>所谓嵌套，也可以理解成父子路由。</p><a id="more"></a><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>各样式导航栏切换；</li><li>标签/选项卡切换；</li></ul><hr><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>&emsp;&emsp;此处以常用布局<code>F形导航</code>当作分析案例：</p><h5 id="1-效果"><a href="#1-效果" class="headerlink" title="1.效果"></a>1.效果</h5><p><img src="/images/posts/路由嵌套.gif" alt="F形导航界面布局" title="F形导航界面布局"></p><h5 id="2-解析"><a href="#2-解析" class="headerlink" title="2.解析"></a>2.解析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/App/about/blog                       /App/about/msg    </span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| about            |                  | about            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | blog         | |  +------------&gt;  | | msg         | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure><h5 id="3-目录拆分"><a href="#3-目录拆分" class="headerlink" title="3.目录拆分"></a>3.目录拆分</h5><p>观察效果图，容易得出可将图拆分为多个组件。在主要vue中挂载<code>首页</code>和<code>关于</code>组件，然后在<code>关于</code>组件中再次挂载子路由<code>博客</code>和<code>信息</code>组件。项目中src目录拆分如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│  ├── page</span><br><span class="line">│  │  ├── index.vue// 主页组件</span><br><span class="line">│  │  ├── about.vue// 关于组件</span><br><span class="line">│  │  ├── about</span><br><span class="line">│  │  │  ├──  blog.vue// 博客子组件</span><br><span class="line">│  │  │  ├──  msg.vue// 信息子组件</span><br><span class="line">│  ├── router</span><br><span class="line">│  │  ├── index.js</span><br><span class="line">│  ├── App.vue</span><br><span class="line">│  ├── main.js</span><br></pre></td></tr></table></figure></p><h5 id="4-通用代码"><a href="#4-通用代码" class="headerlink" title="4.通用代码"></a>4.通用代码</h5><p>从目录中可以轻易的看出每个组件及所代表的模块。其中，index &amp; blog &amp; msg 三个组件均为一个带文字描述的块级元素，此处给出一个示例，不再赘述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        这是xx模块内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h5 id="5-路由管理"><a href="#5-路由管理" class="headerlink" title="5.路由管理"></a>5.路由管理</h5><p><code>router/index.js</code>进行路由管理，代码如下。此处使用懒加载模式处理。开篇已经描述，嵌套路由可以理解为父子路由，不仅如此描述，事实上我们在做路由管理也是这么处理的。<strong><em>注：在children中的path不必再添加<code>/</code>，否则会出错。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import VueRouter from &apos;vue-router&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">export default new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/index&apos;,</span><br><span class="line">            component: resolve =&gt; require([&apos;@/page/index&apos;],resolve),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/about&apos;,</span><br><span class="line">            component: resolve =&gt; require([&apos;@/page/about&apos;],resolve),</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &apos;blog&apos;,</span><br><span class="line">                    component: resolve =&gt; require([&apos;@/page/about/blog&apos;],resolve),</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &apos;msg&apos;,</span><br><span class="line">                    component: resolve =&gt; require([&apos;@/page/about/msg&apos;],resolve),</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h5 id="6-根组件配置"><a href="#6-根组件配置" class="headerlink" title="6.根组件配置"></a>6.根组件配置</h5><p><code>App.vue</code>需要挂载<code>首页</code>组件和<code>关于</code>组件。值得一提的是，由于在点击<code>关于</code>的时候，应该直接跳往第一项子级项，也就是<code>博客</code>，因此注意路由路径。此外，切记<strong><em>to:”[路径]” 中的[路径]一定要加上<code>/</code>，否则多次路由会出现路由重复而无法正确找到路由问题</em></strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">           &lt;router-link to=&quot;/index&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">           &lt;router-link to=&quot;/about/blog&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">       &lt;/header&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;router-view/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &apos;App&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line"> /*略*/</span><br><span class="line">&lt;/stylle&gt;</span><br></pre></td></tr></table></figure></p><h5 id="7-about组件配置"><a href="#7-about组件配置" class="headerlink" title="7.about组件配置"></a>7.about组件配置</h5><p>所谓嵌套，或者说父子路由，在此组件表现出来，也就是将此组件当成父组件，再次挂载两个(或多个)子组件。同样，要注意路径一定要加上<code>/</code>。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">            &lt;router-link to=&quot;/about/blog&quot;&gt;博客&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link to=&quot;/about/msg&quot;&gt;信息&lt;/router-link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;about&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped type=&quot;text/scss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line">    .about&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .left&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            border-right: 1px solid #aaa;</span><br><span class="line">            height: calc(100vh - 46px);</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            a&#123;</span><br><span class="line">                line-height: 40px;</span><br><span class="line">                text-align: center;</span><br><span class="line">                font-size: 12px;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">                color: #6260ff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .right&#123;</span><br><span class="line">            flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h5 id="8-完成"><a href="#8-完成" class="headerlink" title="8.完成"></a>8.完成</h5><p>其实步骤就这么多，不过在实际项目中还是要多加动脑灵活运用，理解嵌套路由含义及路由配置规则，一切就会变得简单起来~</p><hr><h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>&emsp;&emsp;有几点注意事项，包括上面也有提到过：</p><ul><li>子路由要写在<code>children</code>下；</li><li>router-link 中，to中的路径要加<code>/</code>，代表根路径；</li><li>每一个子路由都可以嵌套多个组件；</li><li>style中加入scoped属性，防止样式互相干扰。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于嵌套路由&quot;&gt;&lt;a href=&quot;#关于嵌套路由&quot; class=&quot;headerlink&quot; title=&quot;关于嵌套路由&quot;&gt;&lt;/a&gt;关于嵌套路由&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在实际项目中，多个前端页面由于需求而通常由多层嵌套的组件组合而成,尤其是多导航界面。此时，路由嵌套(vue-router)的优点则表现了出来。&lt;code&gt;嵌套路由就是在一个被路由过来的页面下，可以继续使用路由来加载新的组件。&lt;/code&gt;所谓嵌套，也可以理解成父子路由。&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="路由" scheme="https://www.zhuxingmin.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>axios全局拦截器配置</title>
    <link href="https://www.zhuxingmin.com/2019/04/17/axios%E5%85%A8%E5%B1%80%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/04/17/axios全局拦截器配置/</id>
    <published>2019-04-17T09:03:37.000Z</published>
    <updated>2019-04-18T03:35:14.598Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于请求拦截器"><a href="#关于请求拦截器" class="headerlink" title="关于请求拦截器"></a>关于请求拦截器</h4><p>&emsp;&emsp;项目中，我们经常遇到请求后台接口时要做后天返回的<code>code</code>码验证判断。code码通常是一个特定的数值，比如一般返回<code>200</code>作为正常请求，返回其他作为数据异常或者请求异常等。如果接口量足够大，那么每一个接口都需要做正常/异常处理。为满足统一管理，那么在全局请求拦截器便应劫而出。</p><a id="more"></a><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>统一管理</li><li>路由请求拦截 =&gt; request</li><li>路由响应拦截 =&gt; response</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="1-安装axios及qs"><a href="#1-安装axios及qs" class="headerlink" title="1.安装axios及qs"></a>1.安装axios及qs</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save-dev    //安装axios</span><br><span class="line"></span><br><span class="line">npm install qs --save-dev     //安装qs</span><br></pre></td></tr></table></figure><h5 id="2-新建一个js文件"><a href="#2-新建一个js文件" class="headerlink" title="2.新建一个js文件"></a>2.新建一个js文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── project</span><br><span class="line">│  ├── build</span><br><span class="line">│  ├── config</span><br><span class="line">│  ├── node_modules</span><br><span class="line">│  ├── src</span><br><span class="line">│  │  ├── assets</span><br><span class="line">│  │  │  ├── request.js// 我在这里新建了一个js文件来配置拦截器</span><br><span class="line">│  │  ├── components</span><br><span class="line">│  │  ├── router</span><br><span class="line">│  │  ├── App.vue</span><br><span class="line">│  │  ├── main.js</span><br><span class="line">│  ├── static</span><br><span class="line">│  ├── test</span><br><span class="line">│  ├── .babelrc</span><br><span class="line">│  ├── .editorconfig</span><br><span class="line">│  ├── .gitignore</span><br><span class="line">│  ├── .postcssrc.js</span><br><span class="line">│  ├── index.html</span><br><span class="line">│  ├── package-lock.json</span><br><span class="line">│  ├── package.json</span><br><span class="line">│  ├── README.md</span><br></pre></td></tr></table></figure><h5 id="3-js拦截器配置如下："><a href="#3-js拦截器配置如下：" class="headerlink" title="3.js拦截器配置如下："></a>3.js拦截器配置如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;//引入axios</span><br><span class="line">import qs from &apos;qs&apos;//引入qs qs可将数据转换为FormData格式</span><br><span class="line"></span><br><span class="line">// axios默认配置</span><br><span class="line">axios.defaults.timeout = 10000;   // 超时时间</span><br><span class="line">axios.defaults.baseURL = &apos;https://www.demo.com&apos;;  // 公用地址</span><br><span class="line"></span><br><span class="line">// 路由请求拦截</span><br><span class="line">// http request 拦截器</span><br><span class="line">axios.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">    // 数据格式化</span><br><span class="line">    config.data = qs.stringify(config.data);</span><br><span class="line">    // 给请求头加键值对</span><br><span class="line">    config.headers[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br><span class="line">    return config;</span><br><span class="line">&#125;, (error ) =&gt; &#123;// 错误信息</span><br><span class="line">    return Promise.reject(error.response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 路由响应拦截</span><br><span class="line">// http response 拦截器</span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    (response) =&gt; &#123;</span><br><span class="line">        if (response.data.code !== 200) &#123;</span><br><span class="line">            // 异常请求要做的事</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 正常请求要做的事</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,(error) =&gt; &#123;</span><br><span class="line">// 返回接口返回的错误信息</span><br><span class="line">        return Promise.reject(error.response)   </span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default axios;</span><br></pre></td></tr></table></figure><h5 id="4-main-js配置"><a href="#4-main-js配置" class="headerlink" title="4.main.js配置"></a>4.main.js配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 引入该配置文件</span><br><span class="line">import axios from &apos;./assets/axiosRequest&apos;</span><br><span class="line"></span><br><span class="line">// 注册到全局</span><br><span class="line">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure><h5 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 要发送的数据</span><br><span class="line">let params = &#123;</span><br><span class="line">name: &apos;AAA&apos;,</span><br><span class="line">number: &apos;10100110&apos;,</span><br><span class="line">age: &apos;18&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// post请求为例  url不用写公共部分，直接写后面即可</span><br><span class="line">this.$axios.post(&apos;/test&apos;,params</span><br><span class="line">).then((res) =&gt; &#123;</span><br><span class="line">debugger;</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">debugger;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;http全局拦截器配置完毕，不仅可在response中统一管理返回状态，而且可在request中动态添加request headers，在实际项目中有很大的运用空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于请求拦截器&quot;&gt;&lt;a href=&quot;#关于请求拦截器&quot; class=&quot;headerlink&quot; title=&quot;关于请求拦截器&quot;&gt;&lt;/a&gt;关于请求拦截器&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;项目中，我们经常遇到请求后台接口时要做后天返回的&lt;code&gt;code&lt;/code&gt;码验证判断。code码通常是一个特定的数值，比如一般返回&lt;code&gt;200&lt;/code&gt;作为正常请求，返回其他作为数据异常或者请求异常等。如果接口量足够大，那么每一个接口都需要做正常/异常处理。为满足统一管理，那么在全局请求拦截器便应劫而出。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue之data中数组改变如何驱动视图</title>
    <link href="https://www.zhuxingmin.com/2019/04/09/vue%E4%B9%8Bdata%E4%B8%AD%E6%95%B0%E7%BB%84%E6%94%B9%E5%8F%98%E5%A6%82%E4%BD%95%E9%A9%B1%E5%8A%A8%E8%A7%86%E5%9B%BE/"/>
    <id>https://www.zhuxingmin.com/2019/04/09/vue之data中数组改变如何驱动视图/</id>
    <published>2019-04-09T08:06:36.000Z</published>
    <updated>2019-04-09T09:20:53.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;熟悉vue的小伙伴们都知道vue属于<code>MVVM</code>框架，数据可以驱动视图。一般来说，vue中的data发生变化，视图中绑定的data值也会随之发生变化。然而还是有特殊情况的，例如关于数组|对象的某些操作。<br>&emsp;&emsp;根据官方文档定义：</p><blockquote><p><strong>如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。</strong><br><a id="more"></a></p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>&emsp;&emsp;例：data中有一对象数组<code>arr</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(item, index) in arr&quot;&gt;</span><br><span class="line">&#123;&#123; index + 1 &#125;&#125; - &#123;&#123; item &#125;&#125; </span><br><span class="line">&lt;button @click=&quot;change(index)&quot;&gt;change&lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">data: &#123;</span><br><span class="line">arr: [</span><br><span class="line">&#123;</span><br><span class="line">id: 0,</span><br><span class="line">son: [</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son1&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son2&apos;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">id: 1,</span><br><span class="line">son: [</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son1&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son2&apos;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在将数据绑定到视图中以后，点击change将当前点击的数组子项添加了一个id：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">methods: &#123;</span><br><span class="line">change (index) &#123;</span><br><span class="line">this.arr[index].son.forEach((item, index) =&gt; &#123;</span><br><span class="line">item.id = index + 1;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;点击之后，data中的arr数组发生了改变，按理说即将出现的效果应是数据更新后的视图，但是惊讶的发现视图并没有改变。那么如何解决此问题呢？</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>&emsp;&emsp;使用<font color="red" size="3">Vue.set</font>可得到解决。</p><blockquote><p>this.$set(this.data, index, obj)<br>// this.data: 要改变的数据<br>// index: 下标<br>// obj: 修改后的对象 </p></blockquote><p>&emsp;&emsp;如刚才所举之例，解决如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">change (index) &#123;</span><br><span class="line">this.arr[index].son.forEach((item, index) =&gt; &#123;</span><br><span class="line">item.id = index + 1;</span><br><span class="line">this.$set(this.arr[index].son, index, item);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时，点击<code>change</code>按钮，则视图实时改变。<br>&emsp;&emsp;问题得以解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;熟悉vue的小伙伴们都知道vue属于&lt;code&gt;MVVM&lt;/code&gt;框架，数据可以驱动视图。一般来说，vue中的data发生变化，视图中绑定的data值也会随之发生变化。然而还是有特殊情况的，例如关于数组|对象的某些操作。&lt;br&gt;&amp;emsp;&amp;emsp;根据官方文档定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue项目搭建及基本配置</title>
    <link href="https://www.zhuxingmin.com/2019/03/27/vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/03/27/vue项目搭建及基本配置/</id>
    <published>2019-03-27T09:02:16.000Z</published>
    <updated>2019-04-16T05:59:33.648Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><font size="2" color="#aaa">注：适用于windows系统</font><br><strong>本文讲述要点：</strong></p><ol><li>vue-cli项目搭建基本环境配置；</li><li>常用插件描述及分享；</li><li>项目运行、调试及打包；</li><li>项目配置及优化；</li></ol><a id="more"></a><p><strong>适用人群：</strong></p><ol><li>vue小白；</li><li>有html\css\js编程基础；</li><li>vue项目整体优化（打包后压缩空间）；</li></ol><hr><h4 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h4><p><font size="2" color="#aaa">准备阶段会将项目环境配置完毕,包含<code>node</code>、<code>npm</code>、<code>webpack</code>和<code>vue-cli</code>。已经完成的小伙伴可以跳过此步骤看第二阶段。</font></p><h5 id="1-安装node及npm"><a href="#1-安装node及npm" class="headerlink" title="1.安装node及npm"></a>1.安装<code>node</code>及<code>npm</code></h5><p>&emsp;&emsp;从node.js中文网下载并安装<a href="http://nodejs.cn/download/" title="nodejs" target="_blank" rel="noopener">nodejs</a>点击下载<code>.msi</code>的32/64位安装包，然后双击本地文件一路点击<code>下一步</code>完成<code>nodeJs</code>的安装即可。<font size="2" color="#ff6666">注意安装8.10以上版本哟!</font><br>安装完成后，打开命令行工具，输入<code>node -v</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;node -v</span><br><span class="line">v8.12.0//版本号</span><br></pre></td></tr></table></figure></p><p>顺便在此处继续输入<code>npm -v</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;npm -v</span><br><span class="line">6.4.1//版本号</span><br></pre></td></tr></table></figure></p><p>你会惊讶的发现<code>npm</code>已经神奇的安装完成了。这是因为<code>npm</code>在安装<code>nodeJs</code>的时候顺带已经装好了。</p><h5 id="2-安装webpack"><a href="#2-安装webpack" class="headerlink" title="2.安装webpack"></a>2.安装<code>webpack</code></h5><p><font size="2" color="blue">注：以下所有<code>npm</code>操作，由于国内速度较慢甚至出现失败，可用淘宝镜像<code>cnpm</code>替代。下列所有<code>npm</code>命令，用<code>cnpm</code>替代即可。方式如下：</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;继续刚才的命令行工具，输入<code>npm install webpack -g</code>，<code>-g代表全局安装</code>。安装完成后继续输入<code>webpack -v</code>，出现相应版本号，代表安装成功。<br>我在安装时出现如下状况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">One CLI for webpack must be installed. These are recommended choices, delivered as separate packages:</span><br><span class="line"> - webpack-cli (https://github.com/webpack/webpack-cli)</span><br><span class="line">   The original webpack full-featured CLI.</span><br><span class="line">We will use &quot;npm&quot; to install the CLI via &quot;npm install -D&quot;.</span><br><span class="line">Do you want to install &apos;webpack-cli&apos; (yes/no):</span><br></pre></td></tr></table></figure></p><p>解决方案是：输入<code>npm install  webpack-cli -g</code>。安装成功后执行<code>webpack -v</code>查看版本号，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;npm install  webpack-cli -g</span><br><span class="line">*</span><br><span class="line">*  安</span><br><span class="line">*  装省</span><br><span class="line">*  过略</span><br><span class="line">*  程</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">E:\&gt;webpack -v</span><br><span class="line">4.29.6//版本号</span><br></pre></td></tr></table></figure></p><h5 id="3-安装vue脚手架vue-cli"><a href="#3-安装vue脚手架vue-cli" class="headerlink" title="3.安装vue脚手架vue-cli"></a>3.安装vue脚手架<code>vue-cli</code></h5><p>&emsp;&emsp;继续上面的命令行工具。接下来就是安装配置今天的主角了，vue脚手架工具<code>vue-cli</code>。方法一样，键入命令行<code>npm install vue-cli -g</code>全局安装，然后输入<code>vue -V</code><font size="1" color="red">注：是大写的<code>-V</code></font>检测是否安装成功。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;vue -V</span><br><span class="line">2.9.6//版本号</span><br></pre></td></tr></table></figure></p><h5 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h5><p>&emsp;&emsp;至此，我们已经完成了准备阶段的工作。主要完成的是<code>node</code>、<code>npm</code>、<code>webpack</code>和<code>vue-cli</code>四个工具的环境配置。目前为止，我们在命令行工具的总结应该是如下：<font color="#aaa" size="1">版本号不必一致</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;node -v</span><br><span class="line">v8.12.0</span><br><span class="line"></span><br><span class="line">E:\&gt;npm -v</span><br><span class="line">6.4.1</span><br><span class="line"></span><br><span class="line">E:\&gt;webpack -v</span><br><span class="line">4.29.6</span><br><span class="line"></span><br><span class="line">E:\&gt;vue -V</span><br><span class="line">2.9.6</span><br></pre></td></tr></table></figure></p><hr><h4 id="二、项目搭建"><a href="#二、项目搭建" class="headerlink" title="二、项目搭建"></a>二、项目搭建</h4><p><font size="1" color="#aaa">本阶段讲述<code>vue-cli</code>项目搭建及相关配置，包含<code>创建项目</code>、<code>修改基础配置</code>、<code>项目运行</code>三个模块，可自行选择阅读或跳过。</font></p><h5 id="1-项目创建"><a href="#1-项目创建" class="headerlink" title="1.项目创建"></a>1.项目创建</h5><p>&emsp;&emsp;建立一个空文件夹，最好以纯英文命名。例，我项目路径为<code>E&gt;stydy</code>。打开命令行工具，<code>cd</code>到该文件目录下，执行<code>vue init webpack name</code>，<code>name</code>可替换为你要创建的项目名。回车之后，会要求输入一系列的信息，大部分可直接回车略过，注释如下，没有注释的回车略过即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy&gt;vue init webpack blog</span><br><span class="line"></span><br><span class="line">? Project name blog//项目名</span><br><span class="line">? Project description A Vue.js project//项目简介</span><br><span class="line">? Author xuan0146 &lt;zxm0146@163.com&gt;//作者</span><br><span class="line">? Vue build runtime</span><br><span class="line">? Install vue-router? Yes//使用项目路由</span><br><span class="line">? Use ESLint to lint your code? No//不开启ESLint语法检测 注意选No</span><br><span class="line">? Set up unit tests Yes</span><br><span class="line">? Pick a test runner jest</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) npm</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;blog&quot;.</span><br></pre></td></tr></table></figure></p><p>最后一步选择<code>npm</code>或者<code>yarn</code>则会自动执行<code>npm install</code>安装项目所有依赖包。不选择的话，自己安装也是同样效果。安装步骤为：</p><ol><li><code>cd</code>到项目路径；</li><li>执行<code>npm install</code>；</li><li>等待完成安装即可;</li></ol><h5 id="2-项目介绍"><a href="#2-项目介绍" class="headerlink" title="2.项目介绍"></a>2.项目介绍</h5><p>&emsp;&emsp;<code>cd</code>到该项目，或者打开文件夹，项目目录及备注如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">├── project//项目目录</span><br><span class="line">│  ├── build//webpack相关配置</span><br><span class="line">│  │  ├── build.js//生产环境构建</span><br><span class="line">│  │  ├── check-versions.js//版本检查</span><br><span class="line">│  │  ├── utils.js//构建相关工具</span><br><span class="line">│  │  ├── vue-loader.conf.js//处理vue文件的配置信息</span><br><span class="line">│  │  ├── webpack.base.conf.js//webpack基础配置</span><br><span class="line">│  │  ├── webpack.dev.conf.js//webpack开发环境配置</span><br><span class="line">│  │  ├── webpack.prod.conf.js//webpack生产环境配置</span><br><span class="line">│  ├── config//vue基本配置</span><br><span class="line">│  │  ├── dev.env.js//开发环境配置</span><br><span class="line">│  │  ├── index.js//主要配置</span><br><span class="line">│  │  ├── prod.env.js//生产环境配置</span><br><span class="line">│  │  ├── test.env.js//测试环境配置</span><br><span class="line">│  ├── node_modules//依赖包 忽略</span><br><span class="line">│  ├── src//项目核心文件</span><br><span class="line">│  │  ├── assets//静态资源 如公用js\css\image\媒体资源等</span><br><span class="line">│  │  ├── components//公用组件</span><br><span class="line">│  │  ├── router//项目路由</span><br><span class="line">│  │  │  ├── index.js//路由控制文件</span><br><span class="line">│  │  ├── App.vue//根组件</span><br><span class="line">│  │  ├── main.js//入口文件</span><br><span class="line">│  ├── static//静态资源</span><br><span class="line">│  ├── test//模拟测试</span><br><span class="line">│  ├── .babelrc//babel参数</span><br><span class="line">│  ├── .editorconfig//代码格式</span><br><span class="line">│  ├── .gitignore//git上传相关配置</span><br><span class="line">│  ├── .postcssrc.js//css相关工具</span><br><span class="line">│  ├── index.html//主页</span><br><span class="line">│  ├── package-lock.json//记录当前状态下实际安装的各个npm package的具体来源和版本号</span><br><span class="line">│  ├── package.json//项目信息</span><br><span class="line">│  ├── README.md//项目说明</span><br></pre></td></tr></table></figure></p><h5 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h5><p>&emsp;&emsp;命令行工具键入<code>npm run dev</code>，等待片刻，直到提示如下，则表示启动成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run dev</span><br><span class="line"></span><br><span class="line">* * * * * * * *</span><br><span class="line">* 启动过程忽略 *</span><br><span class="line">* * * * * * * *</span><br><span class="line"></span><br><span class="line">Your application is running here: http://localhost:8080</span><br></pre></td></tr></table></figure></p><p>然后复制<code>http://localhost:8080</code>，在浏览器地址栏输入该url，进入如下页面：<br><img src="/images/posts/vue运行成功.png" alt="vue运行成功" title="vue运行成功"></p><h5 id="4-移动端调试"><a href="#4-移动端调试" class="headerlink" title="4.移动端调试"></a>4.移动端调试</h5><p>&emsp;&emsp;有的人可能要问了，如果我做移动端项目，不能用localhost去访问了吧？当然不能，只需要稍微改一下配置即可。当然，端口号8080一样可以修改，不过一般不做变动。<br>&emsp;&emsp;用代码工具（自己习惯的IDE）打开本项目。首先查看本机电脑ip,键入命令<code>ipconfig</code>，查看如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;ipconfig</span><br><span class="line">* *</span><br><span class="line">* *</span><br><span class="line">以太网适配器 以太网:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::da7:800d:d148:e06%10</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.200.127</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : fe80::48:5112:9520:564f%10</span><br><span class="line">                                       192.168.200.1</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;其中，<code>IPv4 地址</code>即为我们所需要的ip。在<code>项目/config/index.js</code>中，找到<code>host: &#39;localhost&#39;</code>，改成<code>IPv4 地址</code>，例:我的地址为<code>192.168.200.127</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    host: &apos;192.168.200.127&apos;, //localhost改为ip</span><br><span class="line">    port: 8080,//端口号</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后，我们重新启动项目。注意上次项目启动后，由于修改了配置文件，因此需要停止项目然后重新启动。停止项目的命令为<code>Ctrl + C</code>。重启项目后，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run dev</span><br><span class="line">* * * * * * * *</span><br><span class="line">* 启 动 过 程 *</span><br><span class="line">* * * * * * * *</span><br><span class="line">Your application is running here: http://192.168.200.127:8080</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<font size="2" color="#aaa">注意要在同一网络下</font><br>&emsp;&emsp;最后，我们复制该地址，即可在所有端<code>PC</code>、<code>手机</code>、<code>pad等</code>查看该项目啦~</p><hr><h4 id="三、常用插件"><a href="#三、常用插件" class="headerlink" title="三、常用插件"></a>三、常用插件</h4><p><font size="1" color="#aaa">本章节记录一些vue常用插件，如<code>axios</code>、<code>echarts</code>、<code>sass/scss</code>、<code>lib-flexible</code>等等。所有命令均可用<code>cnpm</code>替代。如不需要可直接跳过。</font></p><h5 id="1-sacc-scss"><a href="#1-sacc-scss" class="headerlink" title="1.sacc/scss"></a>1.sacc/scss</h5><p><strong>用途</strong>：可用<code>sass/scss</code>进行css书写代码。命令行工具依次键入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --save-dev</span><br><span class="line">npm install sass-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>安装完成后，<code>.vue</code>里的<code>style</code>里添加<code>lang=&quot;scss&quot;</code>来指定语言，即可用<code>sass/scss</code>编写css代码。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h5 id="2-axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h5><p><strong>用途</strong>：平时前后端交互使用<code>Ajax</code>，在vue官方，给出<code>vue-resource</code>和<code>axios</code>的作为<code>ajax</code>的替代。在此处使用vue官方推荐首选的<code>axios</code>作为案例讲述。</p><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure></li><li><p>全局引入<br>在<code>项目/src/main.js</code>中引入如下代码，然后随意走个请求，发现……报错？并且在页面F12控制台<code>Newwork&gt;Headers</code>里面发现数据并没有Form Data形式提交，如何处理呢？见下一步解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br></pre></td></tr></table></figure></li><li><p>解决数据格式问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//完整请求代码  post为例</span><br><span class="line">this.$axios.post(&apos;url&apos;, &#123;//路径</span><br><span class="line">  key1: &apos;value&apos;,//参数</span><br><span class="line">  key2: &apos;value&apos;//参数</span><br><span class="line">&#125;, </span><br><span class="line"></span><br><span class="line">/* *</span><br><span class="line">* 添加如下代码</span><br><span class="line">* * * * * * start * * * * * </span><br><span class="line">&#123;</span><br><span class="line">  transformRequest: [function (data) &#123;</span><br><span class="line">    let ret = &apos;&apos;;</span><br><span class="line">    for (let it in data) &#123;</span><br><span class="line">  ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* * * * * * end * * * * *</span><br><span class="line"></span><br><span class="line">).then((response) =&gt; &#123;//返回数据</span><br><span class="line">  console.log(response)</span><br><span class="line">&#125;).catch((error) =&gt; &#123;//请求异常捕捉</span><br><span class="line">  console.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-axios解决方案"><a href="#3-axios解决方案" class="headerlink" title="3.axios解决方案"></a>3.axios解决方案</h5><p>&emsp;&emsp;另外一个axios数据格式问题的解决方案。 <code>重磅推荐★★★★★</code>此方案不仅解决数据格式问题，还顺便解决了跨域问题。第一步当然还是安装<code>axios</code>，同上一步。然后，安装<code>qs</code>，命令行工具键入<code>npm install qs --save-dev</code>。然后在<code>项目/src/main.js</code>中配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import qs from &apos;qs&apos;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line">Vue.prototype.$qs = qs;</span><br></pre></td></tr></table></figure></p><p>然后在<code>项目/config/index.js</code>中，找到<code>proxyTable</code>，配置及说明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  &apos;/api&apos;: &#123;</span><br><span class="line">    //设置url公用部分</span><br><span class="line">    target: &apos;http://192.168.1.100:8080/&apos;,</span><br><span class="line">    changeOrigin: true,   // 如果接口跨域，需要进行这个参数配置</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/api&apos;: &apos;&apos;      //这里理解成用‘/api’代替target里面的地址</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>配置完成之后，在<code>.vue</code>文件中，请求用例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//参数</span><br><span class="line">let params = this.$qs.stringify(&#123;</span><br><span class="line">  key: value</span><br><span class="line">&#125;);</span><br><span class="line">//请求</span><br><span class="line">this.$axios.post(&apos;/api/test&apos;, params).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后，键入命令<code>npm run dev</code>，发现请求数据格式已经成为<code>Form Data</code>的格式，并且即使后端不处理跨域问题，也依然正常可用。原因是<code>proxy</code>作为中间层，先将数据请求回本地，此过程是中间层node请求后台，不存在跨域。然后请求过来的数据放在本地，前端再去请求这个数据，就可以解决跨域问题了。</p><h5 id="4-echarts可视化"><a href="#4-echarts可视化" class="headerlink" title="4.echarts可视化"></a>4.echarts可视化</h5><p>&emsp;&emsp;如今相信大家不少项目需要用到数据可视化吧？各种统计图表、炫酷可视化效果等等，都需要一个不错的插件去支撑，比如<code>D3</code>、<code>AnyChart</code>、<code>echarts</code>、<code>HighCharts</code>等等。本案例用百度的<code>echarts</code>作为案例讲解。</p><ul><li>安装依赖<br>惯例，先装依赖。命令行工具执行<code>npm install echarts --save-dev</code>。</li><li><p>全局配置<br>安装完成后，全局引入。引入方法：进入<code>项目/src/main.js</code>，如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import echarts from &apos;echarts&apos;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure></li><li><p>使用<br>在<code>***.vue</code>组件中即可正常使用。我在此处用<code>Hello.vue</code>写示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//template</span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//script</span><br><span class="line">let myChart = this.$echarts.init(document.getElementById(&apos;demo&apos;)); //初始化</span><br><span class="line">//myChart.clear();//根据需求配置</span><br><span class="line">myChart.setOption(&#123; // 图表配置</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: &apos;category&apos;,</span><br><span class="line">    data: [&apos;Mon&apos;, &apos;Tue&apos;, &apos;Wed&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;]</span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;</span><br><span class="line">    type: &apos;value&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  series: [&#123;</span><br><span class="line">    data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">    type: &apos;line&apos;,</span><br><span class="line">    smooth: true</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//style</span><br><span class="line">#demo&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果图<br><img src="/images/posts/echartsDemo.png" alt="echarts效果图" title="echarts效果图"></p></li><li>按需引入<br>试过之后会发现echarts的包很大，会导致打包之后文件过大，因此如果不是刚需的情况下，建议按需引入来完成页面，会节省许多资源及开销。首先，将刚才<code>项目/src/main.js</code>中的两行代码注释掉。接下来，依然以<code>Hello.vue</code>举例，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//template &amp;&amp; style 不作变动</span><br><span class="line"></span><br><span class="line">//script</span><br><span class="line">const echarts = require(&apos;echarts/lib/echarts&apos;);//基本模板</span><br><span class="line">require(&apos;echarts/lib/chart/line&apos;);//折线图组件</span><br><span class="line">require(&apos;echarts/lib/component/title&apos;);//标题组件</span><br><span class="line"></span><br><span class="line"> // 初始化实例</span><br><span class="line">let myChart = echarts.init(document.getElementById(&apos;demo&apos;));</span><br><span class="line">// 图表配置</span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">  title: &#123; text: &apos;引入title组件可使用标题&apos; &#125;,</span><br><span class="line">  * * * * * * * *</span><br><span class="line">  * 别的配置不变 *</span><br><span class="line">  * * * * * * * *</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-lib-flexible-px2rem-loader"><a href="#5-lib-flexible-px2rem-loader" class="headerlink" title="5.lib-flexible | px2rem-loader"></a>5.lib-flexible | px2rem-loader</h5><p>&emsp;&emsp;lib-flexible作用在于写页面的时候实现自适应效果，包括文图排本等。需要配合<code>px2rem-loader</code>使用。步骤如下：</p><ul><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible --save-dev</span><br><span class="line"></span><br><span class="line">npm install px2rem-loader --save-dev</span><br></pre></td></tr></table></figure></li><li><p>引入<br><code>项目/src/main.js</code>中做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;lib-flexible</span><br></pre></td></tr></table></figure></li><li><p>主页添加视口配置<br><code>项目/index.html</code>中的<code>head</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>px2rem配置<br><code>项目/build/utils.js</code>中如下配置，然后重启项目即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//自适应字体配置</span><br><span class="line">const px2remLoader = &#123;</span><br><span class="line">  loader: &apos;px2rem-loader&apos;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    remUnit: 37.5   //设计稿的宽度除以 10，现阶段一般设计稿的宽度都为750px。如果基于iPhone5设计则为32.0(320 / 10 = 32)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function generateLoaders (loader, loaderOptions) &#123;</span><br><span class="line">  const loaders = options.usePostCSS ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]</span><br><span class="line"></span><br><span class="line">  * * *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更多关于<strong><em>px2rem</em></strong>的介绍请移步<strong><a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">官网</a></strong></p></li></ul><hr><h4 id="四、项目打包"><a href="#四、项目打包" class="headerlink" title="四、项目打包"></a>四、项目打包</h4><p><font size="1" color="#aaa">本章节介绍<code>打包</code>以及去除打包后资源中的<code>.map</code>文件。</font><br>开发完成后，怎么打包到线上呢？emm…this is a problem.</p><h5 id="1-打包"><a href="#1-打包" class="headerlink" title="1.打包"></a>1.打包</h5><p>命令行工具<code>cd</code>到该项目下，执行<code>npm run build</code>来构建项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                                  Asset       Size  Chunks                    Chunk Names</span><br><span class="line">               static/js/vendor.38756a8637fc194013f9.js     442 kB       0  [emitted]  [big]  vendor</span><br><span class="line">                  static/js/app.0b5326236ed4caddb252.js     1.1 kB       1  [emitted]         app</span><br><span class="line">             static/js/manifest.2ae2e69a05c33dfc65f8.js  857 bytes       2  [emitted]         manifest</span><br><span class="line">    static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css  164 bytes       1  [emitted]         app</span><br><span class="line">static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css.map  348 bytes          [emitted]</span><br><span class="line">           static/js/vendor.38756a8637fc194013f9.js.map    2.38 MB       0  [emitted]         vendor</span><br><span class="line">              static/js/app.0b5326236ed4caddb252.js.map    8.47 kB       1  [emitted]         app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js.map    4.97 kB       2  [emitted]         manifest</span><br><span class="line">                                             index.html  571 bytes          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></p><h5 id="2-位置"><a href="#2-位置" class="headerlink" title="2.位置"></a>2.位置</h5><p>打包完成后，去哪儿了呢？然后会发现在项目路径下，出现了一个<code>dist</code>的文件夹，这里面就是所谓的<strong><em> 包 </em></strong>了。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── project</span><br><span class="line">│  ├── build</span><br><span class="line">│  ├── config</span><br><span class="line">│  ├── dist// 包</span><br><span class="line">│  │  ├── static// 压缩后的资源</span><br><span class="line">│  │  ├── index.html// 主页</span><br><span class="line">│  ├── node_modules</span><br><span class="line">│  ├── src</span><br><span class="line">│  ├── static</span><br><span class="line">│  ├── test</span><br><span class="line">│  ├── .babelrc</span><br><span class="line">│  ├── .editorconfig</span><br><span class="line">│  ├── .gitignore</span><br><span class="line">│  ├── .postcssrc.js</span><br><span class="line">│  ├── index.html</span><br><span class="line">│  ├── package-lock.json</span><br><span class="line">│  ├── package.json</span><br><span class="line">│  ├── README.md</span><br></pre></td></tr></table></figure></p><h5 id="3-问题-amp-解决"><a href="#3-问题-amp-解决" class="headerlink" title="3.问题&amp;解决"></a>3.问题&amp;解决</h5><p>细心的你可能发现了，<code>dist/static/css(或js)</code>里面，每个css文件和js文件下有一个同名的<code>.map</code>文件，非常占空间，那它是做什么的呢？又怎么消除呢？</p><ul><li>作用<br>查过资料的小伙伴知道了，<code>.map</code>文件的作用就是：<strong>项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。</strong></li><li><p>如何解决<br>那么该如何处理这些文件呢？进入<code>项目/config/index.js</code>，定位到<code>productionSourceMap</code>，将其值改为<code>false</code>即可。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">productionSourceMap: false,</span><br></pre></td></tr></table></figure></li><li><p>重新打包验证<br>在命令行工具重新执行<code>npm run build</code>，发现<code>.map</code>文件已经消失，问题解决。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                              Asset       Size  Chunks                    Chunk Names</span><br><span class="line">           static/js/vendor.38756a8637fc194013f9.js     442 kB       0  [emitted]  [big]  vendor</span><br><span class="line">              static/js/app.3c96ecd23cc6dc073a3e.js    1.05 kB       1  [emitted]         app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js  799 bytes       2  [emitted]         manifest</span><br><span class="line">static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css   95 bytes       1  [emitted]         app</span><br><span class="line">                                         index.html  571 bytes          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="五、包优化"><a href="#五、包优化" class="headerlink" title="五、包优化"></a>五、包优化</h4><p>&emsp;&emsp;在项目逐渐壮大之后，虽然说上面已经讲述过了如何去除<code>.map</code>文件，但是其中许多<code>.js</code>文件的体积也不容小觑。尤其是发布到线上以后，某些css/js单个文件体积极可能超上兆的大小，如果项目服务器带宽不够，但是页面迸发量不低的话，分分钟就可能挂掉。有没有什么方法能进一步将包优化呢？</p><h5 id="1-gzip打包压缩"><a href="#1-gzip打包压缩" class="headerlink" title="1.gzip打包压缩"></a>1.gzip打包压缩</h5><ul><li><p>安装gzip<br>惯例，打开命令行工具，安装<code>gzip</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install compression-webpack-plugin@1.1.11 --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置<br><code>项目/config/index.js</code>中，定位到<code>productionGzip</code>，改为<code>true</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">productionGzip: true,</span><br></pre></td></tr></table></figure></li><li><p>重新打包<br><code>npm run build</code>走起，会发现打包的文件中多了同名的<code>.gz</code>文件，体积大概压缩了2/3，很棒的体验。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                              Asset       Size  Chunks                    Chunk Names</span><br><span class="line">           static/js/vendor.38756a8637fc194013f9.js     442 kB       0  [emitted]  [big]  vendor</span><br><span class="line">              static/js/app.3c96ecd23cc6dc073a3e.js    1.05 kB       1  [emitted]         app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js  799 bytes       2  [emitted]         manifest</span><br><span class="line">static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css   95 bytes       1  [emitted]         app</span><br><span class="line">                                         index.html  571 bytes          [emitted]</span><br><span class="line">        static/js/vendor.38756a8637fc194013f9.js.gz     155 kB          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></li><li><p>nginx配置<br>虽然很给力的节省了许多资源，但是需要运维配合，在<code>gninx.conf</code>配置文件中做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http &#123;  </span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_disable &quot;msie6&quot;; </span><br><span class="line">  gzip_vary on; </span><br><span class="line">  gzip_proxied any;</span><br><span class="line">  gzip_comp_level 8;  //压缩级别</span><br><span class="line">  gzip_buffers 16 8k;</span><br><span class="line">  #gzip_http_version 1.1;</span><br><span class="line">  gzip_min_length 100; //不压缩临界值</span><br><span class="line">  gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-采用cdn加速"><a href="#2-采用cdn加速" class="headerlink" title="2.采用cdn加速"></a>2.采用cdn加速</h5><p>&emsp;&emsp;顾名思义，即将一些比较大的插件放在第三方服务器上去加载，这样不仅快很多，也能更加节约自己的服务器资源及宽带资源。我们一般选用<code>unpkg</code>或者<code>BootCDN</code>来作为第三方。在此处我们使用<code>BootCDN</code>来作为第三方加速使用。想了解更多相关知识请点击<strong><a href="https://unpkg.com" target="_blank" rel="noopener">unpkg</a></strong> <strong><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></strong>。</p><ul><li>查找包<br>打开<strong><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></strong>，在搜索栏搜索想要的第三方资源。如，我想要替换的是<code>echarts</code>、<code>Vue</code>、<code>axios</code>，则依次搜索<code>echarts</code>…，然后查找我想要的版本，然后<code>复制&lt;script&gt;标签</code>。</li><li><p>插入<br>在<code>项目/index.html</code>中将标签插入，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">//插入在这里</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.20/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/echarts/4.2.1-rc1/echarts-en.common.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>webpack配置<br>打开<code>项目/build/webpack.base.conf.js</code>中，添加<code>externals</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, &apos;../&apos;),</span><br><span class="line">  //..</span><br><span class="line">  externals:&#123;</span><br><span class="line">    &apos;vue&apos;: &apos;Vue&apos;,</span><br><span class="line">    &apos;vue-router&apos;: &apos;VueRouter&apos;,</span><br><span class="line">    &apos;echarts&apos;:&apos;echarts&apos;,</span><br><span class="line">    &apos;axios&apos;:&apos;axios&apos;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main配置<br>打开<code>项目/src/main.js</code>，将<code>Vue</code>等注释掉即可。不注释也可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// import Vue from &apos;vue&apos;</span><br></pre></td></tr></table></figure></li><li><p>打包<br>最后，见证奇迹的时刻就要到了~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                              Asset       Size  Chunks             Chunk Names</span><br><span class="line">           static/js/vendor.1f9d0533037be66c61cf.js    12.3 kB       0  [emitted]  vendor</span><br><span class="line">              static/js/app.912fd568ff845fde7c09.js    1.36 kB       1  [emitted]  app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js  799 bytes       2  [emitted]  manifest</span><br><span class="line">static/css/app.edc64bd802cdc531977a30fcc8a9d6e1.css   62 bytes       1  [emitted]  app</span><br><span class="line">                                         index.html  876 bytes          [emitted]</span><br><span class="line">        static/js/vendor.1f9d0533037be66c61cf.js.gz    4.62 kB          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></li><li><p>搞定<br>上次打包，<code>vendor</code>大小为<strong>442kB</strong>，本次打包，疯狂缩小至<strong>12.3kB</strong>。神不神奇~厉不厉害~</p></li></ul><hr><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>&emsp;&emsp;到这里，vue项目从环境配置、项目搭建，到结构介绍、常用插件依赖安装使用做了比较详细的介绍，最后将项目优化也做了一定的补充。<br>&emsp;&emsp;<font color="deepskyblue">学而时习之，温故而知新。</font>至此，以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&lt;font size=&quot;2&quot; color=&quot;#aaa&quot;&gt;注：适用于windows系统&lt;/font&gt;&lt;br&gt;&lt;strong&gt;本文讲述要点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vue-cli项目搭建基本环境配置；&lt;/li&gt;
&lt;li&gt;常用插件描述及分享；&lt;/li&gt;
&lt;li&gt;项目运行、调试及打包；&lt;/li&gt;
&lt;li&gt;项目配置及优化；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://www.zhuxingmin.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>《面纱》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/03/25/%E3%80%8A%E9%9D%A2%E7%BA%B1%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/03/25/《面纱》随笔/</id>
    <published>2019-03-25T02:28:20.000Z</published>
    <updated>2019-04-03T09:01:48.492Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><font color="#6B92A3" size="5">面纱</font>  <font color="#aaaaaa">（英国毛姆创作长篇小说）</font><br><img src="/images/posts/面纱.png" alt="面纱" title="面纱"><br><a id="more"></a></p><blockquote><p>&emsp;&emsp;《面纱》是英国作家威廉·萨默塞特·毛姆创作的一部长篇小说，首次出版于1925年。<br>&emsp;&emsp;小说的故事发生在英国的殖民地香港和中国内陆一个叫“湄潭府”的地方。女主人公凯蒂·费恩因为和香港助理布政司查理通奸，被丈夫瓦尔特（香港政府的细菌学家）发现后胁迫她去了霍乱横行的湄潭府，最终瓦尔特不幸染病死去，凯蒂回到香港，重投查理怀抱后羞愧不已，最终回到英国和父亲和解，并和父亲同往巴哈马群岛生活。<br>&emsp;&emsp;从《面纱》一书中，读者能看到一个表面漠然中立的叙事者背后的模糊性和矛盾性：作为帝国叙事的一分子，作者的面纱之下隐藏着东方主义的政治文化观；作为一个关注人性的个体作家，他的面纱之下隐藏着他对爱的怀疑和渴求、对人性的嘲讽和宽容。</p></blockquote><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>&emsp;&emsp;女主人公凯蒂是生活于伦敦名利场的一位富家小姐，她容貌娇美，但精神空虚；她向往爱情，但爱慕虚荣；她待字闺中，但处处受到母亲的责备与“逼婚”。面对这种种“危机”，她决定给自己的爱情来一次“历险”：匆匆嫁给了性格孤僻、沉默寡言但却深爱着她的医生瓦尔特，并随其来到了英国的殖民地——香港。冲动的历险为其婚后的出轨埋下了伏笔。婚前，凯蒂对幸福美满的生活充满了憧憬，但丈夫的刻板严肃、疯狂工作和乏味无趣，使她顿觉寂寞、孤独和失落，不久就被花言巧语、生性多情的有妇之夫查理·唐森俘获，坠入婚外情而迷失自我。奸情败露之后，丈夫的疯狂报复、情人的无情冷落和自己的无限悔恨使凯蒂再次陷入了人生的危机。无望的她决心再次历险：陪丈夫奔赴霍乱肆虐的偏远山村——湄潭府。<br>&emsp;&emsp;在湄潭府，凯蒂经历了绝境下的自省，看清了查理的虚伪，体验了修女的博爱、无私以及对信仰的坚定，得到了宗教与道德的救赎，亲历了丈夫的死亡，彻悟了他的博爱与爱情的狭隘，遭遇了与查理的欲火复燃，经历了对情感本能、人性污点的幡然醒悟，坚定了追寻自我的意志和决心，最后她毅然踏上回家的路，重新开始了一段崭新的人生。</p><p><img src="/images/posts/毛姆.jpg" alt="毛姆" title="毛姆"></p><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><p><font color="#bbb" size="1">由于看的是译本，不是原本，所以对语言的优美和辞藻的华丽与否暂不做赏析。</font><br>&emsp;&emsp;《面纱》作者毛姆被很多评论家评论为“二流作家”，原因无他，创新性、逻辑性及技巧性不足够高。艺术来源于生活又高于生活，这部《面纱》我不知道能否到达“艺术”之境界，不知道是否升华于生活，但是它一定是贴切生活，深入到生活中去的。小说中所描述出的爱、责任、被判、救赎与觉醒深入人心，也编织成了全篇小说的脉络。<br>&emsp;&emsp;故事从爱与责任讲起。女主凯蒂从小缺乏疼爱，母亲势力且强势，害怕26岁的自己变成老处女。男主瓦尔特不善言辞、沉默寡言，是一个缺乏生活趣味的细菌学家。从社交舞会上与女主相识，追到手后匆匆结婚。一次偶然发现了奉若上宾的妻子却与他人（沃丁顿）有染，随后给妻子凯蒂两个选择，要么离婚要么陪同自己到湄潭府瘟疫区，这个地方可以说九死一生。随后二人到香港霍乱区开始“新”生活。男主在湄潭府疯狂工作，尝试用工作去洗刷与妻子情感的污垢，而妻子凯蒂则终日彷徨，浑浑噩噩，直到那一天，走进了教堂。<br>&emsp;&emsp;走进教堂的那一天，是自我救赎的开始。以前，自己容貌娇美，但精神空虚；向往爱情，但爱慕虚荣；待字闺中，却被“逼婚”…种种因果，造成了当下不可逆转之局势后，直到这天，在教堂帮忙了一天，蓦然回首，才开始自省。之后便成了教堂的常客，甚至工作于此。在这里，凯蒂体验了修女的博爱、无私以及对信仰的坚定，甚至后来得知丈夫对于霍乱区的贡献，以及丈夫染上霍乱也未曾停歇，直至生命的尽头，理解了丈夫瓦尔特的博爱以及对爱情的不圆满，甚至狭隘。在此过程中，女主凯蒂内心逐渐完成自我救赎，看到光亮，理解生活的意义。在男主病逝后，女主凯蒂回到香港（当时香港是英国殖民地），随后又遇到了查理。在欲火复燃之后，沃丁顿妻子出现。沃丁顿妻子是一位满洲格格，外貌特征符合西方对东方宫廷女性的想象与审美。与她见面却没有直接的言语对白，只有“心理交流”，但是却让自己感受到了这位格格身上所代表的的灿烂文明。与此同时，自己算是经历了一场领悟，坚定了追寻自我的意志和决心。最后毅然踏上回家的路，与父亲和好，走向新的人生。</p><h5 id="关于爱与责任"><a href="#关于爱与责任" class="headerlink" title="关于爱与责任"></a>关于爱与责任</h5><p>&emsp;&emsp;对于男主瓦尔特来讲，从原文<code>我知道你愚蠢、轻佻、头脑空虚，然而我爱你。我知道你的企图、你的理想，你势力、庸俗，然后我爱你。我知道你是个二流货色，然而我爱你。</code>开始，已是深情告白，而女主凯蒂却不为所动。对于沃尔特来说，自己的伤悲只有自己可以理解，非常单纯的爱。即使发现妻子不忠，开始唇枪舌战，也依然保持镇定姿态和绅士风度。也同样由于爱之深所以恨之切，从而走向报复道路，去到霍乱区。<br>&emsp;&emsp;瓦尔特却一直深爱凯蒂不肯放手，沃丁顿深爱满洲格格（他的妻子），唐森深爱自己妻子，修道院姐们们走在前线与病魔抗争，一系列的周边情感感染着凯蒂，渐渐地凯蒂也有了希望和勇气，学会慈悲与爱，放下心魔。</p><p><img src="/images/posts/凯蒂.jpg" alt="凯蒂" title="凯蒂"></p><h5 id="关于人格觉醒"><a href="#关于人格觉醒" class="headerlink" title="关于人格觉醒"></a>关于人格觉醒</h5><p>&emsp;&emsp;某乎上有话题：为什么<code>永远不要去考验人性</code>？而其中高票回答：<code>因为大多数时候，人是选择做一个好人，而不是本性如此。</code>小说中女主从最开始的人格为精神空虚、爱慕虚荣，此后与男主结婚后，依然是处于精神空虚状态，因而让得第三者沃尔顿有机可乘。东窗事发之后，由于沃尔顿的劝告甚至不想卷入其中，导致精神萎靡不振、浑浑噩噩。去到霍乱区之后，更加严重。到修道院开始，内心仿佛有了些许光亮。进而经常去修道院帮忙之后，从修女姐妹们的日常生活中得到救赎，找到了一些生活的意义以及开始忠于内心。神秘的面纱一角被掀开之后，开始审视自己，自我救赎，最终完成内心的升华。</p><h5 id="作品评价"><a href="#作品评价" class="headerlink" title="作品评价"></a>作品评价</h5><p>&emsp;&emsp;贴切生活，以故事的尖锐以及矛盾来铺垫人物的内心世界，加上道德冲突、人性考验，不矢为一部杰作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;&lt;font color=&quot;#6B92A3&quot; size=&quot;5&quot;&gt;面纱&lt;/font&gt;  &lt;font color=&quot;#aaaaaa&quot;&gt;（英国毛姆创作长篇小说）&lt;/font&gt;&lt;br&gt;&lt;img src=&quot;/images/posts/面纱.png&quot; alt=&quot;面纱&quot; title=&quot;面纱&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>三种境界</title>
    <link href="https://www.zhuxingmin.com/2019/03/24/%E4%B8%89%E7%A7%8D%E5%A2%83%E7%95%8C/"/>
    <id>https://www.zhuxingmin.com/2019/03/24/三种境界/</id>
    <published>2019-03-24T12:47:20.000Z</published>
    <updated>2019-03-25T02:00:37.611Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>古今之成大事业、大学问者，罔不经过三种之境界。<br><a id="more"></a></p><h4 id="三种境界"><a href="#三种境界" class="headerlink" title="三种境界"></a>三种境界</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">昨夜西风凋碧树。独上高楼，望尽天涯路。</span><br><span class="line">衣带渐宽终不悔，为伊消得人憔悴。</span><br><span class="line">众里寻他千百度，回头蓦见，那人正在灯火阑珊处。</span><br></pre></td></tr></table></figure><h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><blockquote><p>&emsp;&emsp;古今之成大事业、大学问者，罔不经过三种之境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”此第一境界也。“衣带渐宽终不悔，为伊消得人憔悴。”此第二境界也。“众里寻他千百度，回头蓦见（当作‘蓦然回首’），那人正（当作‘却’）在灯火阑珊处。”此第三境界也。此等非大词人不能道。然遽依此意解释诸词，恐为晏、欧诸公所不许也。</p></blockquote><h4 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h4><p>&emsp;&emsp;古今那些成就大事业、大学问的人，都必然经历三种境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”这是第一层境界。“衣带渐宽终不悔，为伊消得人憔悴。”这是第二层境界。“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”这是第三种境界。像这样的语言，只有大词人才讲得出来。但是，我竟然这样来解释上面的词，恐怕晏殊、欧阳修这些大词人是不会同意的吧。</p><h4 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h4><p>&emsp;&emsp;《人间词话》赖以成名的数段话中，这一段毫无疑问占据了一个重要位置。这段话比喻贴切，佳句宛如浑然天成般镶嵌其中，让人称绝。王老先生正是“成大学问者”，说的这些话也正是他的切身感触。<br>&emsp;&emsp;<code>昨夜西风凋碧树。独上高楼，望尽天涯路。</code>第一境界即入门前茫无头绪、求索无门的疑惑与痛苦。王国维最得意的学问在于史学、古文学和美学。这几门学问千头万绪，典籍浩如烟海，那种想要入门之前的彷徨、痛苦与渴求，用<code>独上高楼，望尽天涯路</code>来比喻，实在是再贴切不过。<br>&emsp;&emsp;<code>衣带渐宽终不悔，为伊消得人憔悴。</code>第二境界是叩门时以苦做舟、以勤为径、上下求索的执着于忍耐。古往今来的大师无不经历过此阶段。不执着，无以成。既已入门，注定将为心中的<code>伊人</code>把此生消磨。王国维在乱世之中，一心治学，那种执着、悲愤、孤苦的心境，恐怕不是现代人所能理解的。唯有这种执着于隐忍，才成就了他在近代史上第一无二的大师地位。<br>&emsp;&emsp;<code>众里寻他千百度，回头蓦见，那人正在灯火阑珊处。</code>第三境界则是功夫到处，灵犀一点、参透真谛、已入门中的喜悦与释然。以勤为径，很多人都如此，但是要攀上顶峰，就不是一般人能做到了。那种灵犀一点参透真谛的大智慧、大喜悦，也只有古今中外各个领域中的天才们感悟得到。这种顿悟就好比掉在牛顿身边的那个苹果，释迦牟尼眼前的那颗菩提，一切的一切忽然间都豁然开朗，往西追寻之中的种种艰辛苦楚，在这一瞬间都得到了完美补偿。<br>&emsp;&emsp;当然，这些都不可能是词作者的愿意，所以王国维接着又说：<code>此等非大词人不能道。然遽依此意解释诸词，恐为晏、欧诸公所不许也。</code>这段话鞭辟入里，贴切浑融，其深致款曲已经不止于词话的范围了，即使晏、欧诸公在世，香叶不容置喙，不得不叹服王氏的才情与睿智吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;古今之成大事业、大学问者，罔不经过三种之境界。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>js监测页面滑至底部响应事件</title>
    <link href="https://www.zhuxingmin.com/2019/03/18/js%E7%9B%91%E6%B5%8B%E9%A1%B5%E9%9D%A2%E6%BB%91%E8%87%B3%E5%BA%95%E9%83%A8%E5%93%8D%E5%BA%94%E4%BA%8B%E4%BB%B6/"/>
    <id>https://www.zhuxingmin.com/2019/03/18/js监测页面滑至底部响应事件/</id>
    <published>2019-03-18T06:16:30.000Z</published>
    <updated>2019-03-18T07:42:48.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;<font color="#0099ff">页面滑动至底部时候，触发响应</font></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>服务协议滑动完毕可点击同意按钮;</li><li>页面滑至底部加载更多(新闻、列表等);</li><li>自动加载下一页等…<a id="more"></a></li></ol><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>&emsp;&emsp;首先，既然是监听，则首要条件便是监听页面滑动(滚动)事件；其次，由于一般页面不会一屏展示完，因此需要依赖BOM来辅助完成一些计算。最后，达到某种条件，触发方法。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> window.onscroll = function()&#123;</span><br><span class="line">//滚动条滚动时，距离顶部的距离</span><br><span class="line">let scrollTop = document.documentElement.scrollTop||document.body.scrollTop;</span><br><span class="line">//可视区的高度</span><br><span class="line">let windowHeight = document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class="line">//滚动条的总高度</span><br><span class="line">let scrollHeight = document.documentElement.scrollHeight||document.body.scrollHeight;</span><br><span class="line">//滚动条到底部的条件</span><br><span class="line">if(scrollTop + windowHeight &gt;= scrollHeight)&#123;</span><br><span class="line">//此处触发响应事件</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">网页可见区域宽：document.body.clientWidth</span><br><span class="line">网页可见区域高：document.body.clientHeight</span><br><span class="line">网页可见区域宽：document.body.offsetWidth (包括边线的宽)</span><br><span class="line">网页可见区域高：document.body.offsetHeight (包括边线的高)</span><br><span class="line">网页正文全文宽：document.body.scrollWidth</span><br><span class="line">网页正文全文高：document.body.scrollHeight</span><br><span class="line">网页被卷去的高：document.body.scrollTop</span><br><span class="line">网页被卷去的左：document.body.scrollLeft</span><br><span class="line">//对应的dom元素的宽高有以下几个常用的：</span><br><span class="line">元素的实际高度：document.getElementById(&quot;div&quot;).offsetHeight</span><br><span class="line">元素的实际宽度：document.getElementById(&quot;div&quot;).offsetWidth</span><br><span class="line">元素的实际距离左边界的距离：document.getElementById(&quot;div&quot;).offsetLeft</span><br><span class="line">元素的实际距离上边界的距离：document.getElementById(&quot;div&quot;).offsetTop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;font color=&quot;#0099ff&quot;&gt;页面滑动至底部时候，触发响应&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;服务协议滑动完毕可点击同意按钮;&lt;/li&gt;
&lt;li&gt;页面滑至底部加载更多(新闻、列表等);&lt;/li&gt;
&lt;li&gt;自动加载下一页等…
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>《惊奇队长》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/03/10/%E3%80%8A%E6%83%8A%E5%A5%87%E9%98%9F%E9%95%BF%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/03/10/《惊奇队长》随笔/</id>
    <published>2019-03-10T08:50:38.000Z</published>
    <updated>2019-03-11T03:35:12.206Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>&emsp;&emsp;卡罗尔·丹弗斯（布丽·拉尔森饰）是克里人的精英部队一员，但她挣扎着回忆过去，对于怎么获得超能力、以及之前的人生等超能力之前的人生，她只在梦中有片段不成章的记忆，这层困扰引起的情绪波动也进而影响她对超能力的掌控。所幸，在星际战队指挥官（裘德·洛饰）的调教之下，卡罗尔·丹弗斯学会如何控制自己的超能力。<br>&emsp;&emsp;一次外星任务中，卡罗尔·丹弗斯因故来到了地球，并遇到还是低阶探员的尼克·弗瑞（塞缪尔·杰克逊饰），卡罗尔·丹弗斯与尼克·弗瑞一起追捕在地球惹事的变形人塔罗斯（本·门德尔森饰），同时，也发现自己如何获得超能力。</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1552218574750&amp;di=0faea9b11585b1f211c6c5795e90f261&amp;imgtype=0&amp;src=http%3A%2F%2Fimage14.m1905.cn%2Fuploadfile%2F2018%2F0517%2F20180517050025402068.jpg" alt="惊奇队长" title="惊奇队长"><br><a id="more"></a></p><h4 id="起"><a href="#起" class="headerlink" title="起"></a>起</h4><p>&emsp;&emsp;时间回到前天(2019年3月8日18:00:00)。这是不寻常的一天，不仅仅是女神节，更是跟基友约好看惊奇队长首映的日子。<br>&emsp;&emsp;下午6点，准备下班。但是作为猿，按时下班显然不是我们的风格，于是噼里啪啦一顿操作又改了个产品刚提出的优化，并且自测完毕。ok，天儿也不早了，赶紧挤地铁回家准备观影去吧。没想到的是，为了一场电影，会有一场场刺激等待着我们。</p><h4 id="Then"><a href="#Then" class="headerlink" title="Then"></a>Then</h4><p>&emsp;&emsp;19:35，超市购物了一波回到家，小憩了一下下，喝点酸奶补补体力。<br>&emsp;&emsp;20:35，嘀嘀了一辆优享专车，下楼跟基友等车。<br>&emsp;&emsp;上车。<br>&emsp;&emsp;堵车。<br>&emsp;&emsp;司机人很nice，一个看起来有修养的大龄先生。<br>&emsp;&emsp;两分钟后，我们在后排毫无感觉，司机下了车，前面司机也下了车。<br>&emsp;&emsp;嗯，追尾。<br>&emsp;&emsp;ok,下车，换车。<br>&emsp;&emsp;重新嘀嘀。<br>&emsp;&emsp;“耐心”等待中…<br>&emsp;&emsp;上车。<br>&emsp;&emsp;驾驶过堵车区，一路飞……额，红灯。<br>&emsp;&emsp;“铃铃铃铃铃铃”电话响起来~<br>&emsp;&emsp;“…………”<br>&emsp;&emsp;基友：“完了，一个需求忘记处理”<br>&emsp;&emsp;“……看急不急，不急了明天上午公司处理”<br>&emsp;&emsp;下车。<br>&emsp;&emsp;取票。<br>&emsp;&emsp;21:03，等待进场。<br>&emsp;&emsp;21:05，开始检票。<br>&emsp;&emsp;21:06,，“不行，我得回去先处理需求去了……”。<br>&emsp;&emsp;于是，检票只检了一张，有了下图：<br><img src="/images/posts/《惊奇队长》影票.jpg" alt="票根" title="《惊奇队长》影票"></p><h4 id="So"><a href="#So" class="headerlink" title="So"></a>So</h4><p>&emsp;&emsp;被迫一个人看完了整场。</p><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><h5 id="关于剧情"><a href="#关于剧情" class="headerlink" title="关于剧情"></a>关于剧情</h5><p>&emsp;&emsp;一向的漫威思维，并且在女神节这么个档期，祭出目前最强大的主角英雄，且为女英雄，应景至极。前半篇在不停的铺垫，以及给出一些断断续续的女主回忆。从女主发现自己被骗之后，一系列举动将剧情推向高潮。<br>&emsp;&emsp;故事发生于上世纪90年代，在此之时，复仇者联盟尚未建立。居中也道出了神盾局局长独眼的原因以及建立复仇者联盟的初心。<br>&emsp;&emsp;斯克鲁人怕猫，检测猫为“噬元兽”，克里人怕尬舞。然而关键时刻，猫吞噬“魔方”，吞噬“敌军”，真的救了神盾局长。</p><h5 id="关于彩蛋"><a href="#关于彩蛋" class="headerlink" title="关于彩蛋"></a>关于彩蛋</h5><p>&emsp;&emsp;很多评论说，又是“看彩蛋送电影”，第一个彩蛋比正片好看。确实，在漫威宇宙中，自打复联出来之后，新出的超级英雄好像都与复联有着密不可分的联系，甚至都是为了复联去添砖加瓦。但是在多方面关于复联四的猜测中，惊奇队长却是救世中不可或缺且极为重要的一环。如果只是粗略的一笔带过，进而在复联四中直接使用其几乎藐视现阶段复联所有人所有技能的特殊能力，那在复联四中将会显得极为仓促且莫名其妙。因此，此英雄作为一部新的超级英雄，极有必要对齐以及复联历史进行一些必要的补充，以及填坑。</p><h5 id="关于斯坦●李"><a href="#关于斯坦●李" class="headerlink" title="关于斯坦●李"></a>关于斯坦●李</h5><p>&emsp;&emsp;老爷子去年过世，与东方的金庸大侠先后将生命挪出了时间。至此，东方再无江湖，漫威再无宇宙。<br>&emsp;&emsp;剧中老爷子作为路人，在公交车上看书，与惊奇队长偶遇。上一次同样是在公交车看书，遇到了奇异博士。<br>&emsp;&emsp;所以是不是为我们敲响警钟，多出门，多读书，不要总在家里宅着，说不定也能偶遇超级英雄呢。</p><h5 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h5><p>&emsp;&emsp;《蚁人2》片尾彩蛋中，蚁人进入量子域，在入口处，小女友及其父母随着灭霸的响指化为了灰烬，因此是否在复联四中也会贡献在即的一份力量呢？</p><center>等待ing复联四…</center>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;卡罗尔·丹弗斯（布丽·拉尔森饰）是克里人的精英部队一员，但她挣扎着回忆过去，对于怎么获得超能力、以及之前的人生等超能力之前的人生，她只在梦中有片段不成章的记忆，这层困扰引起的情绪波动也进而影响她对超能力的掌控。所幸，在星际战队指挥官（裘德·洛饰）的调教之下，卡罗尔·丹弗斯学会如何控制自己的超能力。&lt;br&gt;&amp;emsp;&amp;emsp;一次外星任务中，卡罗尔·丹弗斯因故来到了地球，并遇到还是低阶探员的尼克·弗瑞（塞缪尔·杰克逊饰），卡罗尔·丹弗斯与尼克·弗瑞一起追捕在地球惹事的变形人塔罗斯（本·门德尔森饰），同时，也发现自己如何获得超能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1552218574750&amp;amp;di=0faea9b11585b1f211c6c5795e90f261&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fimage14.m1905.cn%2Fuploadfile%2F2018%2F0517%2F20180517050025402068.jpg&quot; alt=&quot;惊奇队长&quot; title=&quot;惊奇队长&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="电影" scheme="https://www.zhuxingmin.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>js/vue输入联想功能</title>
    <link href="https://www.zhuxingmin.com/2019/03/04/js-vue%E8%BE%93%E5%85%A5%E8%81%94%E6%83%B3%E5%8A%9F%E8%83%BD/"/>
    <id>https://www.zhuxingmin.com/2019/03/04/js-vue输入联想功能/</id>
    <published>2019-03-04T06:22:13.000Z</published>
    <updated>2019-03-04T08:36:59.112Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现功能如下"><a href="#实现功能如下" class="headerlink" title="实现功能如下"></a>实现功能如下</h4><p><img src="/images/posts/联想.gif" alt="模糊搜索|输入联想" title="模糊搜索|输入联想"><br><a id="more"></a></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>&emsp;&emsp;最近需求要有一个输入框模糊搜索功能，且需要匹配输入字符联想。从网上看了一些demo，总结出来一套思路，配合vue将其开发并稍做优化处理。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>基础：</p><ul><li>1.一个输入框（输入字符）、一个ul框（展示匹配数据）</li><li>2.将输入字符与列表中字符比对</li><li>3.新建空数组，将比对结果匹配项放入此数组中</li><li>4.将数组数据铺到ul中</li></ul><p>优化：</p><ul><li>5.鼠标滑入某一项变更背景色</li><li>6.点击选中数据展示到input框中</li><li>7.键盘上下键控制上一个下一个</li><li>8.回车键将选中项目展示到input框中</li></ul><hr><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1.HTML"></a>1.HTML</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//input框</span><br><span class="line"> &lt;input type=&quot;text&quot;</span><br><span class="line">   @keydown.down=&quot;changeDown&quot;//键盘事件</span><br><span class="line">   @keydown.up=&quot;changeUp&quot;</span><br><span class="line">   v-model=&quot;searchVal&quot;//绑定输入的值</span><br><span class="line">   @keyup=&quot;searchFn&quot;</span><br><span class="line">   @keyup.enter=&quot;enter&quot;//回车将选中项目展示到input框中</span><br><span class="line">   placeholder=&quot;input name&quot;/&gt;</span><br><span class="line">   </span><br><span class="line">//选项框 判断如果新数组中有值则显示本备选框</span><br><span class="line">&lt;ul class=&quot;ulAdd&quot; v-if=&quot;searchResult&quot;&gt;</span><br><span class="line">&lt;li v-for=&quot;(item, index) in searchResult&quot;</span><br><span class="line">:class=&quot;&#123;bgColor: index === now&#125;&quot;//渲染样式</span><br><span class="line">@click=&quot;alertFn&quot;//点击将选中项目展示到input框中</span><br><span class="line">@mouseenter=&quot;mouseEnter(index)&quot;//渲染鼠标移入/移出样式</span><br><span class="line">@mouseleave=&quot;mouseleave&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h5 id="2-数据"><a href="#2-数据" class="headerlink" title="2.数据"></a>2.数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">searchVal: &apos;&apos;, //绑定name</span><br><span class="line">searchResult: [],   //匹配结果</span><br><span class="line">now: -1,        //索引</span><br><span class="line">nameList: [//name列表</span><br><span class="line">&#123;name: &apos;张三&apos;,id: &apos;9001&apos;&#125;,</span><br><span class="line">&#123;name: &apos;张四&apos;,id: &apos;9002&apos;&#125;,</span><br><span class="line">&#123;name: &apos;李三&apos;,id: &apos;9003&apos;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3.事件处理"></a>3.事件处理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//过滤</span><br><span class="line">searchFn (e) &#123;</span><br><span class="line">let val = e.target.value;//输入的值</span><br><span class="line">this.searchResult = [];//清空存结果的数组</span><br><span class="line">if (val) &#123;</span><br><span class="line">this.nameList.forEach(function(item) &#123;</span><br><span class="line">let pattern = new RegExp(&apos;&apos;+val, &apos;g&apos;);//正则校验</span><br><span class="line">if (pattern.test(item.name)) &#123;</span><br><span class="line">this.searchResult.push(&#123;name: item.name,id: item.id&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.bind(this)); // 绑定当前实例对象</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将选中项目展示到input框中</span><br><span class="line">alertFn () &#123;</span><br><span class="line">this.searchVal = this.searchResult[this.now].agentname;</span><br><span class="line">this.searchResult = [];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//按键盘↓键</span><br><span class="line">changeDown () &#123;</span><br><span class="line">this.now ++;</span><br><span class="line">if(this.now == this.searchResult.length) &#123;</span><br><span class="line">this.now = -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//按键盘↑键</span><br><span class="line">changeUp () &#123;</span><br><span class="line">this.now --;</span><br><span class="line">if (this.now === -2) &#123;</span><br><span class="line">this.now = this.searchResult.length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//回车将选中项目展示到input框中</span><br><span class="line">enter () &#123;</span><br><span class="line">this.searchVal = this.searchResult[this.now].agentname;</span><br><span class="line">this.searchResult = [];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//清空结果</span><br><span class="line">deleteList () &#123;</span><br><span class="line">this.searchResult = [];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//鼠标移入</span><br><span class="line">mouseEnter (index) &#123;</span><br><span class="line">this.now = index;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//鼠标移出</span><br><span class="line">mouseleave (index) &#123;</span><br><span class="line">this.now = -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注"><a href="#注" class="headerlink" title="注"></a>注</h5><p>&emsp;&emsp;样式自定义即可。</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>功能实现，且完成了一定的优化，但存在一定的不足：</p><ol><li>数组循环可用新语法；</li><li>多个方法可合并；</li><li>可以进一步优化，做出输入字母也同样联想。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;实现功能如下&quot;&gt;&lt;a href=&quot;#实现功能如下&quot; class=&quot;headerlink&quot; title=&quot;实现功能如下&quot;&gt;&lt;/a&gt;实现功能如下&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/联想.gif&quot; alt=&quot;模糊搜索|输入联想&quot; title=&quot;模糊搜索|输入联想&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="输入框联想" scheme="https://www.zhuxingmin.com/tags/%E8%BE%93%E5%85%A5%E6%A1%86%E8%81%94%E6%83%B3/"/>
    
  </entry>
  
</feed>

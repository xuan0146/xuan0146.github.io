<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lomo | 朱幸民</title>
  
  <subtitle>on the way</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuxingmin.com/"/>
  <updated>2019-04-18T03:35:14.598Z</updated>
  <id>https://www.zhuxingmin.com/</id>
  
  <author>
    <name>Lomo 朱幸民</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>axios全局拦截器配置</title>
    <link href="https://www.zhuxingmin.com/2019/04/17/axios%E5%85%A8%E5%B1%80%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/04/17/axios全局拦截器配置/</id>
    <published>2019-04-17T09:03:37.000Z</published>
    <updated>2019-04-18T03:35:14.598Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于请求拦截器"><a href="#关于请求拦截器" class="headerlink" title="关于请求拦截器"></a>关于请求拦截器</h4><p>&emsp;&emsp;项目中，我们经常遇到请求后台接口时要做后天返回的<code>code</code>码验证判断。code码通常是一个特定的数值，比如一般返回<code>200</code>作为正常请求，返回其他作为数据异常或者请求异常等。如果接口量足够大，那么每一个接口都需要做正常/异常处理。为满足统一管理，那么在全局请求拦截器便应劫而出。</p><a id="more"></a><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>统一管理</li><li>路由请求拦截 =&gt; request</li><li>路由响应拦截 =&gt; response</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="1-安装axios及qs"><a href="#1-安装axios及qs" class="headerlink" title="1.安装axios及qs"></a>1.安装axios及qs</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save-dev    //安装axios</span><br><span class="line"></span><br><span class="line">npm install qs --save-dev     //安装qs</span><br></pre></td></tr></table></figure><h5 id="2-新建一个js文件"><a href="#2-新建一个js文件" class="headerlink" title="2.新建一个js文件"></a>2.新建一个js文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── project</span><br><span class="line">│  ├── build</span><br><span class="line">│  ├── config</span><br><span class="line">│  ├── node_modules</span><br><span class="line">│  ├── src</span><br><span class="line">│  │  ├── assets</span><br><span class="line">│  │  │  ├── request.js// 我在这里新建了一个js文件来配置拦截器</span><br><span class="line">│  │  ├── components</span><br><span class="line">│  │  ├── router</span><br><span class="line">│  │  ├── App.vue</span><br><span class="line">│  │  ├── main.js</span><br><span class="line">│  ├── static</span><br><span class="line">│  ├── test</span><br><span class="line">│  ├── .babelrc</span><br><span class="line">│  ├── .editorconfig</span><br><span class="line">│  ├── .gitignore</span><br><span class="line">│  ├── .postcssrc.js</span><br><span class="line">│  ├── index.html</span><br><span class="line">│  ├── package-lock.json</span><br><span class="line">│  ├── package.json</span><br><span class="line">│  ├── README.md</span><br></pre></td></tr></table></figure><h5 id="3-js拦截器配置如下："><a href="#3-js拦截器配置如下：" class="headerlink" title="3.js拦截器配置如下："></a>3.js拦截器配置如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;//引入axios</span><br><span class="line">import qs from &apos;qs&apos;//引入qs qs可将数据转换为FormData格式</span><br><span class="line"></span><br><span class="line">// axios默认配置</span><br><span class="line">axios.defaults.timeout = 10000;   // 超时时间</span><br><span class="line">axios.defaults.baseURL = &apos;https://www.demo.com&apos;;  // 公用地址</span><br><span class="line"></span><br><span class="line">// 路由请求拦截</span><br><span class="line">// http request 拦截器</span><br><span class="line">axios.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">    // 数据格式化</span><br><span class="line">    config.data = qs.stringify(config.data);</span><br><span class="line">    // 给请求头加键值对</span><br><span class="line">    config.headers[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br><span class="line">    return config;</span><br><span class="line">&#125;, (error ) =&gt; &#123;// 错误信息</span><br><span class="line">    return Promise.reject(error.response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 路由响应拦截</span><br><span class="line">// http response 拦截器</span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    (response) =&gt; &#123;</span><br><span class="line">        if (response.data.code !== 200) &#123;</span><br><span class="line">            // 异常请求要做的事</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 正常请求要做的事</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,(error) =&gt; &#123;</span><br><span class="line">// 返回接口返回的错误信息</span><br><span class="line">        return Promise.reject(error.response)   </span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default axios;</span><br></pre></td></tr></table></figure><h5 id="4-main-js配置"><a href="#4-main-js配置" class="headerlink" title="4.main.js配置"></a>4.main.js配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 引入该配置文件</span><br><span class="line">import axios from &apos;./assets/axiosRequest&apos;</span><br><span class="line"></span><br><span class="line">// 注册到全局</span><br><span class="line">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure><h5 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 要发送的数据</span><br><span class="line">let params = &#123;</span><br><span class="line">name: &apos;AAA&apos;,</span><br><span class="line">number: &apos;10100110&apos;,</span><br><span class="line">age: &apos;18&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// post请求为例  url不用写公共部分，直接写后面即可</span><br><span class="line">this.$axios.post(&apos;/test&apos;,params</span><br><span class="line">).then((res) =&gt; &#123;</span><br><span class="line">debugger;</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">debugger;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;http全局拦截器配置完毕，不仅可在response中统一管理返回状态，而且可在request中动态添加request headers，在实际项目中有很大的运用空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于请求拦截器&quot;&gt;&lt;a href=&quot;#关于请求拦截器&quot; class=&quot;headerlink&quot; title=&quot;关于请求拦截器&quot;&gt;&lt;/a&gt;关于请求拦截器&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;项目中，我们经常遇到请求后台接口时要做后天返回的&lt;code&gt;code&lt;/code&gt;码验证判断。code码通常是一个特定的数值，比如一般返回&lt;code&gt;200&lt;/code&gt;作为正常请求，返回其他作为数据异常或者请求异常等。如果接口量足够大，那么每一个接口都需要做正常/异常处理。为满足统一管理，那么在全局请求拦截器便应劫而出。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue之data中数组改变如何驱动视图</title>
    <link href="https://www.zhuxingmin.com/2019/04/09/vue%E4%B9%8Bdata%E4%B8%AD%E6%95%B0%E7%BB%84%E6%94%B9%E5%8F%98%E5%A6%82%E4%BD%95%E9%A9%B1%E5%8A%A8%E8%A7%86%E5%9B%BE/"/>
    <id>https://www.zhuxingmin.com/2019/04/09/vue之data中数组改变如何驱动视图/</id>
    <published>2019-04-09T08:06:36.000Z</published>
    <updated>2019-04-09T09:20:53.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;熟悉vue的小伙伴们都知道vue属于<code>MVVM</code>框架，数据可以驱动视图。一般来说，vue中的data发生变化，视图中绑定的data值也会随之发生变化。然而还是有特殊情况的，例如关于数组|对象的某些操作。<br>&emsp;&emsp;根据官方文档定义：</p><blockquote><p><strong>如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。</strong><br><a id="more"></a></p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>&emsp;&emsp;例：data中有一对象数组<code>arr</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(item, index) in arr&quot;&gt;</span><br><span class="line">&#123;&#123; index + 1 &#125;&#125; - &#123;&#123; item &#125;&#125; </span><br><span class="line">&lt;button @click=&quot;change(index)&quot;&gt;change&lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">data: &#123;</span><br><span class="line">arr: [</span><br><span class="line">&#123;</span><br><span class="line">id: 0,</span><br><span class="line">son: [</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son1&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son2&apos;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">id: 1,</span><br><span class="line">son: [</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son1&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &apos;son2&apos;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在将数据绑定到视图中以后，点击change将当前点击的数组子项添加了一个id：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">methods: &#123;</span><br><span class="line">change (index) &#123;</span><br><span class="line">this.arr[index].son.forEach((item, index) =&gt; &#123;</span><br><span class="line">item.id = index + 1;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;点击之后，data中的arr数组发生了改变，按理说即将出现的效果应是数据更新后的视图，但是惊讶的发现视图并没有改变。那么如何解决此问题呢？</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>&emsp;&emsp;使用<font color="red" size="3">Vue.set</font>可得到解决。</p><blockquote><p>this.$set(this.data, index, obj)<br>// this.data: 要改变的数据<br>// index: 下标<br>// obj: 修改后的对象 </p></blockquote><p>&emsp;&emsp;如刚才所举之例，解决如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">change (index) &#123;</span><br><span class="line">this.arr[index].son.forEach((item, index) =&gt; &#123;</span><br><span class="line">item.id = index + 1;</span><br><span class="line">this.$set(this.arr[index].son, index, item);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时，点击<code>change</code>按钮，则视图实时改变。<br>&emsp;&emsp;问题得以解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;熟悉vue的小伙伴们都知道vue属于&lt;code&gt;MVVM&lt;/code&gt;框架，数据可以驱动视图。一般来说，vue中的data发生变化，视图中绑定的data值也会随之发生变化。然而还是有特殊情况的，例如关于数组|对象的某些操作。&lt;br&gt;&amp;emsp;&amp;emsp;根据官方文档定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue项目搭建及基本配置</title>
    <link href="https://www.zhuxingmin.com/2019/03/27/vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/03/27/vue项目搭建及基本配置/</id>
    <published>2019-03-27T09:02:16.000Z</published>
    <updated>2019-04-16T05:59:33.648Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><font size="2" color="#aaa">注：适用于windows系统</font><br><strong>本文讲述要点：</strong></p><ol><li>vue-cli项目搭建基本环境配置；</li><li>常用插件描述及分享；</li><li>项目运行、调试及打包；</li><li>项目配置及优化；</li></ol><a id="more"></a><p><strong>适用人群：</strong></p><ol><li>vue小白；</li><li>有html\css\js编程基础；</li><li>vue项目整体优化（打包后压缩空间）；</li></ol><hr><h4 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h4><p><font size="2" color="#aaa">准备阶段会将项目环境配置完毕,包含<code>node</code>、<code>npm</code>、<code>webpack</code>和<code>vue-cli</code>。已经完成的小伙伴可以跳过此步骤看第二阶段。</font></p><h5 id="1-安装node及npm"><a href="#1-安装node及npm" class="headerlink" title="1.安装node及npm"></a>1.安装<code>node</code>及<code>npm</code></h5><p>&emsp;&emsp;从node.js中文网下载并安装<a href="http://nodejs.cn/download/" title="nodejs" target="_blank" rel="noopener">nodejs</a>点击下载<code>.msi</code>的32/64位安装包，然后双击本地文件一路点击<code>下一步</code>完成<code>nodeJs</code>的安装即可。<font size="2" color="#ff6666">注意安装8.10以上版本哟!</font><br>安装完成后，打开命令行工具，输入<code>node -v</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;node -v</span><br><span class="line">v8.12.0//版本号</span><br></pre></td></tr></table></figure></p><p>顺便在此处继续输入<code>npm -v</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;npm -v</span><br><span class="line">6.4.1//版本号</span><br></pre></td></tr></table></figure></p><p>你会惊讶的发现<code>npm</code>已经神奇的安装完成了。这是因为<code>npm</code>在安装<code>nodeJs</code>的时候顺带已经装好了。</p><h5 id="2-安装webpack"><a href="#2-安装webpack" class="headerlink" title="2.安装webpack"></a>2.安装<code>webpack</code></h5><p><font size="2" color="blue">注：以下所有<code>npm</code>操作，由于国内速度较慢甚至出现失败，可用淘宝镜像<code>cnpm</code>替代。下列所有<code>npm</code>命令，用<code>cnpm</code>替代即可。方式如下：</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;继续刚才的命令行工具，输入<code>npm install webpack -g</code>，<code>-g代表全局安装</code>。安装完成后继续输入<code>webpack -v</code>，出现相应版本号，代表安装成功。<br>我在安装时出现如下状况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">One CLI for webpack must be installed. These are recommended choices, delivered as separate packages:</span><br><span class="line"> - webpack-cli (https://github.com/webpack/webpack-cli)</span><br><span class="line">   The original webpack full-featured CLI.</span><br><span class="line">We will use &quot;npm&quot; to install the CLI via &quot;npm install -D&quot;.</span><br><span class="line">Do you want to install &apos;webpack-cli&apos; (yes/no):</span><br></pre></td></tr></table></figure></p><p>解决方案是：输入<code>npm install  webpack-cli -g</code>。安装成功后执行<code>webpack -v</code>查看版本号，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;npm install  webpack-cli -g</span><br><span class="line">*</span><br><span class="line">*  安</span><br><span class="line">*  装省</span><br><span class="line">*  过略</span><br><span class="line">*  程</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">E:\&gt;webpack -v</span><br><span class="line">4.29.6//版本号</span><br></pre></td></tr></table></figure></p><h5 id="3-安装vue脚手架vue-cli"><a href="#3-安装vue脚手架vue-cli" class="headerlink" title="3.安装vue脚手架vue-cli"></a>3.安装vue脚手架<code>vue-cli</code></h5><p>&emsp;&emsp;继续上面的命令行工具。接下来就是安装配置今天的主角了，vue脚手架工具<code>vue-cli</code>。方法一样，键入命令行<code>npm install vue-cli -g</code>全局安装，然后输入<code>vue -V</code><font size="1" color="red">注：是大写的<code>-V</code></font>检测是否安装成功。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;vue -V</span><br><span class="line">2.9.6//版本号</span><br></pre></td></tr></table></figure></p><h5 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h5><p>&emsp;&emsp;至此，我们已经完成了准备阶段的工作。主要完成的是<code>node</code>、<code>npm</code>、<code>webpack</code>和<code>vue-cli</code>四个工具的环境配置。目前为止，我们在命令行工具的总结应该是如下：<font color="#aaa" size="1">版本号不必一致</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;node -v</span><br><span class="line">v8.12.0</span><br><span class="line"></span><br><span class="line">E:\&gt;npm -v</span><br><span class="line">6.4.1</span><br><span class="line"></span><br><span class="line">E:\&gt;webpack -v</span><br><span class="line">4.29.6</span><br><span class="line"></span><br><span class="line">E:\&gt;vue -V</span><br><span class="line">2.9.6</span><br></pre></td></tr></table></figure></p><hr><h4 id="二、项目搭建"><a href="#二、项目搭建" class="headerlink" title="二、项目搭建"></a>二、项目搭建</h4><p><font size="1" color="#aaa">本阶段讲述<code>vue-cli</code>项目搭建及相关配置，包含<code>创建项目</code>、<code>修改基础配置</code>、<code>项目运行</code>三个模块，可自行选择阅读或跳过。</font></p><h5 id="1-项目创建"><a href="#1-项目创建" class="headerlink" title="1.项目创建"></a>1.项目创建</h5><p>&emsp;&emsp;建立一个空文件夹，最好以纯英文命名。例，我项目路径为<code>E&gt;stydy</code>。打开命令行工具，<code>cd</code>到该文件目录下，执行<code>vue init webpack name</code>，<code>name</code>可替换为你要创建的项目名。回车之后，会要求输入一系列的信息，大部分可直接回车略过，注释如下，没有注释的回车略过即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy&gt;vue init webpack blog</span><br><span class="line"></span><br><span class="line">? Project name blog//项目名</span><br><span class="line">? Project description A Vue.js project//项目简介</span><br><span class="line">? Author xuan0146 &lt;zxm0146@163.com&gt;//作者</span><br><span class="line">? Vue build runtime</span><br><span class="line">? Install vue-router? Yes//使用项目路由</span><br><span class="line">? Use ESLint to lint your code? No//不开启ESLint语法检测 注意选No</span><br><span class="line">? Set up unit tests Yes</span><br><span class="line">? Pick a test runner jest</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) npm</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;blog&quot;.</span><br></pre></td></tr></table></figure></p><p>最后一步选择<code>npm</code>或者<code>yarn</code>则会自动执行<code>npm install</code>安装项目所有依赖包。不选择的话，自己安装也是同样效果。安装步骤为：</p><ol><li><code>cd</code>到项目路径；</li><li>执行<code>npm install</code>；</li><li>等待完成安装即可;</li></ol><h5 id="2-项目介绍"><a href="#2-项目介绍" class="headerlink" title="2.项目介绍"></a>2.项目介绍</h5><p>&emsp;&emsp;<code>cd</code>到该项目，或者打开文件夹，项目目录及备注如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">├── project//项目目录</span><br><span class="line">│  ├── build//webpack相关配置</span><br><span class="line">│  │  ├── build.js//生产环境构建</span><br><span class="line">│  │  ├── check-versions.js//版本检查</span><br><span class="line">│  │  ├── utils.js//构建相关工具</span><br><span class="line">│  │  ├── vue-loader.conf.js//处理vue文件的配置信息</span><br><span class="line">│  │  ├── webpack.base.conf.js//webpack基础配置</span><br><span class="line">│  │  ├── webpack.dev.conf.js//webpack开发环境配置</span><br><span class="line">│  │  ├── webpack.prod.conf.js//webpack生产环境配置</span><br><span class="line">│  ├── config//vue基本配置</span><br><span class="line">│  │  ├── dev.env.js//开发环境配置</span><br><span class="line">│  │  ├── index.js//主要配置</span><br><span class="line">│  │  ├── prod.env.js//生产环境配置</span><br><span class="line">│  │  ├── test.env.js//测试环境配置</span><br><span class="line">│  ├── node_modules//依赖包 忽略</span><br><span class="line">│  ├── src//项目核心文件</span><br><span class="line">│  │  ├── assets//静态资源 如公用js\css\image\媒体资源等</span><br><span class="line">│  │  ├── components//公用组件</span><br><span class="line">│  │  ├── router//项目路由</span><br><span class="line">│  │  │  ├── index.js//路由控制文件</span><br><span class="line">│  │  ├── App.vue//根组件</span><br><span class="line">│  │  ├── main.js//入口文件</span><br><span class="line">│  ├── static//静态资源</span><br><span class="line">│  ├── test//模拟测试</span><br><span class="line">│  ├── .babelrc//babel参数</span><br><span class="line">│  ├── .editorconfig//代码格式</span><br><span class="line">│  ├── .gitignore//git上传相关配置</span><br><span class="line">│  ├── .postcssrc.js//css相关工具</span><br><span class="line">│  ├── index.html//主页</span><br><span class="line">│  ├── package-lock.json//记录当前状态下实际安装的各个npm package的具体来源和版本号</span><br><span class="line">│  ├── package.json//项目信息</span><br><span class="line">│  ├── README.md//项目说明</span><br></pre></td></tr></table></figure></p><h5 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h5><p>&emsp;&emsp;命令行工具键入<code>npm run dev</code>，等待片刻，直到提示如下，则表示启动成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run dev</span><br><span class="line"></span><br><span class="line">* * * * * * * *</span><br><span class="line">* 启动过程忽略 *</span><br><span class="line">* * * * * * * *</span><br><span class="line"></span><br><span class="line">Your application is running here: http://localhost:8080</span><br></pre></td></tr></table></figure></p><p>然后复制<code>http://localhost:8080</code>，在浏览器地址栏输入该url，进入如下页面：<br><img src="/images/posts/vue运行成功.png" alt="vue运行成功" title="vue运行成功"></p><h5 id="4-移动端调试"><a href="#4-移动端调试" class="headerlink" title="4.移动端调试"></a>4.移动端调试</h5><p>&emsp;&emsp;有的人可能要问了，如果我做移动端项目，不能用localhost去访问了吧？当然不能，只需要稍微改一下配置即可。当然，端口号8080一样可以修改，不过一般不做变动。<br>&emsp;&emsp;用代码工具（自己习惯的IDE）打开本项目。首先查看本机电脑ip,键入命令<code>ipconfig</code>，查看如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;ipconfig</span><br><span class="line">* *</span><br><span class="line">* *</span><br><span class="line">以太网适配器 以太网:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::da7:800d:d148:e06%10</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.200.127</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : fe80::48:5112:9520:564f%10</span><br><span class="line">                                       192.168.200.1</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;其中，<code>IPv4 地址</code>即为我们所需要的ip。在<code>项目/config/index.js</code>中，找到<code>host: &#39;localhost&#39;</code>，改成<code>IPv4 地址</code>，例:我的地址为<code>192.168.200.127</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    host: &apos;192.168.200.127&apos;, //localhost改为ip</span><br><span class="line">    port: 8080,//端口号</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后，我们重新启动项目。注意上次项目启动后，由于修改了配置文件，因此需要停止项目然后重新启动。停止项目的命令为<code>Ctrl + C</code>。重启项目后，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run dev</span><br><span class="line">* * * * * * * *</span><br><span class="line">* 启 动 过 程 *</span><br><span class="line">* * * * * * * *</span><br><span class="line">Your application is running here: http://192.168.200.127:8080</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<font size="2" color="#aaa">注意要在同一网络下</font><br>&emsp;&emsp;最后，我们复制该地址，即可在所有端<code>PC</code>、<code>手机</code>、<code>pad等</code>查看该项目啦~</p><hr><h4 id="三、常用插件"><a href="#三、常用插件" class="headerlink" title="三、常用插件"></a>三、常用插件</h4><p><font size="1" color="#aaa">本章节记录一些vue常用插件，如<code>axios</code>、<code>echarts</code>、<code>sass/scss</code>、<code>lib-flexible</code>等等。所有命令均可用<code>cnpm</code>替代。如不需要可直接跳过。</font></p><h5 id="1-sacc-scss"><a href="#1-sacc-scss" class="headerlink" title="1.sacc/scss"></a>1.sacc/scss</h5><p><strong>用途</strong>：可用<code>sass/scss</code>进行css书写代码。命令行工具依次键入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --save-dev</span><br><span class="line">npm install sass-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>安装完成后，<code>.vue</code>里的<code>style</code>里添加<code>lang=&quot;scss&quot;</code>来指定语言，即可用<code>sass/scss</code>编写css代码。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h5 id="2-axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h5><p><strong>用途</strong>：平时前后端交互使用<code>Ajax</code>，在vue官方，给出<code>vue-resource</code>和<code>axios</code>的作为<code>ajax</code>的替代。在此处使用vue官方推荐首选的<code>axios</code>作为案例讲述。</p><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure></li><li><p>全局引入<br>在<code>项目/src/main.js</code>中引入如下代码，然后随意走个请求，发现……报错？并且在页面F12控制台<code>Newwork&gt;Headers</code>里面发现数据并没有Form Data形式提交，如何处理呢？见下一步解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br></pre></td></tr></table></figure></li><li><p>解决数据格式问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//完整请求代码  post为例</span><br><span class="line">this.$axios.post(&apos;url&apos;, &#123;//路径</span><br><span class="line">  key1: &apos;value&apos;,//参数</span><br><span class="line">  key2: &apos;value&apos;//参数</span><br><span class="line">&#125;, </span><br><span class="line"></span><br><span class="line">/* *</span><br><span class="line">* 添加如下代码</span><br><span class="line">* * * * * * start * * * * * </span><br><span class="line">&#123;</span><br><span class="line">  transformRequest: [function (data) &#123;</span><br><span class="line">    let ret = &apos;&apos;;</span><br><span class="line">    for (let it in data) &#123;</span><br><span class="line">  ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* * * * * * end * * * * *</span><br><span class="line"></span><br><span class="line">).then((response) =&gt; &#123;//返回数据</span><br><span class="line">  console.log(response)</span><br><span class="line">&#125;).catch((error) =&gt; &#123;//请求异常捕捉</span><br><span class="line">  console.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-axios解决方案"><a href="#3-axios解决方案" class="headerlink" title="3.axios解决方案"></a>3.axios解决方案</h5><p>&emsp;&emsp;另外一个axios数据格式问题的解决方案。 <code>重磅推荐★★★★★</code>此方案不仅解决数据格式问题，还顺便解决了跨域问题。第一步当然还是安装<code>axios</code>，同上一步。然后，安装<code>qs</code>，命令行工具键入<code>npm install qs --save-dev</code>。然后在<code>项目/src/main.js</code>中配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import qs from &apos;qs&apos;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line">Vue.prototype.$qs = qs;</span><br></pre></td></tr></table></figure></p><p>然后在<code>项目/config/index.js</code>中，找到<code>proxyTable</code>，配置及说明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  &apos;/api&apos;: &#123;</span><br><span class="line">    //设置url公用部分</span><br><span class="line">    target: &apos;http://192.168.1.100:8080/&apos;,</span><br><span class="line">    changeOrigin: true,   // 如果接口跨域，需要进行这个参数配置</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/api&apos;: &apos;&apos;      //这里理解成用‘/api’代替target里面的地址</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>配置完成之后，在<code>.vue</code>文件中，请求用例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//参数</span><br><span class="line">let params = this.$qs.stringify(&#123;</span><br><span class="line">  key: value</span><br><span class="line">&#125;);</span><br><span class="line">//请求</span><br><span class="line">this.$axios.post(&apos;/api/test&apos;, params).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后，键入命令<code>npm run dev</code>，发现请求数据格式已经成为<code>Form Data</code>的格式，并且即使后端不处理跨域问题，也依然正常可用。原因是<code>proxy</code>作为中间层，先将数据请求回本地，此过程是中间层node请求后台，不存在跨域。然后请求过来的数据放在本地，前端再去请求这个数据，就可以解决跨域问题了。</p><h5 id="4-echarts可视化"><a href="#4-echarts可视化" class="headerlink" title="4.echarts可视化"></a>4.echarts可视化</h5><p>&emsp;&emsp;如今相信大家不少项目需要用到数据可视化吧？各种统计图表、炫酷可视化效果等等，都需要一个不错的插件去支撑，比如<code>D3</code>、<code>AnyChart</code>、<code>echarts</code>、<code>HighCharts</code>等等。本案例用百度的<code>echarts</code>作为案例讲解。</p><ul><li>安装依赖<br>惯例，先装依赖。命令行工具执行<code>npm install echarts --save-dev</code>。</li><li><p>全局配置<br>安装完成后，全局引入。引入方法：进入<code>项目/src/main.js</code>，如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import echarts from &apos;echarts&apos;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure></li><li><p>使用<br>在<code>***.vue</code>组件中即可正常使用。我在此处用<code>Hello.vue</code>写示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//template</span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//script</span><br><span class="line">let myChart = this.$echarts.init(document.getElementById(&apos;demo&apos;)); //初始化</span><br><span class="line">//myChart.clear();//根据需求配置</span><br><span class="line">myChart.setOption(&#123; // 图表配置</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: &apos;category&apos;,</span><br><span class="line">    data: [&apos;Mon&apos;, &apos;Tue&apos;, &apos;Wed&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;]</span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;</span><br><span class="line">    type: &apos;value&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  series: [&#123;</span><br><span class="line">    data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">    type: &apos;line&apos;,</span><br><span class="line">    smooth: true</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//style</span><br><span class="line">#demo&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果图<br><img src="/images/posts/echartsDemo.png" alt="echarts效果图" title="echarts效果图"></p></li><li>按需引入<br>试过之后会发现echarts的包很大，会导致打包之后文件过大，因此如果不是刚需的情况下，建议按需引入来完成页面，会节省许多资源及开销。首先，将刚才<code>项目/src/main.js</code>中的两行代码注释掉。接下来，依然以<code>Hello.vue</code>举例，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//template &amp;&amp; style 不作变动</span><br><span class="line"></span><br><span class="line">//script</span><br><span class="line">const echarts = require(&apos;echarts/lib/echarts&apos;);//基本模板</span><br><span class="line">require(&apos;echarts/lib/chart/line&apos;);//折线图组件</span><br><span class="line">require(&apos;echarts/lib/component/title&apos;);//标题组件</span><br><span class="line"></span><br><span class="line"> // 初始化实例</span><br><span class="line">let myChart = echarts.init(document.getElementById(&apos;demo&apos;));</span><br><span class="line">// 图表配置</span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">  title: &#123; text: &apos;引入title组件可使用标题&apos; &#125;,</span><br><span class="line">  * * * * * * * *</span><br><span class="line">  * 别的配置不变 *</span><br><span class="line">  * * * * * * * *</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-lib-flexible-px2rem-loader"><a href="#5-lib-flexible-px2rem-loader" class="headerlink" title="5.lib-flexible | px2rem-loader"></a>5.lib-flexible | px2rem-loader</h5><p>&emsp;&emsp;lib-flexible作用在于写页面的时候实现自适应效果，包括文图排本等。需要配合<code>px2rem-loader</code>使用。步骤如下：</p><ul><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible --save-dev</span><br><span class="line"></span><br><span class="line">npm install px2rem-loader --save-dev</span><br></pre></td></tr></table></figure></li><li><p>引入<br><code>项目/src/main.js</code>中做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;lib-flexible</span><br></pre></td></tr></table></figure></li><li><p>主页添加视口配置<br><code>项目/index.html</code>中的<code>head</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>px2rem配置<br><code>项目/build/utils.js</code>中如下配置，然后重启项目即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//自适应字体配置</span><br><span class="line">const px2remLoader = &#123;</span><br><span class="line">  loader: &apos;px2rem-loader&apos;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    remUnit: 37.5   //设计稿的宽度除以 10，现阶段一般设计稿的宽度都为750px。如果基于iPhone5设计则为32.0(320 / 10 = 32)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function generateLoaders (loader, loaderOptions) &#123;</span><br><span class="line">  const loaders = options.usePostCSS ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]</span><br><span class="line"></span><br><span class="line">  * * *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更多关于<strong><em>px2rem</em></strong>的介绍请移步<strong><a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">官网</a></strong></p></li></ul><hr><h4 id="四、项目打包"><a href="#四、项目打包" class="headerlink" title="四、项目打包"></a>四、项目打包</h4><p><font size="1" color="#aaa">本章节介绍<code>打包</code>以及去除打包后资源中的<code>.map</code>文件。</font><br>开发完成后，怎么打包到线上呢？emm…this is a problem.</p><h5 id="1-打包"><a href="#1-打包" class="headerlink" title="1.打包"></a>1.打包</h5><p>命令行工具<code>cd</code>到该项目下，执行<code>npm run build</code>来构建项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                                  Asset       Size  Chunks                    Chunk Names</span><br><span class="line">               static/js/vendor.38756a8637fc194013f9.js     442 kB       0  [emitted]  [big]  vendor</span><br><span class="line">                  static/js/app.0b5326236ed4caddb252.js     1.1 kB       1  [emitted]         app</span><br><span class="line">             static/js/manifest.2ae2e69a05c33dfc65f8.js  857 bytes       2  [emitted]         manifest</span><br><span class="line">    static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css  164 bytes       1  [emitted]         app</span><br><span class="line">static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css.map  348 bytes          [emitted]</span><br><span class="line">           static/js/vendor.38756a8637fc194013f9.js.map    2.38 MB       0  [emitted]         vendor</span><br><span class="line">              static/js/app.0b5326236ed4caddb252.js.map    8.47 kB       1  [emitted]         app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js.map    4.97 kB       2  [emitted]         manifest</span><br><span class="line">                                             index.html  571 bytes          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></p><h5 id="2-位置"><a href="#2-位置" class="headerlink" title="2.位置"></a>2.位置</h5><p>打包完成后，去哪儿了呢？然后会发现在项目路径下，出现了一个<code>dist</code>的文件夹，这里面就是所谓的<strong><em> 包 </em></strong>了。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── project</span><br><span class="line">│  ├── build</span><br><span class="line">│  ├── config</span><br><span class="line">│  ├── dist// 包</span><br><span class="line">│  │  ├── static// 压缩后的资源</span><br><span class="line">│  │  ├── index.html// 主页</span><br><span class="line">│  ├── node_modules</span><br><span class="line">│  ├── src</span><br><span class="line">│  ├── static</span><br><span class="line">│  ├── test</span><br><span class="line">│  ├── .babelrc</span><br><span class="line">│  ├── .editorconfig</span><br><span class="line">│  ├── .gitignore</span><br><span class="line">│  ├── .postcssrc.js</span><br><span class="line">│  ├── index.html</span><br><span class="line">│  ├── package-lock.json</span><br><span class="line">│  ├── package.json</span><br><span class="line">│  ├── README.md</span><br></pre></td></tr></table></figure></p><h5 id="3-问题-amp-解决"><a href="#3-问题-amp-解决" class="headerlink" title="3.问题&amp;解决"></a>3.问题&amp;解决</h5><p>细心的你可能发现了，<code>dist/static/css(或js)</code>里面，每个css文件和js文件下有一个同名的<code>.map</code>文件，非常占空间，那它是做什么的呢？又怎么消除呢？</p><ul><li>作用<br>查过资料的小伙伴知道了，<code>.map</code>文件的作用就是：<strong>项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。</strong></li><li><p>如何解决<br>那么该如何处理这些文件呢？进入<code>项目/config/index.js</code>，定位到<code>productionSourceMap</code>，将其值改为<code>false</code>即可。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">productionSourceMap: false,</span><br></pre></td></tr></table></figure></li><li><p>重新打包验证<br>在命令行工具重新执行<code>npm run build</code>，发现<code>.map</code>文件已经消失，问题解决。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                              Asset       Size  Chunks                    Chunk Names</span><br><span class="line">           static/js/vendor.38756a8637fc194013f9.js     442 kB       0  [emitted]  [big]  vendor</span><br><span class="line">              static/js/app.3c96ecd23cc6dc073a3e.js    1.05 kB       1  [emitted]         app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js  799 bytes       2  [emitted]         manifest</span><br><span class="line">static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css   95 bytes       1  [emitted]         app</span><br><span class="line">                                         index.html  571 bytes          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="五、包优化"><a href="#五、包优化" class="headerlink" title="五、包优化"></a>五、包优化</h4><p>&emsp;&emsp;在项目逐渐壮大之后，虽然说上面已经讲述过了如何去除<code>.map</code>文件，但是其中许多<code>.js</code>文件的体积也不容小觑。尤其是发布到线上以后，某些css/js单个文件体积极可能超上兆的大小，如果项目服务器带宽不够，但是页面迸发量不低的话，分分钟就可能挂掉。有没有什么方法能进一步将包优化呢？</p><h5 id="1-gzip打包压缩"><a href="#1-gzip打包压缩" class="headerlink" title="1.gzip打包压缩"></a>1.gzip打包压缩</h5><ul><li><p>安装gzip<br>惯例，打开命令行工具，安装<code>gzip</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install compression-webpack-plugin@1.1.11 --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置<br><code>项目/config/index.js</code>中，定位到<code>productionGzip</code>，改为<code>true</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">productionGzip: true,</span><br></pre></td></tr></table></figure></li><li><p>重新打包<br><code>npm run build</code>走起，会发现打包的文件中多了同名的<code>.gz</code>文件，体积大概压缩了2/3，很棒的体验。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                              Asset       Size  Chunks                    Chunk Names</span><br><span class="line">           static/js/vendor.38756a8637fc194013f9.js     442 kB       0  [emitted]  [big]  vendor</span><br><span class="line">              static/js/app.3c96ecd23cc6dc073a3e.js    1.05 kB       1  [emitted]         app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js  799 bytes       2  [emitted]         manifest</span><br><span class="line">static/css/app.26e0081e2c66d97635076ad7fefbb5b6.css   95 bytes       1  [emitted]         app</span><br><span class="line">                                         index.html  571 bytes          [emitted]</span><br><span class="line">        static/js/vendor.38756a8637fc194013f9.js.gz     155 kB          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></li><li><p>nginx配置<br>虽然很给力的节省了许多资源，但是需要运维配合，在<code>gninx.conf</code>配置文件中做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http &#123;  </span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_disable &quot;msie6&quot;; </span><br><span class="line">  gzip_vary on; </span><br><span class="line">  gzip_proxied any;</span><br><span class="line">  gzip_comp_level 8;  //压缩级别</span><br><span class="line">  gzip_buffers 16 8k;</span><br><span class="line">  #gzip_http_version 1.1;</span><br><span class="line">  gzip_min_length 100; //不压缩临界值</span><br><span class="line">  gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-采用cdn加速"><a href="#2-采用cdn加速" class="headerlink" title="2.采用cdn加速"></a>2.采用cdn加速</h5><p>&emsp;&emsp;顾名思义，即将一些比较大的插件放在第三方服务器上去加载，这样不仅快很多，也能更加节约自己的服务器资源及宽带资源。我们一般选用<code>unpkg</code>或者<code>BootCDN</code>来作为第三方。在此处我们使用<code>BootCDN</code>来作为第三方加速使用。想了解更多相关知识请点击<strong><a href="https://unpkg.com" target="_blank" rel="noopener">unpkg</a></strong> <strong><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></strong>。</p><ul><li>查找包<br>打开<strong><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></strong>，在搜索栏搜索想要的第三方资源。如，我想要替换的是<code>echarts</code>、<code>Vue</code>、<code>axios</code>，则依次搜索<code>echarts</code>…，然后查找我想要的版本，然后<code>复制&lt;script&gt;标签</code>。</li><li><p>插入<br>在<code>项目/index.html</code>中将标签插入，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">//插入在这里</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.20/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/echarts/4.2.1-rc1/echarts-en.common.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>webpack配置<br>打开<code>项目/build/webpack.base.conf.js</code>中，添加<code>externals</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, &apos;../&apos;),</span><br><span class="line">  //..</span><br><span class="line">  externals:&#123;</span><br><span class="line">    &apos;vue&apos;: &apos;Vue&apos;,</span><br><span class="line">    &apos;vue-router&apos;: &apos;VueRouter&apos;,</span><br><span class="line">    &apos;echarts&apos;:&apos;echarts&apos;,</span><br><span class="line">    &apos;axios&apos;:&apos;axios&apos;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main配置<br>打开<code>项目/src/main.js</code>，将<code>Vue</code>等注释掉即可。不注释也可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// import Vue from &apos;vue&apos;</span><br></pre></td></tr></table></figure></li><li><p>打包<br>最后，见证奇迹的时刻就要到了~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\stydy\blog&gt;npm run build</span><br><span class="line"></span><br><span class="line">                                              Asset       Size  Chunks             Chunk Names</span><br><span class="line">           static/js/vendor.1f9d0533037be66c61cf.js    12.3 kB       0  [emitted]  vendor</span><br><span class="line">              static/js/app.912fd568ff845fde7c09.js    1.36 kB       1  [emitted]  app</span><br><span class="line">         static/js/manifest.2ae2e69a05c33dfc65f8.js  799 bytes       2  [emitted]  manifest</span><br><span class="line">static/css/app.edc64bd802cdc531977a30fcc8a9d6e1.css   62 bytes       1  [emitted]  app</span><br><span class="line">                                         index.html  876 bytes          [emitted]</span><br><span class="line">        static/js/vendor.1f9d0533037be66c61cf.js.gz    4.62 kB          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br></pre></td></tr></table></figure></li><li><p>搞定<br>上次打包，<code>vendor</code>大小为<strong>442kB</strong>，本次打包，疯狂缩小至<strong>12.3kB</strong>。神不神奇~厉不厉害~</p></li></ul><hr><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>&emsp;&emsp;到这里，vue项目从环境配置、项目搭建，到结构介绍、常用插件依赖安装使用做了比较详细的介绍，最后将项目优化也做了一定的补充。<br>&emsp;&emsp;<font color="deepskyblue">学而时习之，温故而知新。</font>至此，以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&lt;font size=&quot;2&quot; color=&quot;#aaa&quot;&gt;注：适用于windows系统&lt;/font&gt;&lt;br&gt;&lt;strong&gt;本文讲述要点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vue-cli项目搭建基本环境配置；&lt;/li&gt;
&lt;li&gt;常用插件描述及分享；&lt;/li&gt;
&lt;li&gt;项目运行、调试及打包；&lt;/li&gt;
&lt;li&gt;项目配置及优化；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://www.zhuxingmin.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>《面纱》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/03/25/%E3%80%8A%E9%9D%A2%E7%BA%B1%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/03/25/《面纱》随笔/</id>
    <published>2019-03-25T02:28:20.000Z</published>
    <updated>2019-04-03T09:01:48.492Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><font color="#6B92A3" size="5">面纱</font>  <font color="#aaaaaa">（英国毛姆创作长篇小说）</font><br><img src="/images/posts/面纱.png" alt="面纱" title="面纱"><br><a id="more"></a></p><blockquote><p>&emsp;&emsp;《面纱》是英国作家威廉·萨默塞特·毛姆创作的一部长篇小说，首次出版于1925年。<br>&emsp;&emsp;小说的故事发生在英国的殖民地香港和中国内陆一个叫“湄潭府”的地方。女主人公凯蒂·费恩因为和香港助理布政司查理通奸，被丈夫瓦尔特（香港政府的细菌学家）发现后胁迫她去了霍乱横行的湄潭府，最终瓦尔特不幸染病死去，凯蒂回到香港，重投查理怀抱后羞愧不已，最终回到英国和父亲和解，并和父亲同往巴哈马群岛生活。<br>&emsp;&emsp;从《面纱》一书中，读者能看到一个表面漠然中立的叙事者背后的模糊性和矛盾性：作为帝国叙事的一分子，作者的面纱之下隐藏着东方主义的政治文化观；作为一个关注人性的个体作家，他的面纱之下隐藏着他对爱的怀疑和渴求、对人性的嘲讽和宽容。</p></blockquote><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>&emsp;&emsp;女主人公凯蒂是生活于伦敦名利场的一位富家小姐，她容貌娇美，但精神空虚；她向往爱情，但爱慕虚荣；她待字闺中，但处处受到母亲的责备与“逼婚”。面对这种种“危机”，她决定给自己的爱情来一次“历险”：匆匆嫁给了性格孤僻、沉默寡言但却深爱着她的医生瓦尔特，并随其来到了英国的殖民地——香港。冲动的历险为其婚后的出轨埋下了伏笔。婚前，凯蒂对幸福美满的生活充满了憧憬，但丈夫的刻板严肃、疯狂工作和乏味无趣，使她顿觉寂寞、孤独和失落，不久就被花言巧语、生性多情的有妇之夫查理·唐森俘获，坠入婚外情而迷失自我。奸情败露之后，丈夫的疯狂报复、情人的无情冷落和自己的无限悔恨使凯蒂再次陷入了人生的危机。无望的她决心再次历险：陪丈夫奔赴霍乱肆虐的偏远山村——湄潭府。<br>&emsp;&emsp;在湄潭府，凯蒂经历了绝境下的自省，看清了查理的虚伪，体验了修女的博爱、无私以及对信仰的坚定，得到了宗教与道德的救赎，亲历了丈夫的死亡，彻悟了他的博爱与爱情的狭隘，遭遇了与查理的欲火复燃，经历了对情感本能、人性污点的幡然醒悟，坚定了追寻自我的意志和决心，最后她毅然踏上回家的路，重新开始了一段崭新的人生。</p><p><img src="/images/posts/毛姆.jpg" alt="毛姆" title="毛姆"></p><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><p><font color="#bbb" size="1">由于看的是译本，不是原本，所以对语言的优美和辞藻的华丽与否暂不做赏析。</font><br>&emsp;&emsp;《面纱》作者毛姆被很多评论家评论为“二流作家”，原因无他，创新性、逻辑性及技巧性不足够高。艺术来源于生活又高于生活，这部《面纱》我不知道能否到达“艺术”之境界，不知道是否升华于生活，但是它一定是贴切生活，深入到生活中去的。小说中所描述出的爱、责任、被判、救赎与觉醒深入人心，也编织成了全篇小说的脉络。<br>&emsp;&emsp;故事从爱与责任讲起。女主凯蒂从小缺乏疼爱，母亲势力且强势，害怕26岁的自己变成老处女。男主瓦尔特不善言辞、沉默寡言，是一个缺乏生活趣味的细菌学家。从社交舞会上与女主相识，追到手后匆匆结婚。一次偶然发现了奉若上宾的妻子却与他人（沃丁顿）有染，随后给妻子凯蒂两个选择，要么离婚要么陪同自己到湄潭府瘟疫区，这个地方可以说九死一生。随后二人到香港霍乱区开始“新”生活。男主在湄潭府疯狂工作，尝试用工作去洗刷与妻子情感的污垢，而妻子凯蒂则终日彷徨，浑浑噩噩，直到那一天，走进了教堂。<br>&emsp;&emsp;走进教堂的那一天，是自我救赎的开始。以前，自己容貌娇美，但精神空虚；向往爱情，但爱慕虚荣；待字闺中，却被“逼婚”…种种因果，造成了当下不可逆转之局势后，直到这天，在教堂帮忙了一天，蓦然回首，才开始自省。之后便成了教堂的常客，甚至工作于此。在这里，凯蒂体验了修女的博爱、无私以及对信仰的坚定，甚至后来得知丈夫对于霍乱区的贡献，以及丈夫染上霍乱也未曾停歇，直至生命的尽头，理解了丈夫瓦尔特的博爱以及对爱情的不圆满，甚至狭隘。在此过程中，女主凯蒂内心逐渐完成自我救赎，看到光亮，理解生活的意义。在男主病逝后，女主凯蒂回到香港（当时香港是英国殖民地），随后又遇到了查理。在欲火复燃之后，沃丁顿妻子出现。沃丁顿妻子是一位满洲格格，外貌特征符合西方对东方宫廷女性的想象与审美。与她见面却没有直接的言语对白，只有“心理交流”，但是却让自己感受到了这位格格身上所代表的的灿烂文明。与此同时，自己算是经历了一场领悟，坚定了追寻自我的意志和决心。最后毅然踏上回家的路，与父亲和好，走向新的人生。</p><h5 id="关于爱与责任"><a href="#关于爱与责任" class="headerlink" title="关于爱与责任"></a>关于爱与责任</h5><p>&emsp;&emsp;对于男主瓦尔特来讲，从原文<code>我知道你愚蠢、轻佻、头脑空虚，然而我爱你。我知道你的企图、你的理想，你势力、庸俗，然后我爱你。我知道你是个二流货色，然而我爱你。</code>开始，已是深情告白，而女主凯蒂却不为所动。对于沃尔特来说，自己的伤悲只有自己可以理解，非常单纯的爱。即使发现妻子不忠，开始唇枪舌战，也依然保持镇定姿态和绅士风度。也同样由于爱之深所以恨之切，从而走向报复道路，去到霍乱区。<br>&emsp;&emsp;瓦尔特却一直深爱凯蒂不肯放手，沃丁顿深爱满洲格格（他的妻子），唐森深爱自己妻子，修道院姐们们走在前线与病魔抗争，一系列的周边情感感染着凯蒂，渐渐地凯蒂也有了希望和勇气，学会慈悲与爱，放下心魔。</p><p><img src="/images/posts/凯蒂.jpg" alt="凯蒂" title="凯蒂"></p><h5 id="关于人格觉醒"><a href="#关于人格觉醒" class="headerlink" title="关于人格觉醒"></a>关于人格觉醒</h5><p>&emsp;&emsp;某乎上有话题：为什么<code>永远不要去考验人性</code>？而其中高票回答：<code>因为大多数时候，人是选择做一个好人，而不是本性如此。</code>小说中女主从最开始的人格为精神空虚、爱慕虚荣，此后与男主结婚后，依然是处于精神空虚状态，因而让得第三者沃尔顿有机可乘。东窗事发之后，由于沃尔顿的劝告甚至不想卷入其中，导致精神萎靡不振、浑浑噩噩。去到霍乱区之后，更加严重。到修道院开始，内心仿佛有了些许光亮。进而经常去修道院帮忙之后，从修女姐妹们的日常生活中得到救赎，找到了一些生活的意义以及开始忠于内心。神秘的面纱一角被掀开之后，开始审视自己，自我救赎，最终完成内心的升华。</p><h5 id="作品评价"><a href="#作品评价" class="headerlink" title="作品评价"></a>作品评价</h5><p>&emsp;&emsp;贴切生活，以故事的尖锐以及矛盾来铺垫人物的内心世界，加上道德冲突、人性考验，不矢为一部杰作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;&lt;font color=&quot;#6B92A3&quot; size=&quot;5&quot;&gt;面纱&lt;/font&gt;  &lt;font color=&quot;#aaaaaa&quot;&gt;（英国毛姆创作长篇小说）&lt;/font&gt;&lt;br&gt;&lt;img src=&quot;/images/posts/面纱.png&quot; alt=&quot;面纱&quot; title=&quot;面纱&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>三种境界</title>
    <link href="https://www.zhuxingmin.com/2019/03/24/%E4%B8%89%E7%A7%8D%E5%A2%83%E7%95%8C/"/>
    <id>https://www.zhuxingmin.com/2019/03/24/三种境界/</id>
    <published>2019-03-24T12:47:20.000Z</published>
    <updated>2019-03-25T02:00:37.611Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>古今之成大事业、大学问者，罔不经过三种之境界。<br><a id="more"></a></p><h4 id="三种境界"><a href="#三种境界" class="headerlink" title="三种境界"></a>三种境界</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">昨夜西风凋碧树。独上高楼，望尽天涯路。</span><br><span class="line">衣带渐宽终不悔，为伊消得人憔悴。</span><br><span class="line">众里寻他千百度，回头蓦见，那人正在灯火阑珊处。</span><br></pre></td></tr></table></figure><h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><blockquote><p>&emsp;&emsp;古今之成大事业、大学问者，罔不经过三种之境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”此第一境界也。“衣带渐宽终不悔，为伊消得人憔悴。”此第二境界也。“众里寻他千百度，回头蓦见（当作‘蓦然回首’），那人正（当作‘却’）在灯火阑珊处。”此第三境界也。此等非大词人不能道。然遽依此意解释诸词，恐为晏、欧诸公所不许也。</p></blockquote><h4 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h4><p>&emsp;&emsp;古今那些成就大事业、大学问的人，都必然经历三种境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”这是第一层境界。“衣带渐宽终不悔，为伊消得人憔悴。”这是第二层境界。“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”这是第三种境界。像这样的语言，只有大词人才讲得出来。但是，我竟然这样来解释上面的词，恐怕晏殊、欧阳修这些大词人是不会同意的吧。</p><h4 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h4><p>&emsp;&emsp;《人间词话》赖以成名的数段话中，这一段毫无疑问占据了一个重要位置。这段话比喻贴切，佳句宛如浑然天成般镶嵌其中，让人称绝。王老先生正是“成大学问者”，说的这些话也正是他的切身感触。<br>&emsp;&emsp;<code>昨夜西风凋碧树。独上高楼，望尽天涯路。</code>第一境界即入门前茫无头绪、求索无门的疑惑与痛苦。王国维最得意的学问在于史学、古文学和美学。这几门学问千头万绪，典籍浩如烟海，那种想要入门之前的彷徨、痛苦与渴求，用<code>独上高楼，望尽天涯路</code>来比喻，实在是再贴切不过。<br>&emsp;&emsp;<code>衣带渐宽终不悔，为伊消得人憔悴。</code>第二境界是叩门时以苦做舟、以勤为径、上下求索的执着于忍耐。古往今来的大师无不经历过此阶段。不执着，无以成。既已入门，注定将为心中的<code>伊人</code>把此生消磨。王国维在乱世之中，一心治学，那种执着、悲愤、孤苦的心境，恐怕不是现代人所能理解的。唯有这种执着于隐忍，才成就了他在近代史上第一无二的大师地位。<br>&emsp;&emsp;<code>众里寻他千百度，回头蓦见，那人正在灯火阑珊处。</code>第三境界则是功夫到处，灵犀一点、参透真谛、已入门中的喜悦与释然。以勤为径，很多人都如此，但是要攀上顶峰，就不是一般人能做到了。那种灵犀一点参透真谛的大智慧、大喜悦，也只有古今中外各个领域中的天才们感悟得到。这种顿悟就好比掉在牛顿身边的那个苹果，释迦牟尼眼前的那颗菩提，一切的一切忽然间都豁然开朗，往西追寻之中的种种艰辛苦楚，在这一瞬间都得到了完美补偿。<br>&emsp;&emsp;当然，这些都不可能是词作者的愿意，所以王国维接着又说：<code>此等非大词人不能道。然遽依此意解释诸词，恐为晏、欧诸公所不许也。</code>这段话鞭辟入里，贴切浑融，其深致款曲已经不止于词话的范围了，即使晏、欧诸公在世，香叶不容置喙，不得不叹服王氏的才情与睿智吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;古今之成大事业、大学问者，罔不经过三种之境界。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>js监测页面滑至底部响应事件</title>
    <link href="https://www.zhuxingmin.com/2019/03/18/js%E7%9B%91%E6%B5%8B%E9%A1%B5%E9%9D%A2%E6%BB%91%E8%87%B3%E5%BA%95%E9%83%A8%E5%93%8D%E5%BA%94%E4%BA%8B%E4%BB%B6/"/>
    <id>https://www.zhuxingmin.com/2019/03/18/js监测页面滑至底部响应事件/</id>
    <published>2019-03-18T06:16:30.000Z</published>
    <updated>2019-03-18T07:42:48.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;<font color="#0099ff">页面滑动至底部时候，触发响应</font></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>服务协议滑动完毕可点击同意按钮;</li><li>页面滑至底部加载更多(新闻、列表等);</li><li>自动加载下一页等…<a id="more"></a></li></ol><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>&emsp;&emsp;首先，既然是监听，则首要条件便是监听页面滑动(滚动)事件；其次，由于一般页面不会一屏展示完，因此需要依赖BOM来辅助完成一些计算。最后，达到某种条件，触发方法。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> window.onscroll = function()&#123;</span><br><span class="line">//滚动条滚动时，距离顶部的距离</span><br><span class="line">let scrollTop = document.documentElement.scrollTop||document.body.scrollTop;</span><br><span class="line">//可视区的高度</span><br><span class="line">let windowHeight = document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class="line">//滚动条的总高度</span><br><span class="line">let scrollHeight = document.documentElement.scrollHeight||document.body.scrollHeight;</span><br><span class="line">//滚动条到底部的条件</span><br><span class="line">if(scrollTop + windowHeight &gt;= scrollHeight)&#123;</span><br><span class="line">//此处触发响应事件</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">网页可见区域宽：document.body.clientWidth</span><br><span class="line">网页可见区域高：document.body.clientHeight</span><br><span class="line">网页可见区域宽：document.body.offsetWidth (包括边线的宽)</span><br><span class="line">网页可见区域高：document.body.offsetHeight (包括边线的高)</span><br><span class="line">网页正文全文宽：document.body.scrollWidth</span><br><span class="line">网页正文全文高：document.body.scrollHeight</span><br><span class="line">网页被卷去的高：document.body.scrollTop</span><br><span class="line">网页被卷去的左：document.body.scrollLeft</span><br><span class="line">//对应的dom元素的宽高有以下几个常用的：</span><br><span class="line">元素的实际高度：document.getElementById(&quot;div&quot;).offsetHeight</span><br><span class="line">元素的实际宽度：document.getElementById(&quot;div&quot;).offsetWidth</span><br><span class="line">元素的实际距离左边界的距离：document.getElementById(&quot;div&quot;).offsetLeft</span><br><span class="line">元素的实际距离上边界的距离：document.getElementById(&quot;div&quot;).offsetTop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;font color=&quot;#0099ff&quot;&gt;页面滑动至底部时候，触发响应&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;服务协议滑动完毕可点击同意按钮;&lt;/li&gt;
&lt;li&gt;页面滑至底部加载更多(新闻、列表等);&lt;/li&gt;
&lt;li&gt;自动加载下一页等…
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>《惊奇队长》随笔</title>
    <link href="https://www.zhuxingmin.com/2019/03/10/%E3%80%8A%E6%83%8A%E5%A5%87%E9%98%9F%E9%95%BF%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2019/03/10/《惊奇队长》随笔/</id>
    <published>2019-03-10T08:50:38.000Z</published>
    <updated>2019-03-11T03:35:12.206Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>&emsp;&emsp;卡罗尔·丹弗斯（布丽·拉尔森饰）是克里人的精英部队一员，但她挣扎着回忆过去，对于怎么获得超能力、以及之前的人生等超能力之前的人生，她只在梦中有片段不成章的记忆，这层困扰引起的情绪波动也进而影响她对超能力的掌控。所幸，在星际战队指挥官（裘德·洛饰）的调教之下，卡罗尔·丹弗斯学会如何控制自己的超能力。<br>&emsp;&emsp;一次外星任务中，卡罗尔·丹弗斯因故来到了地球，并遇到还是低阶探员的尼克·弗瑞（塞缪尔·杰克逊饰），卡罗尔·丹弗斯与尼克·弗瑞一起追捕在地球惹事的变形人塔罗斯（本·门德尔森饰），同时，也发现自己如何获得超能力。</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1552218574750&amp;di=0faea9b11585b1f211c6c5795e90f261&amp;imgtype=0&amp;src=http%3A%2F%2Fimage14.m1905.cn%2Fuploadfile%2F2018%2F0517%2F20180517050025402068.jpg" alt="惊奇队长" title="惊奇队长"><br><a id="more"></a></p><h4 id="起"><a href="#起" class="headerlink" title="起"></a>起</h4><p>&emsp;&emsp;时间回到前天(2019年3月8日18:00:00)。这是不寻常的一天，不仅仅是女神节，更是跟基友约好看惊奇队长首映的日子。<br>&emsp;&emsp;下午6点，准备下班。但是作为猿，按时下班显然不是我们的风格，于是噼里啪啦一顿操作又改了个产品刚提出的优化，并且自测完毕。ok，天儿也不早了，赶紧挤地铁回家准备观影去吧。没想到的是，为了一场电影，会有一场场刺激等待着我们。</p><h4 id="Then"><a href="#Then" class="headerlink" title="Then"></a>Then</h4><p>&emsp;&emsp;19:35，超市购物了一波回到家，小憩了一下下，喝点酸奶补补体力。<br>&emsp;&emsp;20:35，嘀嘀了一辆优享专车，下楼跟基友等车。<br>&emsp;&emsp;上车。<br>&emsp;&emsp;堵车。<br>&emsp;&emsp;司机人很nice，一个看起来有修养的大龄先生。<br>&emsp;&emsp;两分钟后，我们在后排毫无感觉，司机下了车，前面司机也下了车。<br>&emsp;&emsp;嗯，追尾。<br>&emsp;&emsp;ok,下车，换车。<br>&emsp;&emsp;重新嘀嘀。<br>&emsp;&emsp;“耐心”等待中…<br>&emsp;&emsp;上车。<br>&emsp;&emsp;驾驶过堵车区，一路飞……额，红灯。<br>&emsp;&emsp;“铃铃铃铃铃铃”电话响起来~<br>&emsp;&emsp;“…………”<br>&emsp;&emsp;基友：“完了，一个需求忘记处理”<br>&emsp;&emsp;“……看急不急，不急了明天上午公司处理”<br>&emsp;&emsp;下车。<br>&emsp;&emsp;取票。<br>&emsp;&emsp;21:03，等待进场。<br>&emsp;&emsp;21:05，开始检票。<br>&emsp;&emsp;21:06,，“不行，我得回去先处理需求去了……”。<br>&emsp;&emsp;于是，检票只检了一张，有了下图：<br><img src="/images/posts/《惊奇队长》影票.jpg" alt="票根" title="《惊奇队长》影票"></p><h4 id="So"><a href="#So" class="headerlink" title="So"></a>So</h4><p>&emsp;&emsp;被迫一个人看完了整场。</p><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><h5 id="关于剧情"><a href="#关于剧情" class="headerlink" title="关于剧情"></a>关于剧情</h5><p>&emsp;&emsp;一向的漫威思维，并且在女神节这么个档期，祭出目前最强大的主角英雄，且为女英雄，应景至极。前半篇在不停的铺垫，以及给出一些断断续续的女主回忆。从女主发现自己被骗之后，一系列举动将剧情推向高潮。<br>&emsp;&emsp;故事发生于上世纪90年代，在此之时，复仇者联盟尚未建立。居中也道出了神盾局局长独眼的原因以及建立复仇者联盟的初心。<br>&emsp;&emsp;斯克鲁人怕猫，检测猫为“噬元兽”，克里人怕尬舞。然而关键时刻，猫吞噬“魔方”，吞噬“敌军”，真的救了神盾局长。</p><h5 id="关于彩蛋"><a href="#关于彩蛋" class="headerlink" title="关于彩蛋"></a>关于彩蛋</h5><p>&emsp;&emsp;很多评论说，又是“看彩蛋送电影”，第一个彩蛋比正片好看。确实，在漫威宇宙中，自打复联出来之后，新出的超级英雄好像都与复联有着密不可分的联系，甚至都是为了复联去添砖加瓦。但是在多方面关于复联四的猜测中，惊奇队长却是救世中不可或缺且极为重要的一环。如果只是粗略的一笔带过，进而在复联四中直接使用其几乎藐视现阶段复联所有人所有技能的特殊能力，那在复联四中将会显得极为仓促且莫名其妙。因此，此英雄作为一部新的超级英雄，极有必要对齐以及复联历史进行一些必要的补充，以及填坑。</p><h5 id="关于斯坦●李"><a href="#关于斯坦●李" class="headerlink" title="关于斯坦●李"></a>关于斯坦●李</h5><p>&emsp;&emsp;老爷子去年过世，与东方的金庸大侠先后将生命挪出了时间。至此，东方再无江湖，漫威再无宇宙。<br>&emsp;&emsp;剧中老爷子作为路人，在公交车上看书，与惊奇队长偶遇。上一次同样是在公交车看书，遇到了奇异博士。<br>&emsp;&emsp;所以是不是为我们敲响警钟，多出门，多读书，不要总在家里宅着，说不定也能偶遇超级英雄呢。</p><h5 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h5><p>&emsp;&emsp;《蚁人2》片尾彩蛋中，蚁人进入量子域，在入口处，小女友及其父母随着灭霸的响指化为了灰烬，因此是否在复联四中也会贡献在即的一份力量呢？</p><center>等待ing复联四…</center>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;卡罗尔·丹弗斯（布丽·拉尔森饰）是克里人的精英部队一员，但她挣扎着回忆过去，对于怎么获得超能力、以及之前的人生等超能力之前的人生，她只在梦中有片段不成章的记忆，这层困扰引起的情绪波动也进而影响她对超能力的掌控。所幸，在星际战队指挥官（裘德·洛饰）的调教之下，卡罗尔·丹弗斯学会如何控制自己的超能力。&lt;br&gt;&amp;emsp;&amp;emsp;一次外星任务中，卡罗尔·丹弗斯因故来到了地球，并遇到还是低阶探员的尼克·弗瑞（塞缪尔·杰克逊饰），卡罗尔·丹弗斯与尼克·弗瑞一起追捕在地球惹事的变形人塔罗斯（本·门德尔森饰），同时，也发现自己如何获得超能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1552218574750&amp;amp;di=0faea9b11585b1f211c6c5795e90f261&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fimage14.m1905.cn%2Fuploadfile%2F2018%2F0517%2F20180517050025402068.jpg&quot; alt=&quot;惊奇队长&quot; title=&quot;惊奇队长&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="电影" scheme="https://www.zhuxingmin.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js/vue输入联想功能</title>
    <link href="https://www.zhuxingmin.com/2019/03/04/js-vue%E8%BE%93%E5%85%A5%E8%81%94%E6%83%B3%E5%8A%9F%E8%83%BD/"/>
    <id>https://www.zhuxingmin.com/2019/03/04/js-vue输入联想功能/</id>
    <published>2019-03-04T06:22:13.000Z</published>
    <updated>2019-03-04T08:36:59.112Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现功能如下"><a href="#实现功能如下" class="headerlink" title="实现功能如下"></a>实现功能如下</h4><p><img src="/images/posts/联想.gif" alt="模糊搜索|输入联想" title="模糊搜索|输入联想"><br><a id="more"></a></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>&emsp;&emsp;最近需求要有一个输入框模糊搜索功能，且需要匹配输入字符联想。从网上看了一些demo，总结出来一套思路，配合vue将其开发并稍做优化处理。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>基础：</p><ul><li>1.一个输入框（输入字符）、一个ul框（展示匹配数据）</li><li>2.将输入字符与列表中字符比对</li><li>3.新建空数组，将比对结果匹配项放入此数组中</li><li>4.将数组数据铺到ul中</li></ul><p>优化：</p><ul><li>5.鼠标滑入某一项变更背景色</li><li>6.点击选中数据展示到input框中</li><li>7.键盘上下键控制上一个下一个</li><li>8.回车键将选中项目展示到input框中</li></ul><hr><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1.HTML"></a>1.HTML</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//input框</span><br><span class="line"> &lt;input type=&quot;text&quot;</span><br><span class="line">   @keydown.down=&quot;changeDown&quot;//键盘事件</span><br><span class="line">   @keydown.up=&quot;changeUp&quot;</span><br><span class="line">   v-model=&quot;searchVal&quot;//绑定输入的值</span><br><span class="line">   @keyup=&quot;searchFn&quot;</span><br><span class="line">   @keyup.enter=&quot;enter&quot;//回车将选中项目展示到input框中</span><br><span class="line">   placeholder=&quot;input name&quot;/&gt;</span><br><span class="line">   </span><br><span class="line">//选项框 判断如果新数组中有值则显示本备选框</span><br><span class="line">&lt;ul class=&quot;ulAdd&quot; v-if=&quot;searchResult&quot;&gt;</span><br><span class="line">&lt;li v-for=&quot;(item, index) in searchResult&quot;</span><br><span class="line">:class=&quot;&#123;bgColor: index === now&#125;&quot;//渲染样式</span><br><span class="line">@click=&quot;alertFn&quot;//点击将选中项目展示到input框中</span><br><span class="line">@mouseenter=&quot;mouseEnter(index)&quot;//渲染鼠标移入/移出样式</span><br><span class="line">@mouseleave=&quot;mouseleave&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h5 id="2-数据"><a href="#2-数据" class="headerlink" title="2.数据"></a>2.数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">searchVal: &apos;&apos;, //绑定name</span><br><span class="line">searchResult: [],   //匹配结果</span><br><span class="line">now: -1,        //索引</span><br><span class="line">nameList: [//name列表</span><br><span class="line">&#123;name: &apos;张三&apos;,id: &apos;9001&apos;&#125;,</span><br><span class="line">&#123;name: &apos;张四&apos;,id: &apos;9002&apos;&#125;,</span><br><span class="line">&#123;name: &apos;李三&apos;,id: &apos;9003&apos;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3.事件处理"></a>3.事件处理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//过滤</span><br><span class="line">searchFn (e) &#123;</span><br><span class="line">let val = e.target.value;//输入的值</span><br><span class="line">this.searchResult = [];//清空存结果的数组</span><br><span class="line">if (val) &#123;</span><br><span class="line">this.nameList.forEach(function(item) &#123;</span><br><span class="line">let pattern = new RegExp(&apos;&apos;+val, &apos;g&apos;);//正则校验</span><br><span class="line">if (pattern.test(item.name)) &#123;</span><br><span class="line">this.searchResult.push(&#123;name: item.name,id: item.id&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.bind(this)); // 绑定当前实例对象</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将选中项目展示到input框中</span><br><span class="line">alertFn () &#123;</span><br><span class="line">this.searchVal = this.searchResult[this.now].agentname;</span><br><span class="line">this.searchResult = [];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//按键盘↓键</span><br><span class="line">changeDown () &#123;</span><br><span class="line">this.now ++;</span><br><span class="line">if(this.now == this.searchResult.length) &#123;</span><br><span class="line">this.now = -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//按键盘↑键</span><br><span class="line">changeUp () &#123;</span><br><span class="line">this.now --;</span><br><span class="line">if (this.now === -2) &#123;</span><br><span class="line">this.now = this.searchResult.length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//回车将选中项目展示到input框中</span><br><span class="line">enter () &#123;</span><br><span class="line">this.searchVal = this.searchResult[this.now].agentname;</span><br><span class="line">this.searchResult = [];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//清空结果</span><br><span class="line">deleteList () &#123;</span><br><span class="line">this.searchResult = [];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//鼠标移入</span><br><span class="line">mouseEnter (index) &#123;</span><br><span class="line">this.now = index;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//鼠标移出</span><br><span class="line">mouseleave (index) &#123;</span><br><span class="line">this.now = -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注"><a href="#注" class="headerlink" title="注"></a>注</h5><p>&emsp;&emsp;样式自定义即可。</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>功能实现，且完成了一定的优化，但存在一定的不足：</p><ol><li>数组循环可用新语法；</li><li>多个方法可合并；</li><li>可以进一步优化，做出输入字母也同样联想。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;实现功能如下&quot;&gt;&lt;a href=&quot;#实现功能如下&quot; class=&quot;headerlink&quot; title=&quot;实现功能如下&quot;&gt;&lt;/a&gt;实现功能如下&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/联想.gif&quot; alt=&quot;模糊搜索|输入联想&quot; title=&quot;模糊搜索|输入联想&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="输入框联想" scheme="https://www.zhuxingmin.com/tags/%E8%BE%93%E5%85%A5%E6%A1%86%E8%81%94%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>vue项目打包后资源路径与背景图路径问题</title>
    <link href="https://www.zhuxingmin.com/2019/02/28/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%90%8E%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.zhuxingmin.com/2019/02/28/vue项目打包后资源路径与背景图路径问题/</id>
    <published>2019-02-28T13:55:51.000Z</published>
    <updated>2019-03-18T07:44:06.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要解决基于<code>vue/vuex</code>打包后经常出现的两个问题：</p><ul><li>静态资源路径错位问题</li><li>css背景图路径错位问题<a id="more"></a></li></ul><hr><h3 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h3><p>&emsp;&emsp;一般通过vue-cli脚手架开发的时候，开发模式使用<code>npm run dev</code>进行开发，一切配置正常。但是当打包后会出现各种问题，其中两个最为常见且致命的问题莫过于上述的两个资源路径错位问题，但是当我们分析后，发现依旧是配置问题。尤其是当好多猿把<code>assetsPublicPath: &#39;/&#39;</code>的<code>&#39;/&#39;</code>改为<code>&#39;./&#39;</code>后，一般的资源路径包括css、js、图片音视频等都能校正，然而唯独css设置的背景图却全部失效。接下来请看此bug图。</p><ul><li><strong>bug图：</strong><br><strong>1. 资源路径404</strong><br><img src="https://upload-images.jianshu.io/upload_images/2502265-9327d2c5c190797a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="资源路径404.png" title="资源路径404"><br><strong>2. 背景图路径404</strong><br><img src="https://upload-images.jianshu.io/upload_images/2502265-d9a32ca040d852d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="背景图404.jpg" title="背景图路径404"><br>可以看到背景图的路径错且重复。</li></ul><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>1. 静态资源路径错位问题解决方案：</strong><br>在<code>项目/config/index.js</code>中找到<code>module.exports</code>中的<code>build</code>，其中的<code>assetsPublicPath</code>项改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetsPublicPath: &apos;./&apos;, //解决静态资源路径错位问题</span><br></pre></td></tr></table></figure></p><p><strong>2. css背景图路径错位问题解决方案：</strong><br>在<code>项目/build/utils.js</code>中找到<code>ExtractTextPlugin.extract</code>，追加<code>publicPath: &#39;../../&#39;</code>：<br>代码片段为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return ExtractTextPlugin.extract(&#123;</span><br><span class="line">            use: loaders,</span><br><span class="line">            fallback: &apos;vue-style-loader&apos;,</span><br><span class="line">            publicPath: &apos;../../&apos;  //解决css背景图路径错位问题</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><hr><ul><li><strong>测试结果：</strong><br>ok，配置完毕，打包测试下~<br><code>npm run build</code> 倒数10个数：10,9,8,7,6…<br>控制台空空如也~完美！<br><img src="https://upload-images.jianshu.io/upload_images/2502265-7bd97c7e5bec7d8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="完美解决.png" title="解决"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文主要解决基于&lt;code&gt;vue/vuex&lt;/code&gt;打包后经常出现的两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态资源路径错位问题&lt;/li&gt;
&lt;li&gt;css背景图路径错位问题
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="打包" scheme="https://www.zhuxingmin.com/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>to 2019</title>
    <link href="https://www.zhuxingmin.com/2019/02/25/to-2019/"/>
    <id>https://www.zhuxingmin.com/2019/02/25/to-2019/</id>
    <published>2019-02-25T09:29:07.000Z</published>
    <updated>2019-04-01T10:59:32.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;<em>2019悄然来袭，且2月将逝。值此春天即醒之际，万物复苏之时，应对2018正式告别，并在充满期待的2019之中完成一些目标来积累沉淀自己。</em></p><a id="more"></a><hr><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>规划大致分为以下四（+1）个大方面：</p><ul><li>学习</li><li>工作</li><li>生活</li><li>财务</li><li>其他 （愿世界和平）</li></ul><p>其详细信息将通过X-Mind作导图式的png图片展示，如下：</p><p><img src="/images/posts/2019.png" alt="2019规划" title="2019个人规划"></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>完成后做“√”标记；</li><li>定期更新：月更，更新文本及感受类图文；季更，更新图片及日期；</li><li>不定期更新： 完成后更新；</li><li>更新准则：上传新图，标明日期；</li><li>训练自律;<br><code>随心所欲的日子里，大部分时候都怅然若失。</code></li></ol><h3 id="更新0226"><a href="#更新0226" class="headerlink" title="更新0226"></a>更新0226</h3><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><ol><li>可乐鸡翅，招待朋友songleitravel,于2019.02.16完成；</li><li>建站，GitHub+Hexo+nexT，于2019.02.20完成；</li><li>发表博文，包括读书随笔与技术随笔；</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>&emsp;&emsp;本月前期学习阮一峰老师的《ES6》，后期项目压力上来，暂搁一旁。这种行为不可取，在此反思。另，本季度读书及笔记均会在本站博客中体现，已完成<a href="/2019/02/23/《小狗钱钱1》随想/" title="《小狗钱钱1》随想">《小狗钱钱1》随想</a>。</p><hr><h3 id="更新0401"><a href="#更新0401" class="headerlink" title="更新0401"></a>更新0401</h3><p>本期更新主要如下：<br><img src="/images/posts/2019-1季度.png" alt="2019-1季度" title="2019-1季度"></p><h4 id="读书篇"><a href="#读书篇" class="headerlink" title="读书篇"></a>读书篇</h4><ul><li><a href="/2019/02/23/《小狗钱钱1》随想/" title="《小狗钱钱1》随想">《小狗钱钱1》随想</a></li><li><a href="/2019/03/25/《面纱》随笔/" title="《面纱》随笔">《面纱》随笔</a></li></ul><h4 id="工作篇"><a href="#工作篇" class="headerlink" title="工作篇"></a>工作篇</h4><ul><li>es6学习</li><li>博客更新，包括如下：</li></ul><table><thead><tr><th style="text-align:center">文章</th><th style="text-align:center">更新时间</th></tr></thead><tbody><tr><td style="text-align:center">Vue打包后map文件处理</td><td style="text-align:center">02-22</td></tr><tr><td style="text-align:center">vue-cli自适应/flexible屏幕字体自适应布局及配置</td><td style="text-align:center">02-23</td></tr><tr><td style="text-align:center">vue中axios跨域问题</td><td style="text-align:center">02-24</td></tr><tr><td style="text-align:center">vue项目打包后资源路径与背景图路径问题</td><td style="text-align:center">02-28</td></tr><tr><td style="text-align:center">js/vue输入联想功能</td><td style="text-align:center">03-04</td></tr><tr><td style="text-align:center">js监测页面滑至底部响应事件</td><td style="text-align:center">03-18</td></tr><tr><td style="text-align:center">post_link vue项目搭建及基本配置</td><td style="text-align:center">03-27</td></tr></tbody></table><h4 id="生活篇"><a href="#生活篇" class="headerlink" title="生活篇"></a>生活篇</h4><ul><li>影音娱乐<ol><li><a href="/2019/03/10/《惊奇队长》随笔/" title="《惊奇队长》随笔">《惊奇队长》随笔</a></li><li>《探清水河》小调</li></ol></li><li>做菜<ol><li>红烧肉</li><li>麻婆豆腐</li><li>可乐鸡翅</li></ol></li></ul><h4 id="财务篇"><a href="#财务篇" class="headerlink" title="财务篇"></a>财务篇</h4><ol><li>存款达到目标<code>1/3</code>；</li><li>被动收益达到目标<code>1/5</code>；</li><li>公益方面利用支付宝<code>月捐</code>，按月自动捐出；</li><li>蚂蚁森林领养两棵树，完成全年<code>2/3</code></li></ol><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><font size="2" color="deepskyblue">完成度尚可，但是1个/月的训练项目未完成。继续努力！</font>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;em&gt;2019悄然来袭，且2月将逝。值此春天即醒之际，万物复苏之时，应对2018正式告别，并在充满期待的2019之中完成一些目标来积累沉淀自己。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="规划" scheme="https://www.zhuxingmin.com/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>vue中axios跨域问题</title>
    <link href="https://www.zhuxingmin.com/2019/02/24/vue%E4%B8%ADaxios%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://www.zhuxingmin.com/2019/02/24/vue中axios跨域问题/</id>
    <published>2019-02-24T11:08:57.000Z</published>
    <updated>2019-02-26T05:51:52.620Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>兴冲冲的开始用vue封装组件、自定义指令之后，开始实战。诶，等等，貌似少了……交互？<br>大致研究了一下axios，但是存在以下两个问题：<br><a id="more"></a></p><ul><li>跨域问题</li><li>数据格式问题<br>跨域信息示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Failed to load http://localhost:8080/login:</span><br><span class="line">Response to preflight request doesn&apos;t pass access control check:</span><br><span class="line">No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. </span><br><span class="line">Origin &apos;http://localhost:8080&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure></li></ul><hr><p>所以针对该问题给出一套解决方案（以post请求为例）：</p><h4 id="1-跨域处理"><a href="#1-跨域处理" class="headerlink" title="1.跨域处理"></a>1.跨域处理</h4><p><code>cinfig/index.js</code>中对<code>proxyTable</code>做如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">     &apos;/api&apos;: &#123;</span><br><span class="line">       target: &apos;https://0.0.0.0:8080/login&apos;,      //设置url公用部分，记得加http/https和端口号</span><br><span class="line">       changeOrigin: true,</span><br><span class="line">       pathRewrite: &#123;</span><br><span class="line">         &apos;^/api&apos;: &apos;/&apos;      //这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用&apos;http://40.00.100.100:3002/user/add&apos;，直接写‘/api/user/add’即可</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p><code>main.js</code>中引入axios并作为Vue属性使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">Vue.prototype.HOST = &apos;/api&apos;</span><br></pre></td></tr></table></figure></p><p>在调取数据组件中，axios配置如下（可以自行封装）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">getData () &#123;</span><br><span class="line">           this.$axios(&#123;</span><br><span class="line">             method: &apos;post&apos;,     //请求方式   一般为get\post  此处以post为例</span><br><span class="line">             url: this.HOST + &apos;/login&apos;,   //url</span><br><span class="line">             data: &#123;       //数据</span><br><span class="line">               loginId: &apos;123456&apos;,</span><br><span class="line">               password: &apos;123456&apos;</span><br><span class="line">             &#125;,</span><br><span class="line">           &#125;).then(function (res) &#123;</span><br><span class="line">             console.log(res);</span><br><span class="line">             debugger;</span><br><span class="line">           &#125;.bind(this)).catch(function (err) &#123;      //bind  绑定当前作用域</span><br><span class="line">             console.log(err);</span><br><span class="line">             debugger;</span><br><span class="line">           &#125;)</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></p><p>ok，保存，然后<br><code>npm run dev</code><br>咦？发生了什么？没跨域啊？数据发过去了啊？为什么服务器给我抛异常==、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      code:100,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      msg: &quot;服务器异常&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>检查发现错误原因：数据发送时没有走formdata，接下来处理该问题。<br><img src="https://upload-images.jianshu.io/upload_images/2502265-6ade903d14e80280.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误示例.jpg" title="错误数据格式"></p><hr><h4 id="2-数据格式修正"><a href="#2-数据格式修正" class="headerlink" title="2.数据格式修正"></a>2.数据格式修正</h4><p>formdata形式提交数据<br>处理方法则是在刚才配置的<code>getData()</code>中的<code>this.$axios()</code>加上一段格式化代码配置即可，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//formdata</span><br><span class="line"> transformRequest: [function (data) &#123;</span><br><span class="line">     let ret = &apos;&apos;;</span><br><span class="line">     for (let it in data) &#123;</span><br><span class="line">         ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">      return ret</span><br><span class="line">  &#125;],</span><br><span class="line">//头信息</span><br><span class="line">  headers: &#123;</span><br><span class="line">     &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="注：说明"><a href="#注：说明" class="headerlink" title="注：说明"></a>注：说明</h3><p>步骤2 <code>formdata</code>形式提交数据，可直接解决跨域问题，不用执行步骤1<br>完整<code>axios</code>的<code>post</code>配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">getData () &#123;</span><br><span class="line">            this.$axios(&#123;</span><br><span class="line">              method: &apos;post&apos;,     //请求方式   一般为get\post  此处以post为例</span><br><span class="line">              url: &apos;http://localhost:8080/login&apos;,</span><br><span class="line">              data: &#123;       //数据</span><br><span class="line">                loginId: &apos;123456&apos;,</span><br><span class="line">                password: &apos;123456&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              transformRequest: [function (data) &#123;</span><br><span class="line">                let ret = &apos;&apos;;</span><br><span class="line">                for (let it in data) &#123;</span><br><span class="line">                  ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">                return ret</span><br><span class="line">              &#125;],</span><br><span class="line">              headers: &#123;</span><br><span class="line">                &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;).then(function (res) &#123;</span><br><span class="line">              console.log(res);</span><br><span class="line">              debugger;</span><br><span class="line">            &#125;.bind(this)).catch(function (err) &#123;</span><br><span class="line">              console.log(err);</span><br><span class="line">              debugger;</span><br><span class="line">            &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续测试：保存之后<code>npm run dev</code><img src="https://upload-images.jianshu.io/upload_images/2502265-ad7bfd5a0a0c5411.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="格式化成功.jpg" title="FormData数据格式"><br>完美~~，接下来看返回数据：<br><img src="https://upload-images.jianshu.io/upload_images/2502265-3147d7c476c75f1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功状态.png" title="成功"></p><hr><p>ok，解决方案到此结束，希望对大家有所帮助。继续快乐的采坑吧各位~</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;兴冲冲的开始用vue封装组件、自定义指令之后，开始实战。诶，等等，貌似少了……交互？&lt;br&gt;大致研究了一下axios，但是存在以下两个问题：&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli自适应|flexible屏幕字体自适应布局及配置</title>
    <link href="https://www.zhuxingmin.com/2019/02/23/vue-cli%E8%87%AA%E9%80%82%E5%BA%94-flexible%E5%B1%8F%E5%B9%95%E5%AD%97%E4%BD%93%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2019/02/23/vue-cli自适应-flexible屏幕字体自适应布局及配置/</id>
    <published>2019-02-23T15:53:41.000Z</published>
    <updated>2019-02-25T00:55:05.462Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><p>很多前端小伙伴在写页面尤其是移动端页面的时候，要求页面布局以及字体大小随屏幕宽度变化而随之按比例自适应<em>【注：非响应式】</em>，那么，在vue-cli脚手架中应该如何去实现呢？<br><a id="more"></a></p><hr><h5 id="1-安装flexible库"><a href="#1-安装flexible库" class="headerlink" title="1.安装flexible库"></a>1.安装<code>flexible</code>库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在项目库下运行：</span><br><span class="line">npm i lib-flexible --save-dev</span><br></pre></td></tr></table></figure><h5 id="2-引入"><a href="#2-引入" class="headerlink" title="2.引入"></a>2.引入</h5><p>项目入口文件<code>main.js</code>中引入<code>lib-flexible</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//main.js中：</span><br><span class="line">import &apos;lib-flexible&apos;</span><br></pre></td></tr></table></figure></p><h5 id="3-配置meta"><a href="#3-配置meta" class="headerlink" title="3.配置meta"></a>3.配置meta</h5><p><code>在项目</code>index.html<code>的</code>head<code>中配置</code>meta`：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot;</span><br><span class="line">            content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure></p><h5 id="4-安装px2rem-loader"><a href="#4-安装px2rem-loader" class="headerlink" title="4.安装px2rem-loader"></a>4.安装<code>px2rem-loader</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在项目库下运行</span><br><span class="line">npm install px2rem-loader --save-dev</span><br></pre></td></tr></table></figure><h5 id="5-配置px2rem编译器"><a href="#5-配置px2rem编译器" class="headerlink" title="5.配置px2rem编译器"></a>5.配置<code>px2rem</code>编译器</h5><p>在<code>build/utils.js</code>中，将<code>px2rem-loader</code>添加到<code>cssLoaders</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//自适应字体配置</span><br><span class="line">const px2remLoader = &#123;</span><br><span class="line">    loader: &apos;px2rem-loader&apos;,</span><br><span class="line">    options: &#123;</span><br><span class="line">        remUnit: 37.5   //设计稿的宽度 除以 10，现阶段一般设计稿的宽度都为750px。如果基于iPhone5设计则为32.0(320 / 10 = 32)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// generate loader string to be used with extract text plugin</span><br><span class="line">  function generateLoaders (loader, loaderOptions) &#123;</span><br><span class="line">    const loaders = options.usePostCSS ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]</span><br><span class="line">  /**</span><br><span class="line">  *其余的不用改</span><br><span class="line">  */</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h5 id="6-启动项目"><a href="#6-启动项目" class="headerlink" title="6.启动项目"></a>6.启动项目</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><hr><h5 id="后语："><a href="#后语：" class="headerlink" title="后语："></a>后语：</h5><p>启动项目之后会惊讶的发现已经完美解决了，即使在PC端也是适用的哦~<br>想要了解更多关于<code>px2rem</code>的想伙伴可以戳下方飞机票去官方看介绍：<br>点击飞机票：<strong><a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h5&gt;&lt;p&gt;很多前端小伙伴在写页面尤其是移动端页面的时候，要求页面布局以及字体大小随屏幕宽度变化而随之按比例自适应&lt;em&gt;【注：非响应式】&lt;/em&gt;，那么，在vue-cli脚手架中应该如何去实现呢？&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>《小狗钱钱1》随想</title>
    <link href="https://www.zhuxingmin.com/2019/02/23/%E3%80%8A%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B11%E3%80%8B%E9%9A%8F%E6%83%B3/"/>
    <id>https://www.zhuxingmin.com/2019/02/23/《小狗钱钱1》随想/</id>
    <published>2019-02-22T16:28:02.000Z</published>
    <updated>2019-03-18T07:43:31.220Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;相信大家都买过基金吧，比如支付宝的余额宝就是一种货币基金。我的钱一直也在支付宝存放。但是从去年（2018年）年初开始，收益好像走了下坡路。为了追求更高的收益，我便把目光转向了支付宝里面的基金市场，然后再零理财基础的情况下辛辛苦苦选了好几个（我认为）收益高的基金，结果一天掉一百多块……不到半个月 差不多赔了小一千，因此觉得开始学习并积累一些理财知识，但是迟迟没有行动。直到规划本年度（2019）目标时，才想起此事，并提上日程。<br>一顿操作猛如虎，找到了一本理财的启蒙书《小狗钱钱》，并且用了一下午3小时26分钟的时间通读了一遍，由此感悟颇深。<br>&emsp;&emsp;<strong><em>读书不写笔记犹如过眼云烟，学习重在输出。</em></strong></p><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;《小狗钱钱》讲述的是一个童话故事：有一天，吉娅发现一只受伤的猎狗，并把它带回了家。可是，有谁会想到，这只普通的四脚动物却是一个真正的理财天才呢？吉娅和小狗成为了朋友，并从它那里得知，原来所有的愿望都是可以实现的。<br><img src="https://upload-images.jianshu.io/upload_images/2502265-7de9e8ac21b2f5e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="小狗钱钱" title="小狗钱钱"><br>&emsp;&emsp;从这个童话故事里可以了解一些金钱的秘密和真相，以及投资、理财的办法。这个故事描述了在实施这些方法的过程中可能遇到的挑战，并且说明了一些令人难以置信的结果。 </p><hr><h3 id="钱钱语录"><a href="#钱钱语录" class="headerlink" title="钱钱语录"></a>钱钱语录</h3><ul><li><p>金钱有一些秘密和规律，要想了解这些秘密和规律，前提条件是，你自己必须真的有这个愿望。</p></li><li><p>如果你只是带着试试看的心态，那么你最后只会以失败而告终，你会一事无成。尝试纯粹是一种借口，你还没有做，就已经给自己想好退路了。不能试验。你只有两个选择：做，或者不做。</p></li><li><p>你是否能挣到钱，最关键的因素并不在于你是不是有一个好点子。你有多聪明也不是主要原因，决定因素是你的自信程度。 一个人把精力集中在自己所能做的，知道的和拥有的东西上的那一天起，他的成功就已经拉开了序幕。这也使得一个孩子完全有能力比成人挣到更多的钱。 </p></li><li><p>你最好想清楚，你喜欢做什么，然后再考虑你怎么用它来挣钱。 </p></li><li><p>你要每天不间断地去做对称的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让一切变得不同。 </p></li><li><p>欠债的人应当毁掉所有的信用卡。   </p><ol><li>应当尽可能少地偿还贷款。   </li><li>应当将不用于生活的那部分钱中的一半存起来，另一半用于还债。最好不要申请消费贷款。   </li><li>每次借债前问自己：“这真的有必要吗？”   </li></ol></li><li><p>当你定下了大目标的时候，就意味着你必须付付出比别人多得多的努力。</p></li><li><p>假如我没有了我的“鹅”，我就总是得为了赚钱而工作，但是一旦我有了属于自己的“鹅”，我的钱就会自动为我工作了。</p></li><li><p>幸运其实只是充分准备加上努力工作的结果。</p></li><li><p>钱只令留在那些为之付出努力的人身边，用非法手段取得不义之财的人，反而会比没钱的时候感觉更糟糕。</p></li><li><p>恐惧总是在我们设想事情会如何不顺的时候出现。我们对失败的可能性想得越多，就越害怕。而当你朝看积极的目标去思考的时候，就不会心生畏惧。</p></li><li><p>关于投资</p><ol><li>确定自己希望获得财务上的成功。   </li><li>自信，有想法，做自己喜欢做的事。   </li><li>把钱分成日常开销、梦想目标和金鹅账户三部分。   </li><li>进行明智的投资。   </li><li>享受生活。</li></ol></li><li><p>如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能够做到些什么。一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。<br><img src="https://upload-images.jianshu.io/upload_images/2502265-eed7de89c8eeb64e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="吉娅与钱钱" title="钱钱与吉娅"></p></li><li><p>挑选基金时的注意事项：</p><ol><li>基金应该至少有十年历史。假如它在这么长时间内一直有丰厚的盈利，那我们可以认为，它在未来也会运作良好。   </li><li>应该选择大型的跨国股票基金，这种基金在世界各地购买股票，以此分做风险，所以十分安全。   </li><li>对基金的走势图进行比较。我们应该观察在过去10年间哪些基金的年终获利最好。用72除以投资的年收益率的百分比，得出的数字就是这笔钱翻一倍所要的年数。</li></ol></li><li><p>每当冬天过后，春天就来了，接着是夏天，每个夏天之后又跟着是秋天，然后又是冬天，年年如此。跟大自然的变化一样，交易所里也总有四季更替，循环往复。</p></li><li><p>最主要的是，在人们眼中钱应该是一种再自然、再普通不过的东西了。</p></li></ul><hr><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>&emsp;&emsp;故事新颖，通俗易懂，并且道出挣钱的终极目的：让钱变得不再重要。<br>&emsp;&emsp;对啊，曾几何时，我们为了生活奔波，打拼，一切都是为了钱。有人说，不忘初心。那货币的本质是一般等价物，一定程度上代替了以物易物。一路发展而来，初心早已更改，到如今的世道上已经完全演变为了“没钱万万不能”的时代。什么世外桃源，田间小居，都是在经济支撑下才能完成的愿望。<br>&emsp;&emsp;书中也提到适量的方法、态度以及对理财中多个名词的通俗解释，都是让理财新人能够快速接受且消化的，不得不说作者是下了大工夫的。书中主人公吉娅以及其家庭遇到的问题相信在大多数人的生活中都有存在，比如：</p><ul><li>是否遇到问题的时候经常说，我试着……</li><li>从小被教导，金钱是万恶之源……</li><li>常听父母说，小孩子不用想钱的事儿……</li><li>是否常常入不敷出……</li><li>是否用着信用卡，每个月都在大笔的分期付款……</li><li>是否心里曾有过宏大的目标（精神或者物质），但又告诉自己这不大可能实现……</li><li>是否做什么事情，在没行动前总想着，我没有这个条件，这个事情不能成功……</li><li>是否每个月仍有结余，但是仅仅是存在银行里……</li><li>是否不够自信，但又不知道怎么去提高……<br>等等问题。吉娅出现的每一个问题，都与我们极其相似，但是我们常常只是想想，然后迷茫，彷徨，不自信，忘记。我们却能从这本书里学习到如何想，如何做，一步一步，一个个的习惯养成，大有裨益。</li></ul><p>&emsp;&emsp;关于金钱的意义。钱是中性的，没有善恶之分。但是往往金钱能使人性的阴暗面暴露出来，因此怎么有钱，有了钱如何使用，便是一个很大的课题，终究取决于学习，修善，成长等。在此之前，我应该先考虑钱的用途，以及自己要成为怎样的人。</p><p><strong><em>&emsp;&emsp;关于“小金鹅”。故事是这样的：</em></strong></p><blockquote><p>&emsp;&emsp;从前有一个年轻的农夫，他每天的愿望就是从鹅笼里捡一个鹅蛋当早饭。有一天，他竟然在鹅笼里发现了一只金蛋。当然，一开始他不相信这是真的。他想，也许是有人在捉弄他。为了谨慎起见，他把金蛋拿去让金匠看，可是金匠向他保证说，这只蛋完全是纯金铸成的。于是农夫卖了这只金蛋，然后举行了一个盛大的庆祝会。<br>&emsp;&emsp;第二天清晨，他起了个大早，赶到鹅笼处一看，那里果真又放着一个金蛋。这样的情况延续了好几天。<br>&emsp;&emsp;可是这个农夫是一个贪婪的人，他对自己的鹅，非常不满意，因为鹅没法向他解释是怎么下出金蛋的，否则也许他自己就可以制造金蛋了。他还气呼呼地想，这只懒惰的鹅每天至少应该下两只金蛋，现在这样的速度太慢了。他的怒火越来越大，最后，他终于怒不可遏地把鹅揪出鹅笼，劈成两半。从那以后，他再也得不到金蛋了。</p></blockquote><p>&emsp;&emsp;其实，理财不是针对有资产的人，而是所有人。《小狗钱钱》一书中，“养鹅”一事贯穿全文。鹅代表你的钱，如果你存钱，就会得到利息，利息就是金蛋。穷人越穷，每天鸡蛋都生不出来，富人越富，每天有金蛋甚至会有越来越多的鹅。两极分化不是没有道理的。书中将赚到的钱，分成三个账户，分别是“日常开销”、“梦想目标”、“金鹅账户”，并以此达到开源节流的目的。</p><p><strong><em>关于72定理</em></strong></p><blockquote><ol><li>用72除以年收益率百分比，得出的数字就是这笔钱翻一倍的年数。</li><li>在通货膨胀率下，我们的钱在多长时间贬值一半，用72除以通胀率，即可得知多少年后你的钱是现在的一半。</li></ol></blockquote><p>假如目前存（投）一笔<code>1万</code>人民币，年收益为<code>12%</code>，那么<code>72 / 12 = 6</code>年时间就可以翻倍本金。当然，至于如何达到年收益12%甚至更高，则需要继续努力学习相关知识并且不断的实践并积累了。<br>假定以后每年通货膨胀率<code>6%</code>，那么在<code>72 / 6 = 12</code>年后你的钱将只能买到现在购买力能买的的一半。</p><p><strong><em>结语</em></strong><br>《小狗钱钱》带来最大的收获便是让我获得了一把打开新世界的钥匙。后续需要持续学习不断提高，跑赢通货膨胀，养一只能下优质蛋的鹅。好在年轻即资本，生命不息，学习不止。</p><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p><strong><em>财商决定后半生是否富裕</em></strong></p>]]></content>
    
    <summary type="html">
    
      有一天，吉娅发现一只受伤的猎狗，并把它带回了家。可是，有谁会想到，这只普通的四脚动物却是一个真正的理财天才呢？吉娅和小狗成为了朋友，并从它那里得知，原来所有的愿望都是可以实现的。
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue打包后map文件处理</title>
    <link href="https://www.zhuxingmin.com/2019/02/22/Vue%E6%89%93%E5%8C%85%E5%90%8Emap%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>https://www.zhuxingmin.com/2019/02/22/Vue打包后map文件处理/</id>
    <published>2019-02-22T03:44:51.000Z</published>
    <updated>2019-03-18T07:43:07.276Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近踩坑vue，打包之后js中，会自动生成一些map文件，无形之中就增大了dist包的体积，可能会增加服务器压力。那我们怎么把它去掉呢？<br><a id="more"></a></p><hr><h4 id="1-找到productionSourceMap"><a href="#1-找到productionSourceMap" class="headerlink" title="1.找到productionSourceMap"></a>1.找到<code>productionSourceMap</code></h4><p>在项目下进入目录：<code>项目包/config/index.js</code>找到<code>productionSourceMap</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * Source Maps</span><br><span class="line"> */</span><br><span class="line">productionSourceMap: true,</span><br><span class="line">// https://webpack.js.org/configuration/devtool/#production</span><br><span class="line">devtool: &apos;#source-map&apos;,</span><br></pre></td></tr></table></figure></p><h4 id="2-改为false"><a href="#2-改为false" class="headerlink" title="2.改为false"></a>2.改为<code>false</code></h4><p>将<code>productionSourceMap</code>的<code>true</code>改为<code>false</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">productionSourceMap: false,</span><br><span class="line">// https://webpack.js.org/configuration/devtool/#production</span><br><span class="line">devtool: &apos;#source-map&apos;,</span><br></pre></td></tr></table></figure></p><h4 id="3-打生产包"><a href="#3-打生产包" class="headerlink" title="3.打生产包"></a>3.打生产包</h4><p>打包:<code>npm run build</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Hash: 450e46e5a578d8ed5832</span><br><span class="line">Version: webpack 3.12.0</span><br><span class="line">Time: 19211ms</span><br><span class="line">                                              Asset       Size  Chunks                    Chunk Names</span><br><span class="line">                static/js/2.f45baf9afd59da355a2c.js    17.9 kB       2  [emitted]</span><br><span class="line">                 static/img/healthIcon2.0a76940.png    21.7 kB          [emitted]</span><br><span class="line">                 static/img/healthIcon1.7f9e278.png      21 kB          [emitted]</span><br><span class="line">                 static/img/healthIcon3.a2530d6.png    20.3 kB          [emitted]</span><br><span class="line">                static/js/0.2623d3f24b6cb900e249.js     182 kB       0  [emitted]</span><br><span class="line">                static/js/1.68a7b37dd5366d3385bc.js    62.6 kB       1  [emitted]</span><br><span class="line">                 static/img/healthIcon4.42cd92c.png    18.9 kB          [emitted]</span><br><span class="line">                static/js/3.dd658b712540b545b1a8.js    6.57 kB       3  [emitted]</span><br><span class="line">           static/js/vendor.ed30b6e3d0cfb8529feb.js     962 kB       4  [emitted]  [big]  vendor</span><br><span class="line">              static/js/app.ab727f325a694968cc20.js    1.22 kB       5  [emitted]         app</span><br><span class="line">         static/js/manifest.bad9ce278a16a20c8817.js    1.48 kB       6  [emitted]         manifest</span><br><span class="line">static/css/app.e93cb55eadaef6e12f4bccfcc6e2e3cc.css    35.6 kB       5  [emitted]         app</span><br><span class="line">                                         index.html  555 bytes          [emitted]</span><br><span class="line"></span><br><span class="line">  Build complete.</span><br><span class="line"></span><br><span class="line">  Tip: built files are meant to be served over an HTTP server.</span><br><span class="line">  Opening index.html over file:// won&apos;t work.</span><br></pre></td></tr></table></figure></p><h4 id="4-解决"><a href="#4-解决" class="headerlink" title="4.解决"></a>4.解决</h4><p>打包成功，看<code>项目/dist/static/js/xxxx.js</code>已经没有各种<code>.map</code>文件，问题解决。</p><h4 id="【注】-map文件的作用："><a href="#【注】-map文件的作用：" class="headerlink" title="【注】.map文件的作用："></a>【注】<code>.map</code>文件的作用：</h4><p>项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。<strong>有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近踩坑vue，打包之后js中，会自动生成一些map文件，无形之中就增大了dist包的体积，可能会增加服务器压力。那我们怎么把它去掉呢？&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.zhuxingmin.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="打包" scheme="https://www.zhuxingmin.com/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>浮世三千</title>
    <link href="https://www.zhuxingmin.com/2019/02/22/%E6%B5%AE%E4%B8%96%E4%B8%89%E5%8D%83/"/>
    <id>https://www.zhuxingmin.com/2019/02/22/浮世三千/</id>
    <published>2019-02-22T02:11:40.000Z</published>
    <updated>2019-02-25T00:55:05.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>浮世三千，吾爱有三：日、月与卿。<br>日为朝、月为暮，卿为朝朝暮暮</p></blockquote><center><br>我是个俗气至顶的人，<br>见山是山，<br>见海是海，<br>见花便是花。<br>唯独见了你，<br>云海开始翻涌，<br>江潮开始澎湃，<br>昆虫的小触须挠着全世界的痒。<br>你无需开口，<br>我和天地万物便通通奔向你。<br><br><br><br></center>]]></content>
    
    <summary type="html">
    
      我希望有个如你一般的人。如山间清爽的风，如古城温暖的光。从清晨到夜晚，由山野到书房。只要最后是你，就好。
    
    </summary>
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.zhuxingmin.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>

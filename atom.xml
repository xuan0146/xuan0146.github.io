<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lomo | 朱幸民</title>
  
  <subtitle>on the way</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuxingmin.com/"/>
  <updated>2020-06-20T06:46:35.950Z</updated>
  <id>https://www.zhuxingmin.com/</id>
  
  <author>
    <name>Lomo 朱幸民</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用验证码之字符串验证码</title>
    <link href="https://www.zhuxingmin.com/2020/06/19/%E5%B8%B8%E7%94%A8%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://www.zhuxingmin.com/2020/06/19/常用验证码之字符串验证码/</id>
    <published>2020-06-19T08:25:09.000Z</published>
    <updated>2020-06-20T06:46:35.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>验证码</strong> 这个玩意，无论是开发者还是用户都十分熟悉：</p><ul><li>注册？ 请输入验证码…</li><li>登录？ 请输入验证码…</li><li>修改密码？ 请输入验证码…</li><li>删除？ 请输入验证码…</li><li>……</li></ul><p><strong>总之，各类敏感操作，请输入验证码！</strong></p><p><img src="/images/posts/check_text.png" alt></p><p>这么多场景中用到验证码，它到底有什么用？作为前端开发者，如何去实现呢？<br>接下来步入正题。</p><a id="more"></a><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><ul><li>是一种区分用户是计算机还是人的公共全自动程序。区分用户是真人还是程序，防止程序频繁访问服务器占用过多的资源。</li></ul><p><strong>作用：</strong></p><ul><li>防止恶意破解密码、刷票、论坛灌水等；</li><li>有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li><li>敏感操作前的提示</li><li>防止恶意注册</li></ul><p><strong>验证码表现方式：</strong></p><ul><li>随机字符串验证码</li><li>算数验证码</li><li>Gif动画验证码</li><li>滑动验证码</li><li>点选验证码</li><li>短信验证码</li><li>手机语音验证码</li></ul><p>接下来会使用纯前端方式实现其中的一些表现，如<code>随机字符串验证码</code>、<code>算数验证码</code>、<code>滑动验证码</code>等。</p><p><strong>本篇记录随机字符串验证码。</strong></p><h2 id="随机字符串验证码"><a href="#随机字符串验证码" class="headerlink" title="随机字符串验证码"></a>随机字符串验证码</h2><p>一般来讲，字符串、算数、gif、短信语音等验证码放在后端实现，但本着技术无界限的原则，前端依然是能照葫芦画瓢给实现出来的。<br>本次要实现的效果如下：</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/posts/check_text.gif" alt></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>验证码实现步骤：</p><ul><li>canvas画布</li><li>生成随机字符串</li><li>随机颜色</li><li>背景色（可固定色）</li><li>噪音线设置</li><li>绘制验证码</li></ul><p>其他一些基础内容也包含其中，如点击验证码刷新、点击下一步验证等操作。</p><h3 id="步骤实现："><a href="#步骤实现：" class="headerlink" title="步骤实现："></a>步骤实现：</h3><p><strong><em>注：本案例基于vue操作，UI使用element完成，原生js同样道理</em></strong></p><h4 id="1-canvas画布"><a href="#1-canvas画布" class="headerlink" title="1. canvas画布"></a>1. canvas画布</h4><p><strong>html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"inputCode"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码，不区分大小写"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- canvas画布：验证码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">"checkCode"</span> @<span class="attr">click</span>=<span class="string">"getCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"checkMe"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要的数据</span></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        inputCode: <span class="string">''</span>,  <span class="comment">// 输入的值</span></span><br><span class="line">        checkCode: <span class="string">''</span>,  <span class="comment">// 图片验证码的值</span></span><br><span class="line">        <span class="comment">// canvas各种设置</span></span><br><span class="line">        cvs: &#123;</span><br><span class="line">            w: <span class="number">100</span>, <span class="comment">// 给出默认宽度  宽度会在图片绘制时根据长度更改</span></span><br><span class="line">            h: <span class="number">40</span>,  <span class="comment">// 高 与input保持一致</span></span><br><span class="line">            fontSize: <span class="number">24</span>,   <span class="comment">// 字体大小</span></span><br><span class="line">            <span class="comment">// 字符串生成范围</span></span><br><span class="line">            str: <span class="string">'1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM'</span>,  </span><br><span class="line">            len: <span class="number">4</span>, <span class="comment">// 字符串长度 </span></span><br><span class="line">            line: <span class="number">3</span> <span class="comment">// 噪音线个数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-生成随机字符串"><a href="#2-生成随机字符串" class="headerlink" title="2. 生成随机字符串"></a>2. 生成随机字符串</h4><ul><li>写一个随机整数生成器，在各个环节都会用到</li><li>生成随机字符串，长度是在<code>data</code>里面<code>cvs</code>中对应长度<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机整数生成器，范围[0, max)</span></span><br><span class="line">rInt(max) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100000</span> % max);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机字符串</span></span><br><span class="line">rCode() &#123;</span><br><span class="line">    <span class="keyword">let</span> code = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="keyword">this</span>.cvs.len;</span><br><span class="line">    <span class="keyword">let</span> strLen = <span class="keyword">this</span>.cvs.str.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        code += <span class="keyword">this</span>.cvs.str.charAt(<span class="keyword">this</span>.rInt(strLen));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.checkCode = code;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-生成随机颜色"><a href="#3-生成随机颜色" class="headerlink" title="3. 生成随机颜色"></a>3. 生成随机颜色</h4><ul><li>rgba格式</li><li>a：透明度，取值为0.5-1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 生成随机颜色 rgba格式</span></span><br><span class="line">rColor() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = ((<span class="built_in">Math</span>.random()*<span class="number">5</span> + <span class="number">5</span>) / <span class="number">10</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgba(<span class="subst">$&#123;<span class="keyword">this</span>.rInt(<span class="number">256</span>)&#125;</span>, <span class="subst">$&#123;<span class="keyword">this</span>.rInt(<span class="number">256</span>)&#125;</span>, <span class="subst">$&#123;<span class="keyword">this</span>.rInt(<span class="number">256</span>)&#125;</span>, <span class="subst">$&#123;a&#125;</span>)`</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-开始绘制"><a href="#4-开始绘制" class="headerlink" title="4. 开始绘制"></a>4. 开始绘制</h4><ul><li>方法接收一个dom对象</li><li>判断浏览器对canvas支持程度</li><li>取随机字符串</li><li>设置canvas宽高大小</li><li>绘制</li></ul><p>具体过程如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证码图片绘制</span></span><br><span class="line">drawCode(domCvs) &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 随机字符串</span></span><br><span class="line">    <span class="keyword">let</span> checkCode = <span class="keyword">this</span>.rCode();</span><br><span class="line">    <span class="comment">// 宽设置</span></span><br><span class="line">    <span class="keyword">this</span>.cvs.w = <span class="number">10</span> + <span class="keyword">this</span>.cvs.fontSize * <span class="keyword">this</span>.cvs.len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否支持canvas</span></span><br><span class="line">    <span class="keyword">if</span>(domCvs !== <span class="literal">null</span> &amp;&amp; domCvs.getContext &amp;&amp; domCvs.getContext(<span class="string">'2d'</span>))&#123;</span><br><span class="line">        <span class="comment">// 设置显示区域大小</span></span><br><span class="line">        domCvs.style.width = _this.cvs.w;</span><br><span class="line">        <span class="comment">// 设置画板宽高</span></span><br><span class="line">        domCvs.setAttribute(<span class="string">'width'</span>, _this.cvs.w);</span><br><span class="line">        domCvs.setAttribute(<span class="string">'height'</span>, _this.cvs.h);</span><br><span class="line">        <span class="comment">// 画笔</span></span><br><span class="line">        <span class="keyword">let</span> pen = domCvs.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="comment">// 背景: 颜色  区域</span></span><br><span class="line">        pen.fillStyle = <span class="string">'#eee'</span>;</span><br><span class="line">        pen.fillRect(<span class="number">0</span>, <span class="number">0</span>, _this.cvs.w, _this.cvs.h);</span><br><span class="line">        <span class="comment">// 水平线位置</span></span><br><span class="line">        pen.textBaseline = <span class="string">'middle'</span>;   <span class="comment">// top middle bottom</span></span><br><span class="line">        <span class="comment">// 内容</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.cvs.len; i ++) &#123;</span><br><span class="line">            pen.fillStyle = _this.rColor(); <span class="comment">// 随机颜色</span></span><br><span class="line">            pen.font = <span class="string">`bold <span class="subst">$&#123;_this.cvs.fontSize&#125;</span>px 微软雅黑`</span>; <span class="comment">// 字体设置</span></span><br><span class="line">            <span class="comment">// 字符绘制: (字符, X坐标, Y坐标)</span></span><br><span class="line">            pen.fillText(checkCode.charAt(i), <span class="number">10</span> + _this.cvs.fontSize * i, <span class="number">17</span> + _this.rInt(<span class="number">10</span>));   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 噪音线</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.cvs.line; i ++) &#123;</span><br><span class="line">            <span class="comment">// 起点</span></span><br><span class="line">            pen.moveTo(_this.rInt(_this.cvs.w) / <span class="number">2</span>, _this.rInt(_this.cvs.h));</span><br><span class="line">            <span class="comment">// 终点</span></span><br><span class="line">            pen.lineTo(_this.rInt(_this.cvs.w), _this.rInt(_this.cvs.h));</span><br><span class="line">            <span class="comment">// 颜色</span></span><br><span class="line">            pen.strokeStyle = _this.rColor();</span><br><span class="line">            <span class="comment">// 粗细</span></span><br><span class="line">            pen.lineWidth = <span class="string">'2'</span>;</span><br><span class="line">            <span class="comment">// 绘制</span></span><br><span class="line">            pen.stroke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message.error(<span class="string">'不支持验证码格式，请升级或更换浏览器重试'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="5-绑定canvas的dom元素"><a href="#5-绑定canvas的dom元素" class="headerlink" title="5. 绑定canvas的dom元素"></a>5. 绑定canvas的dom元素</h4><p><strong>html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"codeCanvas"</span> <span class="attr">ref</span>=<span class="string">"checkCode"</span> @<span class="attr">click</span>=<span class="string">"getCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>js：getCode方法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue的话可直接用$refs取值，不用vue的话可绑定id然后通过document处理</span></span><br><span class="line"><span class="keyword">let</span> domCvs = <span class="keyword">this</span>.$refs.checkCode;</span><br><span class="line"><span class="keyword">this</span>.drawCode(domCvs);</span><br></pre></td></tr></table></figure></p><h4 id="6-完成"><a href="#6-完成" class="headerlink" title="6. 完成~"></a>6. 完成~</h4><ul><li>在页面初始化的时候，也来一个验证码</li><li>点击下一步， 验证<code>data</code>中<code>inputCode</code>和<code>checkCode</code>的值是否一样即可。<strong>注意，要都换成小写<code>toLowerCase()</code>或者大写去处理~</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化先搞一个验证码~点击canvas的时候重新执行getCode()</span></span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="comment">// 获取验证码图</span></span><br><span class="line">    <span class="keyword">this</span>.getCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;验证码&lt;/strong&gt; 这个玩意，无论是开发者还是用户都十分熟悉：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册？ 请输入验证码…&lt;/li&gt;
&lt;li&gt;登录？ 请输入验证码…&lt;/li&gt;
&lt;li&gt;修改密码？ 请输入验证码…&lt;/li&gt;
&lt;li&gt;删除？ 请输入验证码…&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总之，各类敏感操作，请输入验证码！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/check_text.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这么多场景中用到验证码，它到底有什么用？作为前端开发者，如何去实现呢？&lt;br&gt;接下来步入正题。&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="canvas" scheme="https://www.zhuxingmin.com/tags/canvas/"/>
    
      <category term="验证码" scheme="https://www.zhuxingmin.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>docker-nginx部署web项目</title>
    <link href="https://www.zhuxingmin.com/2020/06/16/docker-nginx%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/"/>
    <id>https://www.zhuxingmin.com/2020/06/16/docker-nginx部署web项目/</id>
    <published>2020-06-16T02:42:24.000Z</published>
    <updated>2020-06-16T02:46:29.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>作为web端开发er，几乎从未接触过后端及服务端相关知识。但有些场景下又需要将自己的一些东西从公网（域名）上展示出来，比如自己的可开源项目、博客、简历、demo等。有时候我们可以麻烦后台或者运维同事来帮我们搞一搞，但终究授之以鱼不如授之以渔，在同事的帮助下，我也成功的通过一条简单的途径实现了本地文件上传至服务器并从域名访问。本片博客记录下实现过程。<br>本实现途径是在linux服务器中安装docker，然后启用docker-nginx代理实现的，希望对与我面对同样困境的小白有所帮助。<br>第一次接触服务端知识，有错敬请指教，感谢！<br>那么，开始吧~</p><a id="more"></a><h3 id="0-准备"><a href="#0-准备" class="headerlink" title="0. 准备"></a>0. 准备</h3><ul><li>云服务器——CentOS 7.x，低配置即可，如[1核 1GB 1Mbps]</li><li>域名——已备案</li><li>终端远程工具——如：xshell、FinalShell等</li></ul><p><strong><em>提示：以下命令行内容均在服务器中完成~自行通过终端远程工具连接自己的服务器</em></strong></p><hr><h3 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h3><h4 id="1-1-卸载旧版本"><a href="#1-1-卸载旧版本" class="headerlink" title="1.1 卸载旧版本"></a>1.1 卸载旧版本</h4><p><strong><em>如已安装想重新安装，或者是旧版本，则执行。<br>如已是新版，跳过本步。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p><h4 id="1-2-使用官方脚本自动安装"><a href="#1-2-使用官方脚本自动安装" class="headerlink" title="1.2 使用官方脚本自动安装"></a>1.2 使用官方脚本自动安装</h4><p><strong><em>以下两种方式任选其一</em></strong></p><ul><li>命令：<br><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></li><li>国内 daocloud 命令<br><code>curl -sSL https://get.daocloud.io/docker | sh</code></li></ul><h4 id="1-3-启动docker"><a href="#1-3-启动docker" class="headerlink" title="1.3 启动docker"></a>1.3 启动docker</h4><p><code>$ sudo systemctl start docker</code></p><hr><h3 id="2-Docker-安装-Nginx"><a href="#2-Docker-安装-Nginx" class="headerlink" title="2. Docker 安装 Nginx"></a>2. Docker 安装 Nginx</h3><p>Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务 。<br>docker内安装nginx,作为web服务器来提供我们所需要的的web服务。</p><h4 id="2-1-docker查看nginx可用版本"><a href="#2-1-docker查看nginx可用版本" class="headerlink" title="2.1 docker查看nginx可用版本"></a>2.1 docker查看nginx可用版本</h4><ul><li><code>docker search nginx</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_10_centos zxm]# docker search nginx</span><br><span class="line">NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                              Official build of Nginx.                        13333               [OK]                </span><br><span class="line">jwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   1822                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   777                                     [OK]</span><br><span class="line">linuxserver/nginx                  An Nginx container, brought to you by LinuxS…   115                                     </span><br><span class="line">bitnami/nginx                      Bitnami nginx Docker Image                      84                                      [OK]</span><br><span class="line">tiangolo/nginx-rtmp                Docker image with Nginx using the nginx-rtmp…   75                                      [OK]</span><br><span class="line">alfg/nginx-rtmp                    NGINX, nginx-rtmp-module and FFmpeg from sou…   66                                      [OK]</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-安装最新的nginx镜像"><a href="#2-2-安装最新的nginx镜像" class="headerlink" title="2.2 安装最新的nginx镜像"></a>2.2 安装最新的nginx镜像</h4><p><code>$ docker pull nginx:latest</code></p><h4 id="2-3-查看本地镜像"><a href="#2-3-查看本地镜像" class="headerlink" title="2.3 查看本地镜像"></a>2.3 查看本地镜像</h4><p>运行命令查看是否安装成功：<code>$ docker images</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              2622e6cca7eb        5 days ago          132MB</span><br></pre></td></tr></table></figure></p><p>如上，有nginx，成功。</p><hr><h3 id="3-创建docker-nginx实例"><a href="#3-创建docker-nginx实例" class="headerlink" title="3. 创建docker-nginx实例"></a>3. 创建docker-nginx实例</h3><p><code>$ docker run --name [name] -p 8080:80 -d nginx</code></p><blockquote><ul><li>[name]—— 容器名称</li><li>[-p 8080:80]—— 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口</li><li>[-d nginx]—— 设置容器在在后台一直运行</li></ul></blockquote><hr><h3 id="4-运行容器"><a href="#4-运行容器" class="headerlink" title="4. 运行容器"></a>4. 运行容器</h3><p>创建容器后默认是运行状态。可以通过<code>$ docker ps</code>命令查看运行中的容器，通过<code>$ docker ps -a</code>查看docker的所有容器。<br>如，我创建的容器名为<code>zxm-nginx-test</code>，可以在下面容器列表中查看到容器的运行状态及容器信息（id、name等）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_10_centos zxm]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">daad54bac361        nginx               &quot;/docker-entrypoint.…&quot;   41 hours ago        Up About an hour    0.0.0.0:8080-&gt;80/tcp   zxm-nginx-test</span><br></pre></td></tr></table></figure></p><p>如果容器未启动，则可以通过<code>$ docker start [容器name或id]</code>来启动容器。</p><hr><h3 id="5-测试访问"><a href="#5-测试访问" class="headerlink" title="5. 测试访问"></a>5. 测试访问</h3><p>运行容器启动之后，可以通过服务器公网ip地址测试访问。<br>如：<code>http://[ip]:8080/</code>。<br>出现页面提示如下，表示成功运行。<br><img src="/images/posts/serve_nginx.png" alt></p><hr><h3 id="6-上传文件到服务器"><a href="#6-上传文件到服务器" class="headerlink" title="6. 上传文件到服务器"></a>6. 上传文件到服务器</h3><p>上传本地文件/文件夹（我们的web项目，静态资源）到自己的服务器任意位置。<br>比如我在root下创建了文件夹zxm，通过工具直接将本地文件<code>Loading.html</code>拖入其中。</p><p><img src="/images/posts/serve_upload.gif" alt><br>然后本地资源就上传到了服务器中~<br><img src="/images/posts/serve_file.jpg" alt></p><h3 id="7-拷贝文件到docker-nginx容器"><a href="#7-拷贝文件到docker-nginx容器" class="headerlink" title="7. 拷贝文件到docker-nginx容器"></a>7. 拷贝文件到docker-nginx容器</h3><p>首先，我们已经将需要的项目（资源）从本地上传到了服务器上；<br>然后我们需要做的则是从服务器上的项目资源从目前所在的地方拷贝到docker-nginx容器内，那么我们就需要知道三个东西：</p><ol><li>目标路径</li><li>项目所在路径</li><li>docker 拷贝命令</li></ol><p>接下来，我们一步一步来。</p><h4 id="7-1-查找docker-nginx容器目标文件路径"><a href="#7-1-查找docker-nginx容器目标文件路径" class="headerlink" title="7.1 查找docker-nginx容器目标文件路径"></a>7.1 查找docker-nginx容器目标文件路径</h4><ul><li><p>进入容器： <code>docker exec -it daad54bac361 bash</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it daad54bac361 bash</span><br></pre></td></tr></table></figure></li><li><p>目录： <code>ls</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@daad54bac361:/# ls </span><br><span class="line">bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure></li><li><p>查找配置文件： <code>cd etc/nginx/conf.d/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@daad54bac361:/# cd etc/nginx/conf.d/</span><br><span class="line">root@daad54bac361:/etc/nginx/conf.d# ls</span><br><span class="line">default.conf</span><br></pre></td></tr></table></figure></li><li><p>查看配置文件： <code>cat default.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@daad54bac361:/etc/nginx/conf.d# cat default.conf </span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>  [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复制（记录）文件中<code>server&gt;location&gt;root</code><br>如：<code>/usr/share/nginx/html</code><br>这个目录则是容器的目标目录，接下来则需将其他位置的资源通过docker命令拷贝到该文件目录下。</p></li><li><p>退出容器： <code>exit</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@daad54bac361:/etc/nginx/conf.d# exit</span><br><span class="line">e xit</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-拷贝"><a href="#7-2-拷贝" class="headerlink" title="7.2 拷贝"></a>7.2 拷贝</h4><ul><li>先回到刚才本地上传文件至服务器步骤的文件所在服务器位置中</li><li>cd到该目录下</li><li>docker命令拷贝到容器中<br><code>docker cp [源文件目录] [容器id]:[目标目录]</code><br>例如，在我的服务器中，想要将<code>Loading.html</code>传入到容器中，则是：<br><code>docker cp Loading.html daad54bac361:/usr/share/nginx/html/</code></li></ul><h4 id="7-3-完成，访问"><a href="#7-3-完成，访问" class="headerlink" title="7.3 完成，访问"></a>7.3 完成，访问</h4><p>浏览器中输入<code>ip:8080/Loading.html</code>，正常访问到页面，收工~~<br><img src="/images/posts/serveLoading.gif" alt></p><hr><h3 id="8-nginx域名映射配置"><a href="#8-nginx域名映射配置" class="headerlink" title="8. nginx域名映射配置"></a>8. nginx域名映射配置</h3><p>以上内容我们完成了基本的服务器项目部署，也就是从公网可以访问自己的项目啦~但是我们不能一直使用公网来访问，不够安全，且不够优雅！那么我们怎么使用域名来访问自己的项目呢？<br>接下来我们操作一下域名映射。</p><h4 id="8-1-docker内安装vim工具"><a href="#8-1-docker内安装vim工具" class="headerlink" title="8.1 docker内安装vim工具"></a>8.1 docker内安装vim工具</h4><ul><li>进入docker容器<br><code>docker exec -it [容器id或者name] bash</code></li><li>docker内安装vim<br>依次执行以下命令：<br><code>apt-get update</code><br><code>apt-get install vim</code></li></ul><h4 id="8-2-配置default-conf文件"><a href="#8-2-配置default-conf文件" class="headerlink" title="8.2 配置default.conf文件"></a>8.2 配置<code>default.conf</code>文件</h4><ul><li><p>cd到配置文件目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@daad54bac361:/# cd etc/nginx/conf.d/ </span><br><span class="line">root@daad54bac361:/etc/nginx/conf.d# ls</span><br><span class="line">default.conf</span><br></pre></td></tr></table></figure></li><li><p>编辑default.conf文件:<br><code>vim default.conf</code></p></li><li><p>修改如下：<br>将<code>server&gt;server_name</code>的localhost改成自己的域名地址，如我的是<code>www.zhuxingmin.com</code>，但我可能会设置二级域名等，将<code>www</code>改成<code>*</code>。则配置如下：<code>server_name  *.zhuxingmin.com;</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>  [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="regexp">*.zhuxingmin.com</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>退出容器<br><code>exit</code></p></li></ul><h4 id="8-3-重启docker-nginx容器"><a href="#8-3-重启docker-nginx容器" class="headerlink" title="8.3 重启docker-nginx容器"></a>8.3 重启docker-nginx容器</h4><p><code>docker restart [容器name或id]</code><br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_10_centos zxm]# docker restart zxm-nginx-test</span><br><span class="line">zxm-nginx-test</span><br><span class="line">[root@VM_0_10_centos zxm]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">daad54bac361        nginx               &quot;/docker-entrypoint.…&quot;   40 hours ago        Up 5 seconds        0.0.0.0:8080-&gt;80/tcp   zxm-nginx-test</span><br></pre></td></tr></table></figure></p><h3 id="9-域名解析"><a href="#9-域名解析" class="headerlink" title="9. 域名解析"></a>9. 域名解析</h3><ul><li>前提： 域名已备案</li><li>打开域名解析</li><li>添加记录（解析）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">记录类型:   A</span><br><span class="line">主机记录:   test.zhuxingmin.com</span><br><span class="line">解析线路:   默认</span><br><span class="line">记录值：    服务器公网ip</span><br><span class="line">TTL:       10分钟</span><br></pre></td></tr></table></figure></li></ul><p>然后，打开浏览器，输入自己配置的域名，即可访问到docker-nginx容器中的项目啦~~</p><p><img src="/images/posts/serve_url.gif" alt></p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;作为web端开发er，几乎从未接触过后端及服务端相关知识。但有些场景下又需要将自己的一些东西从公网（域名）上展示出来，比如自己的可开源项目、博客、简历、demo等。有时候我们可以麻烦后台或者运维同事来帮我们搞一搞，但终究授之以鱼不如授之以渔，在同事的帮助下，我也成功的通过一条简单的途径实现了本地文件上传至服务器并从域名访问。本片博客记录下实现过程。&lt;br&gt;本实现途径是在linux服务器中安装docker，然后启用docker-nginx代理实现的，希望对与我面对同样困境的小白有所帮助。&lt;br&gt;第一次接触服务端知识，有错敬请指教，感谢！&lt;br&gt;那么，开始吧~&lt;/p&gt;
    
    </summary>
    
    
      <category term="云服务器" scheme="https://www.zhuxingmin.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="web" scheme="https://www.zhuxingmin.com/tags/web/"/>
    
      <category term="nginx" scheme="https://www.zhuxingmin.com/tags/nginx/"/>
    
      <category term="部署" scheme="https://www.zhuxingmin.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="docker" scheme="https://www.zhuxingmin.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>axios进阶之路——封装篇</title>
    <link href="https://www.zhuxingmin.com/2020/05/26/axios%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85%E7%AF%87/"/>
    <id>https://www.zhuxingmin.com/2020/05/26/axios进阶之路——封装篇/</id>
    <published>2020-05-26T09:42:59.000Z</published>
    <updated>2020-05-26T11:52:42.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-封装前准备"><a href="#一、-封装前准备" class="headerlink" title="一、 封装前准备"></a>一、 封装前准备</h2><p>在前两篇讲过了axios的安装、基本配置、拦截器使用，如下：</p><ul><li><a href="/2020/05/12/axios进阶之路——基础篇/" title="axios进阶之路——基础篇">axios进阶之路——基础篇</a></li><li><a href="/2020/05/13/axios进阶之路——拦截器篇/" title="axios进阶之路——拦截器篇">axios进阶之路——拦截器篇</a></li></ul><p>那么本篇的封装也是基于前两篇的基础之上进行的。</p><h2 id="二、-开拔"><a href="#二、-开拔" class="headerlink" title="二、 开拔"></a>二、 开拔</h2><h3 id="1-新建文件夹"><a href="#1-新建文件夹" class="headerlink" title="1. 新建文件夹"></a>1. 新建文件夹</h3><p>在<code>src</code>目录下新建文件夹，用于存放所有请求列表和请求封装的js。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│  ├── service    // ++ 新建文件夹</span><br><span class="line">│  │  ├── http.js// ++ 用于封装请求</span><br><span class="line">│  │  ├── apiList.js// ++ 存放请求路径</span><br><span class="line">│  ├── page</span><br><span class="line">│  │  ├── Home.vue// 主页组件</span><br><span class="line">│  ├── router</span><br><span class="line">│  │  ├── index.js</span><br><span class="line">│  ├── App.vue</span><br><span class="line">│  ├── main.js</span><br></pre></td></tr></table></figure></p><h3 id="2-所有接口请求的统一管理"><a href="#2-所有接口请求的统一管理" class="headerlink" title="2. 所有接口请求的统一管理"></a>2. 所有接口请求的统一管理</h3><p>一般情况下，一个项目的所有请求都会由一个统一的基础路径加上不同的接口路径和接口名组成，并且大部分接口都会有统一的请求或者响应处理，例如返回不同code值，要做响应处理，如果把所有接口都单独处理可谓是资源的极大浪费，因此想办法统一管理。<br>在上一步中，已经新建了一个名为<code>service</code>的文件夹，包含两个js文件：</p><ul><li><strong>apiList.js</strong>：存放请求路径</li><li><strong>http.js</strong>：封装请求</li></ul><p>先看第一个：<code>apiList</code>，就是用来将所有接口统一管理的。<br>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义请求列表对象API_LIST，其下每个请求(对象)包含请求方法与请求路径两项</span></span><br><span class="line"><span class="keyword">const</span> API_LIST = &#123;</span><br><span class="line">    <span class="comment">// get请求</span></span><br><span class="line">    getData1: &#123;</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'/xx/getData1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// post请求</span></span><br><span class="line">    getData2: &#123;</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        url: <span class="string">'/xx/getData2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> API_LIST</span><br></pre></td></tr></table></figure></p><p>一个项目，特殊接口的话可以单独处理，其余的的所有请求都可以放在这个文件中进行统一管理，之后项目变动找接口修改也会更好维护。</p><h3 id="3-请求封装"><a href="#3-请求封装" class="headerlink" title="3. 请求封装"></a>3. 请求封装</h3><p>在请求接口列表处理得当之后，就该在请求实例上做文章了。一般需要处理两个问题：一是走请求，二是拦截器处理。<br><em>尽可能加上注释的提供一份参考</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 引入刚才封装的请求接口列表</span></span><br><span class="line"><span class="keyword">import</span> api_list <span class="keyword">from</span> <span class="string">'./api/api_list'</span></span><br><span class="line"><span class="comment">// 吐司框组件，配合拦截器使用，可自行处理（不要也行）</span></span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'xxx'</span></span><br><span class="line"><span class="comment">// 路由设置，配合拦截器使用，可不要</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'../router/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// baseUrl判断</span></span><br><span class="line"><span class="keyword">let</span> baseURL;</span><br><span class="line"><span class="comment">// 如果是开发环境，用本地baseURL，如果是生产环境用线上baseURL</span></span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    baseURL = <span class="string">'http://&#123;本地地址&#125;/xxx'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">    baseURL = <span class="string">'https://&#123;线上地址&#125;/xxx'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: baseURL,   <span class="comment">// url判断</span></span><br><span class="line">    timeout: <span class="number">15000</span>  <span class="comment">// 超时时间设置</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Http = &#123;&#125;;    <span class="comment">// 用来包裹请求的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历接口列表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> api_list) &#123;</span><br><span class="line">    <span class="keyword">let</span> api = api_list[key];    <span class="comment">// 每一项api都包含method, url</span></span><br><span class="line">    </span><br><span class="line">    Http[key] = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        params,    <span class="regexp">//</span> 请求参数</span></span></span><br><span class="line"><span class="function"><span class="params">        isFormData = true,    <span class="regexp">//</span> 是否是form-data请求</span></span></span><br><span class="line"><span class="function"><span class="params">        config = &#123;&#125;    <span class="regexp">//</span> 配置参数</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newParams = &#123;&#125;; <span class="comment">// 参数容器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// content-type 参数转换</span></span><br><span class="line">        <span class="comment">// 如果需要form-data请求，则格式化为form-data，一般用于post请求</span></span><br><span class="line">        <span class="keyword">if</span>(params &amp;&amp; isFormData) &#123;</span><br><span class="line">            newParams = <span class="keyword">new</span> FormData();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">                newParams.append(key, params[key])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 一般用于get请求</span></span><br><span class="line">            newParams = params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回值容器</span></span><br><span class="line">        <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不同请求判断</span></span><br><span class="line">        <span class="keyword">if</span>(api.method === <span class="string">'post'</span>) &#123;</span><br><span class="line">            <span class="comment">// post请求处理</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                res = <span class="keyword">await</span> instance[api.method](api.url, newParams, config);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">                res = err;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(api.method === <span class="string">'get'</span>) &#123;</span><br><span class="line">            <span class="comment">// get请求处理</span></span><br><span class="line">            config.params = newParams;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                res = <span class="keyword">await</span> instance[api.method](api.url, config);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">                res = err;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回返回值</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 吐司：loading框加载，不要也行</span></span><br><span class="line">    Toast.loading(&#123;</span><br><span class="line">        message: <span class="string">'加载中...'</span>,</span><br><span class="line">        forbidClick: <span class="literal">true</span>,</span><br><span class="line">        loadingType: <span class="string">'spinner'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> req;</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 请求错误</span></span><br><span class="line">    Toast.clear();  <span class="comment">// 清除吐司</span></span><br><span class="line">    Toast.fail(<span class="string">'请求失败，请稍后重试'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    Toast.clear();  <span class="comment">// 清除吐司</span></span><br><span class="line">    <span class="comment">// 不同的返回值跳相应路由即可，如201跳登陆，202跳加载失败等，根据需求自行处理</span></span><br><span class="line">    <span class="keyword">if</span>(res.data.code === <span class="number">201</span>) &#123;</span><br><span class="line">        Router.push(<span class="string">'/login'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(res.data.code === <span class="number">202</span>) &#123;</span><br><span class="line">        Router.push(<span class="string">'/loadfail'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回返回值，返回值为res.data</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    Toast.clear();  <span class="comment">// 清除吐司</span></span><br><span class="line">    Toast.fail(<span class="string">'无响应，请稍后重试'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Http</span><br></pre></td></tr></table></figure></p><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h3><p>封装完成，盘他！</p><h4 id="4-1-挂载到vue实例上"><a href="#4-1-挂载到vue实例上" class="headerlink" title="4.1 挂载到vue实例上"></a>4.1 挂载到vue实例上</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> Http <span class="keyword">from</span> <span class="string">'./service/http'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 实例挂载</span></span><br><span class="line">Vue.prototype.$Http = Http</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="4-2-测试使用"><a href="#4-2-测试使用" class="headerlink" title="4.2 测试使用"></a>4.2 测试使用</h4><p>在某个vue文件中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            data: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 获取get请求数据，注意async和await配对使用</span></span><br><span class="line">        <span class="keyword">async</span> getData1() &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> _this.$Http.getData1(&#123;</span><br><span class="line">                id: <span class="string">'xxx'</span>,</span><br><span class="line">                token: <span class="string">'xxx'</span></span><br><span class="line">            &#125;, <span class="literal">false</span>);  <span class="comment">// false代表不是formdata格式</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(res.code === <span class="number">200</span>) &#123;</span><br><span class="line">                alert(<span class="string">'get数据返回成功'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取post请求数据，注意async和await配对使用</span></span><br><span class="line">        <span class="comment">// 此处是formdata格式，第二个参数可写true,因为默认为true，因此可以不写</span></span><br><span class="line">        <span class="keyword">async</span> getData2() &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$Http.getData2(&#123;</span><br><span class="line">                id: <span class="string">'xxx'</span>,</span><br><span class="line">                token: <span class="string">'xxx'</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(res.code === <span class="number">200</span>) &#123;</span><br><span class="line">                alert(<span class="string">'post数据返回成功'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getData1();</span><br><span class="line">        <span class="keyword">this</span>.getData2();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经测试，普通格式（非文件等）请求有效，简单封装完成~</p><h2 id="三、-完结撒花"><a href="#三、-完结撒花" class="headerlink" title="三、 完结撒花~"></a>三、 完结撒花~</h2><p>一般接口的请求封装完毕，用到了基于axios的一些知识，记录至此。在项目中灵活运用，相比于一个个接口单独处理，可谓是大幅度的提升哟~<br>另外，基于此，也可配合proxy（在vue.config.js中配置）处理跨域问题，就不在此处赘述了。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      本课题包含三篇：基础篇；拦截器篇；封装篇。本篇为封装篇，主题为为axios进行封装使用。
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="axios" scheme="https://www.zhuxingmin.com/tags/axios/"/>
    
      <category term="拦截器" scheme="https://www.zhuxingmin.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vscode/webstorm自定义vue模板</title>
    <link href="https://www.zhuxingmin.com/2020/05/14/vscode-webstorm%E8%87%AA%E5%AE%9A%E4%B9%89vue%E6%A8%A1%E6%9D%BF/"/>
    <id>https://www.zhuxingmin.com/2020/05/14/vscode-webstorm自定义vue模板/</id>
    <published>2020-05-14T03:40:33.000Z</published>
    <updated>2020-05-14T04:23:25.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h3><h4 id="1-打开设置"><a href="#1-打开设置" class="headerlink" title="1. 打开设置"></a>1. 打开设置</h4><p>打开设置：<br><code>File =&gt; Settings</code></p><h4 id="2-安装vue插件"><a href="#2-安装vue插件" class="headerlink" title="2. 安装vue插件"></a>2. 安装vue插件</h4><p>在搜索区输入<code>plugins</code>，或者找到plugins选项，右边的<code>Marketplace</code>搜索<code>vue</code>，安装。<br><img src="/images/posts/webstorm_1.png" alt="安装插件" title="安装插件"></p><h4 id="3-自定义模板"><a href="#3-自定义模板" class="headerlink" title="3. 自定义模板"></a>3. 自定义模板</h4><p>有时候我们新建vue文件时默认的模板不是我们想要的，这时可以自定义模板：<br>还是在设置中，搜索框输入<code>file and code template</code>或者在设置中找到该选项也行，在右侧选择vue模板，然后在编辑区修改模板即可。如图<br><img src="/images/posts/webstorm_2.png" alt="修改vue模板" title="修改vue模板"></p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p>给出一份我自己的作为参考，可按自己常用规则优化修改。<br>其中，<code>${COMPONENT_NAME}</code>直接获取组件名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;$&#123;COMPONENT_NAME&#125;&quot;,</span><br><span class="line">        props: [],</span><br><span class="line">        components: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        data () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted () &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/scss&quot; lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><hr><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><h4 id="1-安装Vetur"><a href="#1-安装Vetur" class="headerlink" title="1. 安装Vetur"></a>1. 安装Vetur</h4><p>在应用市场中安装<code>Vetur</code></p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><p>此时，在vue项目中新建<code>.vue</code>文件，然后输入<code>vue</code>时，按<code>tab</code>键则会出来一份默认的模板。由于默认模板涵盖内容过少，因此我们仍需要对齐进行自定义模板配置。</p><h4 id="3-自定义模板-1"><a href="#3-自定义模板-1" class="headerlink" title="3. 自定义模板"></a>3. 自定义模板</h4><ol><li>打开 <code>文件 =&gt; 首选项 =&gt; 用户片段</code></li><li>搜索关键词<code>vue</code></li><li>在候选列表中选择<code>vue.json</code></li><li>在打开的文件中自定义配置即可</li></ol><p><em>如果没有找到<code>vue.json</code>，可以重启一下vscode试一下。</em></p><h4 id="4-参考-1"><a href="#4-参考-1" class="headerlink" title="4. 参考"></a>4. 参考</h4><p>给出一份参考<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Print to console"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"vue"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">            <span class="string">"&lt;template&gt;"</span>,</span><br><span class="line">            <span class="string">"    &lt;div&gt;\n"</span>,</span><br><span class="line">            <span class="string">"    &lt;/div&gt;"</span>,</span><br><span class="line">            <span class="string">"&lt;/template&gt;\n"</span>,</span><br><span class="line">            <span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">            <span class="string">"export default &#123;"</span>,</span><br><span class="line">            <span class="string">"    props: &#123;\n"</span>,</span><br><span class="line"><span class="string">"    &#125;,"</span>,</span><br><span class="line">            <span class="string">"    components: &#123;\n"</span>,</span><br><span class="line">            <span class="string">"    &#125;,"</span>,</span><br><span class="line">            <span class="string">"    data() &#123;"</span>,</span><br><span class="line">            <span class="string">"        return &#123;\n"</span>,</span><br><span class="line">            <span class="string">"        &#125;;"</span>,</span><br><span class="line">            <span class="string">"    &#125;,"</span>,</span><br><span class="line">            <span class="string">"    watch: &#123;\n"</span>,</span><br><span class="line">            <span class="string">"    &#125;,"</span>,</span><br><span class="line">            <span class="string">"    methods: &#123;\n"</span>,</span><br><span class="line">            <span class="string">"    &#125;,"</span>,</span><br><span class="line">            <span class="string">"    mounted() &#123;\n"</span>,</span><br><span class="line">            <span class="string">"    &#125;,"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"&#125;;"</span>,</span><br><span class="line">            <span class="string">"&lt;/script&gt;\n"</span>,</span><br><span class="line">            <span class="string">"&lt;style scoped lang=\"$&#123;1:scss&#125;\" type=\"text/scss\"&gt;\n"</span>,</span><br><span class="line">            <span class="string">"&lt;/style&gt;\n"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"Create vue template"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      在进行vue项目时，我们需要对编译器进一步配置来支持vue文件以及相关模板语法的高亮显示等。本文列出关于webstorm和vscode两种常用编译器的模板语法配置。
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="webstorm" scheme="https://www.zhuxingmin.com/tags/webstorm/"/>
    
      <category term="vscode" scheme="https://www.zhuxingmin.com/tags/vscode/"/>
    
      <category term="配置" scheme="https://www.zhuxingmin.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>axios进阶之路——拦截器篇</title>
    <link href="https://www.zhuxingmin.com/2020/05/13/axios%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E6%8B%A6%E6%88%AA%E5%99%A8%E7%AF%87/"/>
    <id>https://www.zhuxingmin.com/2020/05/13/axios进阶之路——拦截器篇/</id>
    <published>2020-05-13T09:02:30.000Z</published>
    <updated>2020-05-13T10:33:46.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-拦截器介绍"><a href="#一、-拦截器介绍" class="headerlink" title="一、 拦截器介绍"></a>一、 拦截器介绍</h2><p>一般在使用axios时，会用到拦截器的功能，一般分为两种：<code>请求拦截器</code>、<code>响应拦截器</code>。</p><ul><li><strong>请求拦截器</strong><br>在请求发送前进行必要操作处理，例如添加统一cookie、请求体加验证、设置请求头等，相当于是对每个接口里相同操作的一个封装；</li><li><strong>响应拦截器</strong><br>同理，响应拦截器也是如此功能，只是在请求得到响应之后，对响应体的一些处理，通常是数据统一处理等，也常来判断登录失效等。</li></ul><h2 id="二、-Axios实例"><a href="#二、-Axios实例" class="headerlink" title="二、 Axios实例"></a>二、 Axios实例</h2><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a><strong>准备工作：</strong></h3><p>axios安装： <code>yarn add axios</code></p><h3 id="实例创建："><a href="#实例创建：" class="headerlink" title="实例创建："></a><strong>实例创建：</strong></h3><p>新建js文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'xxxxxxxxxx'</span>,</span><br><span class="line">    timeout: <span class="number">15000</span>  <span class="comment">// 毫秒</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="baseURL设置："><a href="#baseURL设置：" class="headerlink" title="baseURL设置："></a><strong>baseURL设置：</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baseURL;</span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    baseURL = <span class="string">'xxx本地环境xxx'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">    baseURL = <span class="string">'xxx生产环境xxx'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: baseURL,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="修改实例的3种配置"><a href="#修改实例的3种配置" class="headerlink" title="修改实例的3种配置"></a><strong>修改实例的3种配置</strong></h3><ol><li><p><strong>全局配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 局限性比较大</span></span><br><span class="line">axios.defaults.timeout = <span class="number">1000</span>;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'xxxxx'</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>实例配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'xxxxx'</span>,</span><br><span class="line">    timeout: <span class="number">1000</span>,  <span class="comment">// 超时，401</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建完想要修改：</span></span><br><span class="line">instance.defaults.timeout = <span class="number">3000</span></span><br></pre></td></tr></table></figure></li><li><p><strong>请求配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance.get(<span class="string">'/xxx'</span>,&#123;</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>优先级如下：</strong><br><code>请求配置</code> &gt; <code>实例配置</code> &gt; <code>全局配置</code></p><h2 id="三、-拦截器配置"><a href="#三、-拦截器配置" class="headerlink" title="三、 拦截器配置"></a>三、 拦截器配置</h2><p>首先了解两个方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="params">req</span>=&gt;</span>&#123;&#125;, err=&gt;&#123;&#125;);</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.interceptors.reponse.use(<span class="function"><span class="params">req</span>=&gt;</span>&#123;&#125;, err=&gt;&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>从上可以看出，instance依然是第二步中创建的实例，然后对齐进行拦截，请求用<code>request</code>，响应用<code>reponse</code>，二者都有两个配置项，一个是成功配置，一个是error配置。<br>接下来简单举例说明。</p><h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use(两个参数)</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在发送请求前要做的事儿</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在请求错误时要做的事儿</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 该返回的数据则是axios.catch(err)中接收的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use(两个参数)</span></span><br><span class="line">axios.interceptors.reponse.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求成功对响应数据做处理</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 该返回的数据则是axios.then(res)中接收的数据</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在请求错误时要做的事儿</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 该返回的数据则是axios.catch(err)中接收的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="常见错误码处理-error"><a href="#常见错误码处理-error" class="headerlink" title="常见错误码处理(error)"></a>常见错误码处理(error)</h3><p><strong>错误处理</strong>，请求错误时进行的处理。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get().then().catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>但实际开发过程中，一般在请求/响应拦截器中统一做错误处理，有特殊接口的话做单独的catch错误处理。</p><h4 id="1-请求错误码处理"><a href="#1-请求错误码处理" class="headerlink" title="1. 请求错误码处理"></a>1. 请求错误码处理</h4><ul><li>404： not found</li><li>401： 请求超时<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(req, err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 此处做统一处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-响应错误码处理"><a href="#2-响应错误码处理" class="headerlink" title="2. 响应错误码处理"></a>2. 响应错误码处理</h4><ul><li>500： 系统错误</li><li>502： 系统重启<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.reponse.use(res, err =&gt; &#123;</span><br><span class="line">    <span class="comment">// 此处做统一处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="——"><a href="#——" class="headerlink" title="——"></a>——</h2><p>以上。<br>下一篇记录整个请求流程，以及请求的封装。</p>]]></content>
    
    <summary type="html">
    
      本课题包含三篇：基础篇；拦截器篇；封装篇。本篇为拦截器篇，主题为axios的请求拦截器、响应拦截器配置。
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="axios" scheme="https://www.zhuxingmin.com/tags/axios/"/>
    
      <category term="拦截器" scheme="https://www.zhuxingmin.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>axios进阶之路——基础篇</title>
    <link href="https://www.zhuxingmin.com/2020/05/12/axios%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://www.zhuxingmin.com/2020/05/12/axios进阶之路——基础篇/</id>
    <published>2020-05-12T01:59:21.000Z</published>
    <updated>2020-05-12T04:18:16.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-关于Axios"><a href="#一、-关于Axios" class="headerlink" title="一、 关于Axios"></a>一、 关于Axios</h2><h3 id="1-Axios是什么"><a href="#1-Axios是什么" class="headerlink" title="1. Axios是什么"></a>1. Axios是什么</h3><ul><li>Axios是一个基于 promise 的 HTTP 库</li><li>可以用于浏览器和 node.js </li><li>类似于 Ajax，进行前后端交互使用</li></ul><h3 id="2-Axios-特性"><a href="#2-Axios-特性" class="headerlink" title="2. Axios 特性"></a>2. Axios 特性</h3><ul><li>支持 Promise API </li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御 XSRF</li></ul><h2 id="二、-安装使用"><a href="#二、-安装使用" class="headerlink" title="二、 安装使用"></a>二、 安装使用</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>两种方式：（二选一）</p><ol><li>npm</li><li>yarn</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用npm：</span></span><br><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或者使用yarn：</span></span><br><span class="line">$ yarn add axios</span><br></pre></td></tr></table></figure><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><p><strong>基础使用示例</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'url'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求成功要做的事</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求失败要做的事</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="三、-基础介绍及使用"><a href="#三、-基础介绍及使用" class="headerlink" title="三、 基础介绍及使用"></a>三、 基础介绍及使用</h2><h3 id="1-axios常用请求方法"><a href="#1-axios常用请求方法" class="headerlink" title="1. axios常用请求方法"></a>1. axios常用请求方法</h3><ul><li>get</li><li>post</li><li>put</li><li>patch</li><li>delete</li></ul><h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h3><table><thead><tr><th>方法</th><th>用途</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td><strong>get</strong></td><td>获取数据</td><td style="text-align:center">/</td></tr><tr><td><strong>post</strong></td><td>提交数据</td><td style="text-align:center">表单提交、文件上传等</td></tr><tr><td>put</td><td>更新数据</td><td style="text-align:center">所有数据推送到后端</td></tr><tr><td>patch</td><td>更新数据</td><td style="text-align:center">只将修改的数据推送到后端</td></tr><tr><td>delete</td><td>删除数据</td><td style="text-align:center">/</td></tr></tbody></table><p>其中<code>get</code>,<code>post</code>目前前后端交互中最为常用</p><p><em>注：请求方法一般由后端定义，实际项目使用参照后端文档规则</em></p><h3 id="3-常用示例（GET、POST）"><a href="#3-常用示例（GET、POST）" class="headerlink" title="3. 常用示例（GET、POST）"></a>3. 常用示例（GET、POST）</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get</span></span><br><span class="line">axios.get(<span class="string">'/data.json'</span>,&#123;</span><br><span class="line">    <span class="comment">// 注 此处参数写入params中</span></span><br><span class="line">    params: &#123;</span><br><span class="line">        id: <span class="string">'zxm'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post：参数直接跟在url后面即可</span></span><br><span class="line">axios.post(<span class="string">'xxxxxxxxx'</span>, &#123;</span><br><span class="line">        xxx: <span class="string">'xxxx'</span>,</span><br><span class="line">        xxxx: <span class="string">'xxxx'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-并发请求"><a href="#4-并发请求" class="headerlink" title="4. 并发请求"></a>4. 并发请求</h3><p><strong>并发请求：</strong><br> 同时进行多个请求，并统一处理返回值。两个步骤：</p><ol><li><code>axios.all([]).then()</code></li><li><code>axios.spread()</code></li></ol><p><strong>举例：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.all([</span><br><span class="line">    axios.get(<span class="string">'url1'</span>),</span><br><span class="line">    axios.get(<span class="string">'url2'</span>)</span><br><span class="line">]).then(</span><br><span class="line">    axios.spread(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res1, res2);</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="——"><a href="#——" class="headerlink" title="——"></a>——</h2><p>基础篇到此结束，下篇记录<code>axios简单实例</code>，<code>请求拦截器</code>，<code>响应拦截器</code>。</p>]]></content>
    
    <summary type="html">
    
      本课题包含三篇：基础篇；拦截器篇；封装篇。本篇为基础篇，主题为axios基础介绍及安装使用。
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="axios" scheme="https://www.zhuxingmin.com/tags/axios/"/>
    
      <category term="拦截器" scheme="https://www.zhuxingmin.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>css布局之道——内凹圆角设计</title>
    <link href="https://www.zhuxingmin.com/2020/04/29/css%E5%B8%83%E5%B1%80%E4%B9%8B%E9%81%93%E2%80%94%E2%80%94%E5%86%85%E5%87%B9%E5%9C%86%E8%A7%92%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.zhuxingmin.com/2020/04/29/css布局之道——内凹圆角设计/</id>
    <published>2020-04-29T03:51:37.000Z</published>
    <updated>2020-05-07T01:50:34.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-效果图"><a href="#一、-效果图" class="headerlink" title="一、 效果图"></a>一、 效果图</h2><p>先来看一下效果图：<br><img src="/images/posts/内凹圆角.gif" alt="内凹圆角" title="内凹圆角"></p><a id="more"></a><h2 id="二、-实现"><a href="#二、-实现" class="headerlink" title="二、 实现"></a>二、 实现</h2><h3 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h3><p>看上图，此类场景应该很是常用吧，比如账单、卡片、列表等。</p><h3 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h3><p>看到效果图，能想到的实现方法则是</p><ul><li>planA：border-radius直接搞起来</li><li>planB：定位</li></ul><p>但是细想之后发现两者皆不可用，border-radius处理的话是凸角，舍弃；定位需要独立出来两个模块，复杂度高了，舍弃。<br>可是舍弃后，需要怎么做呢？切背景图吗？显然不合理，如果内容不固定，则模块的长度也不一样，背景图也会拉伸；思来想去，还是得从<code>定位</code>上做文章：既然元素多比较复杂，那就直接在伪类上动手。<br>可能大家猜到了，就是直接在<code>::before</code>、<code>::after</code>上模拟出来。</p><h2 id="三、-代码"><a href="#三、-代码" class="headerlink" title="三、 代码"></a>三、 代码</h2><h3 id="1-基础布局"><a href="#1-基础布局" class="headerlink" title="1. 基础布局"></a>1. 基础布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html：随便一些div --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80vw</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">15vh</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-伪类"><a href="#2-伪类" class="headerlink" title="2. 伪类"></a>2. 伪类</h3><p>基础布局出来后，怎么利用伪类处理呢？思路是这样的：</p><ol><li>利用伪类画出来一个与主题背景色一样的圆；</li><li>定位，向左(右)偏移圆自身的一半，视觉效果就是半个圆在上面；</li><li>继续定位，向上继续偏移小球的一半，视觉效果则是每个模块有个四分之一内凹圆角一样。</li></ol><p>知道思路后，就继续实现吧：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>,<span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">::before</span>,<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就完成了~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-效果图&quot;&gt;&lt;a href=&quot;#一、-效果图&quot; class=&quot;headerlink&quot; title=&quot;一、 效果图&quot;&gt;&lt;/a&gt;一、 效果图&lt;/h2&gt;&lt;p&gt;先来看一下效果图：&lt;br&gt;&lt;img src=&quot;/images/posts/内凹圆角.gif&quot; alt=&quot;内凹圆角&quot; title=&quot;内凹圆角&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://www.zhuxingmin.com/tags/css/"/>
    
      <category term="布局" scheme="https://www.zhuxingmin.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>《活好》记录</title>
    <link href="https://www.zhuxingmin.com/2020/04/01/%E3%80%8A%E6%B4%BB%E5%A5%BD%E3%80%8B%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.zhuxingmin.com/2020/04/01/《活好》随笔/</id>
    <published>2020-04-01T07:47:10.000Z</published>
    <updated>2020-04-01T08:00:04.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>时时可死，努力求生 </p></blockquote><a id="more"></a><p><br></p><h2 id="1-死亡并不是生命的结束"><a href="#1-死亡并不是生命的结束" class="headerlink" title="1. 死亡并不是生命的结束"></a>1. 死亡并不是生命的结束</h2><hr><h3 id="1-1-死亡是怎么回事"><a href="#1-1-死亡是怎么回事" class="headerlink" title="1.1 死亡是怎么回事"></a>1.1 死亡是怎么回事</h3><ul><li>人死后并不会消失，而是会以更深刻的方式留在生者的生命里。<h3 id="1-2-生命究竟是生命"><a href="#1-2-生命究竟是生命" class="headerlink" title="1.2 生命究竟是生命"></a>1.2 生命究竟是生命</h3></li><li>生命是种能量体，看不到，却存在</li><li>生命存在于我们能够支配的时间里<h3 id="1-3-如何活出真实的自己"><a href="#1-3-如何活出真实的自己" class="headerlink" title="1.3 如何活出真实的自己"></a>1.3 如何活出真实的自己</h3></li></ul><ol><li>不在乎身外之物</li><li>不被他人的评价左右</li><li>顺其自然，不要勉强</li></ol><p><strong><em>首先要鼓起勇气行动起来</em></strong></p><p><br></p><h2 id="2-关于爱"><a href="#2-关于爱" class="headerlink" title="2. 关于爱"></a>2. 关于爱</h2><hr><h3 id="2-1-爱与被爱"><a href="#2-1-爱与被爱" class="headerlink" title="2.1 爱与被爱"></a>2.1 爱与被爱</h3><ul><li>人在传递爱时，自己也能获得幸福</li><li>爱是接受最真实的他</li></ul><h3 id="2-2-如何看待朋友"><a href="#2-2-如何看待朋友" class="headerlink" title="2.2 如何看待朋友"></a>2.2 如何看待朋友</h3><ul><li>真正的朋友，纵使多年没有联络，也无论境遇发生怎样的变化，他都会把你的事儿当做自己的事儿</li></ul><h3 id="2-3-爱到底是什么"><a href="#2-3-爱到底是什么" class="headerlink" title="2.3 爱到底是什么"></a>2.3 爱到底是什么</h3><ul><li>爱是人生存的终极目的</li></ul><p><br></p><h2 id="3-宽恕很难做到"><a href="#3-宽恕很难做到" class="headerlink" title="3. 宽恕很难做到"></a>3. 宽恕很难做到</h2><hr><ul><li>宽恕别人</li><li>终止霸凌</li><li>如何与年轻人共处</li></ul><p><br></p><h2 id="4-不易化解的困难"><a href="#4-不易化解的困难" class="headerlink" title="4. 不易化解的困难"></a>4. 不易化解的困难</h2><hr><h3 id="4-1-面对突发的丧亲之痛"><a href="#4-1-面对突发的丧亲之痛" class="headerlink" title="4.1 面对突发的丧亲之痛"></a>4.1 面对突发的丧亲之痛</h3><ul><li>请相信花儿还会绽放，请耐心等待美好再次降临</li></ul><h3 id="4-2-当遭遇反对时"><a href="#4-2-当遭遇反对时" class="headerlink" title="4.2 当遭遇反对时"></a>4.2 当遭遇反对时</h3><ul><li>要相信真正有价值的东西，终有一天会被认可</li></ul><h3 id="4-3-培养孩子"><a href="#4-3-培养孩子" class="headerlink" title="4.3 培养孩子"></a>4.3 培养孩子</h3><ul><li>家长要做的是耐心等待孩子长大成熟</li></ul><p><br></p><h2 id="5-遇见未知的自己"><a href="#5-遇见未知的自己" class="headerlink" title="5. 遇见未知的自己"></a>5. 遇见未知的自己</h2><hr><h3 id="5-1-如何保持心态年轻"><a href="#5-1-如何保持心态年轻" class="headerlink" title="5.1 如何保持心态年轻"></a>5.1 如何保持心态年轻</h3><ul><li>一个人想活出崭新的自我</li></ul><h3 id="5-2-如何与人亲近"><a href="#5-2-如何与人亲近" class="headerlink" title="5.2 如何与人亲近"></a>5.2 如何与人亲近</h3><ul><li>一起笑，能消除人们之间的隔阂，能将大家紧密的联结起来</li></ul><h3 id="5-3-“伟人”是什么样子的"><a href="#5-3-“伟人”是什么样子的" class="headerlink" title="5.3 “伟人”是什么样子的"></a>5.3 “伟人”是什么样子的</h3><ul><li>所谓伟人，就是能为别人花时间的人</li></ul><blockquote><p>因为相信，所以看见</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;时时可死，努力求生 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.zhuxingmin.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MockJs使用分享</title>
    <link href="https://www.zhuxingmin.com/2020/03/24/MockJs%E4%BD%BF%E7%94%A8%E5%88%86%E4%BA%AB/"/>
    <id>https://www.zhuxingmin.com/2020/03/24/MockJs使用分享/</id>
    <published>2020-03-24T07:38:46.000Z</published>
    <updated>2020-03-24T10:18:59.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在前后端分离的时代，项目开发测试中我们常常因为前后端完成模块功能时间不一致而导致开发效率的降低，尤其是需要接口对接之时。鉴于此，<code>MockJs</code>应时而生，对此痛点予以重击。<br>&emsp;本篇案例则属于一个简单的示范案例，在脱离后端（在没与后端联调前）怎么自己模拟数据来调试前端内容。</p><h2 id="一、-效果图"><a href="#一、-效果图" class="headerlink" title="一、 效果图"></a>一、 效果图</h2><p>先看效果图：<br><img src="/images/posts/MockJs.gif" alt="Mock效果"></p><a id="more"></a><h2 id="二、-简介"><a href="#二、-简介" class="headerlink" title="二、 简介"></a>二、 简介</h2><p><img src="/images/posts/MockJs.jpg" alt="Mock效果"></p><h3 id="1-地址"><a href="#1-地址" class="headerlink" title="1. 地址"></a>1. 地址</h3><ul><li><a href="http://mockjs.com/" target="_blank" rel="noopener">官网</a><br><code>http://mockjs.com/</code></li><li><a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">示例</a><br><code>https://github.com/nuysoft/Mock/wiki</code></li></ul><h3 id="2-资源"><a href="#2-资源" class="headerlink" title="2. 资源"></a>2. 资源</h3><ul><li>官网资源<br><code>http://mockjs.com/dist/mock.js</code></li><li>cdn<br><code>&lt;script src=&quot;https://cdn.bootcss.com/Mock.js/1.0.1-beta3/mock-min.js&quot;&gt;&lt;/script&gt;</code></li></ul><h3 id="3-亮点"><a href="#3-亮点" class="headerlink" title="3. 亮点"></a>3. 亮点</h3><table><thead><tr><th style="text-align:left">六大优点</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">前后端分离</td><td style="text-align:left">让前端攻城师独立于后端进行开发</td></tr><tr><td style="text-align:left">增加单元测试的真实性</td><td style="text-align:left">通过随机数据，模拟各种场景</td></tr><tr><td style="text-align:left">开发无侵入</td><td style="text-align:left">不需要修改既有代码，就可以拦截 Ajax 请求，返回模拟的响应数据</td></tr><tr><td style="text-align:left">用法简单</td><td style="text-align:left">符合直觉的接口</td></tr><tr><td style="text-align:left">数据类型丰富</td><td style="text-align:left">支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等</td></tr><tr><td style="text-align:left">方便扩展</td><td style="text-align:left">支持支持扩展更多数据类型，支持自定义函数和正则</td></tr></tbody></table><h2 id="三、-使用"><a href="#三、-使用" class="headerlink" title="三、 使用"></a>三、 使用</h2><h3 id="1-引入"><a href="#1-引入" class="headerlink" title="1. 引入"></a>1. 引入</h3><p>普通的<code>.html</code>文件直接标签引入即可，一些框架类可使用后者<code>npm</code>等安装使用</p><h4 id="标签引入"><a href="#标签引入" class="headerlink" title="标签引入"></a>标签引入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://mockjs.com/dist/mock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// some codes...</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>通过npm安装，引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm i mockjs</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'nockjs'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">Mock.mock(<span class="string">'/data'</span>, &#123;</span><br><span class="line">    name: <span class="string">'@cname'</span>  <span class="comment">// 生成中文姓名</span></span><br><span class="line">    ... <span class="comment">// 按API写各种配置就能得到自己想要的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-常用接口"><a href="#2-常用接口" class="headerlink" title="2. 常用接口"></a>2. 常用接口</h3><p><code>Mock.mock( rurl, rtype, template | function(options) )</code></p><p>参数对照：</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">是否必选</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">rurl</td><td style="text-align:left">可选</td><td style="text-align:left">要拦截的url。注意，如果使用get的拼参链接，可以使用正则匹配</td></tr><tr><td style="text-align:left">rtype</td><td style="text-align:left">可选</td><td style="text-align:left">要拦截的请求类型，一般为<code>get</code>或<code>post</code></td></tr><tr><td style="text-align:left">template</td><td style="text-align:left">可选</td><td style="text-align:left">要返回的数据模板，也就是在此处写生成规则，返回数据都会按照这个模板返回</td></tr><tr><td style="text-align:left">function(options)</td><td style="text-align:left">可选</td><td style="text-align:left">同上<code>template</code>二选一。其中<code>options</code>打印出来是一些基础参数，包括url,请求方式等，可以从中获取到请求中传的值，根据这些数据模拟更加真实的返回数据</td></tr></tbody></table><h2 id="四、-实例"><a href="#四、-实例" class="headerlink" title="四、 实例"></a>四、 实例</h2><p>上面分享了一个动图，是简单地通过一个数字传输，到生成返回数据，到数据渲染，简单地展示MockJs在实际使用时的操作。接下来实现一下：</p><h3 id="1-布局"><a href="#1-布局" class="headerlink" title="1. 布局"></a>1. 布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输入框和按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"counts"</span>&gt;</span>Data Length<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">id</span>=<span class="string">"counts"</span> <span class="attr">placeholder</span>=<span class="string">"生成数据长度"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"build"</span>&gt;</span>Build<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>文章数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>回答数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"data"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里渲染返回数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-ajax请求"><a href="#2-ajax请求" class="headerlink" title="2. ajax请求"></a>2. ajax请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处使用的jq，用axios等亦可</span></span><br><span class="line">$(<span class="string">'#build'</span>).click(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> counts = <span class="built_in">parseInt</span>($(<span class="string">'#counts'</span>).val());</span><br><span class="line">    <span class="keyword">if</span>(! counts) &#123;</span><br><span class="line">        alert(<span class="string">'请输入您想要的长度哦'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($(<span class="string">'#counts'</span>).val() &lt; <span class="number">0</span> || $(<span class="string">'#counts'</span>).val() &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            alert(<span class="string">'请输入1-100的长度哦~'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'https://www.zhuxingmin.com/lists'</span>,</span><br><span class="line">                type: <span class="string">'get'</span>,</span><br><span class="line">                dataType: <span class="string">'json'</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    counts: counts</span><br><span class="line">                &#125;,</span><br><span class="line">                success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 返回数据结果处理</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-Mock登场"><a href="#3-Mock登场" class="headerlink" title="3. Mock登场"></a>3. Mock登场</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截</span></span><br><span class="line"><span class="comment">// url正则匹配</span></span><br><span class="line"><span class="comment">// get方式</span></span><br><span class="line"><span class="comment">// params即上边提到的options，可从中得到url,post,body等信息</span></span><br><span class="line">Mock.mock(<span class="built_in">RegExp</span>(<span class="string">'/lists*.'</span>), <span class="string">'get'</span>, params =&gt; &#123;</span><br><span class="line">    <span class="comment">// 拿到ajax传的数据</span></span><br><span class="line">    <span class="keyword">const</span> len = params.url.split(<span class="string">'?'</span>)[<span class="number">1</span>].split(<span class="string">'&amp;'</span>)[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 返回随机数据的模板</span></span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        code: <span class="number">200</span>,  <span class="comment">// 默认固定code:200</span></span><br><span class="line">        data: &#123; <span class="comment">// 重头戏</span></span><br><span class="line">            <span class="comment">// userList|$&#123;len&#125;： mockJs语法，len表示个数</span></span><br><span class="line">            [<span class="string">`userList|<span class="subst">$&#123;len&#125;</span>`</span>]: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">'uid|+1'</span>: <span class="number">1</span>,    <span class="comment">// uid从1开始，依次+1</span></span><br><span class="line">                    name: <span class="string">'@cname'</span>, <span class="comment">// 随机中文名</span></span><br><span class="line">                    <span class="string">'age|13-30'</span>: <span class="number">13</span>,    <span class="comment">// 13-30的随机整数</span></span><br><span class="line">                    <span class="string">'gender|1-2'</span>: <span class="number">0</span>,    <span class="comment">// 1-2的随机整数</span></span><br><span class="line">                    address: <span class="string">'@county(true)'</span>,   <span class="comment">// 生成随机地址</span></span><br><span class="line">                    info: &#123;</span><br><span class="line">                        <span class="string">'articles|3-150'</span>: <span class="number">3</span>,    <span class="comment">// 3-150随机整数</span></span><br><span class="line">                        <span class="string">'answer|9-99'</span>: <span class="number">1</span>,   <span class="comment">// 9-99随机整数</span></span><br><span class="line">                        <span class="string">'favorate|15-99999'</span>: <span class="number">1</span>, <span class="comment">// 15-99999随机整数</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        msg: <span class="string">'请求成功'</span> <span class="comment">// 返回默认提示</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-返回数据处理"><a href="#4-返回数据处理" class="headerlink" title="4. 返回数据处理"></a>4. 返回数据处理</h3><p>刚才在第二步的时候，我们只是发送了请求，在success中没有对返回数据进行处理。现作如下处理：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.data.userList.length; i ++) &#123;</span><br><span class="line">        html += <span class="string">`&lt;tr&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].uid&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].gender === <span class="number">1</span> ? <span class="string">'男'</span> : <span class="string">'女'</span>&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].address&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].info.articles&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].info.answer&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;<span class="subst">$&#123;res.data.userList[i].info.favorate&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">'#data'</span>).html(html);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以适当的添加样式来美化一些，不再示例。<br><strong>完成.</strong></p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;不难看出，有了Mock，前后端人员只需要定义好接口文档就可以开始并行工作，互不影响，在前端工程化中，能够高效定位代码缺陷，提前管理/修复缺陷，且有利于整个产品质量以及进度的保证。本案例只是入门级的示例，但依然能够帮助前端开发人员有一个不错的提升。更加深层次的例如原理等，本文不再探究。<br><strong>PS：</strong><br>想要完整版demo的可以扫描二维码或者微信搜索公众号”<strong>流眸</strong>“回复<code>mock</code>获取~<br><img src="/images/qrcode.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在前后端分离的时代，项目开发测试中我们常常因为前后端完成模块功能时间不一致而导致开发效率的降低，尤其是需要接口对接之时。鉴于此，&lt;code&gt;MockJs&lt;/code&gt;应时而生，对此痛点予以重击。&lt;br&gt;&amp;emsp;本篇案例则属于一个简单的示范案例，在脱离后端（在没与后端联调前）怎么自己模拟数据来调试前端内容。&lt;/p&gt;
&lt;h2 id=&quot;一、-效果图&quot;&gt;&lt;a href=&quot;#一、-效果图&quot; class=&quot;headerlink&quot; title=&quot;一、 效果图&quot;&gt;&lt;/a&gt;一、 效果图&lt;/h2&gt;&lt;p&gt;先看效果图：&lt;br&gt;&lt;img src=&quot;/images/posts/MockJs.gif&quot; alt=&quot;Mock效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="tools" scheme="https://www.zhuxingmin.com/tags/tools/"/>
    
      <category term="mockjs" scheme="https://www.zhuxingmin.com/tags/mockjs/"/>
    
  </entry>
  
  <entry>
    <title>JS交互微信之JSAPI支付</title>
    <link href="https://www.zhuxingmin.com/2020/03/03/JS%E4%BA%A4%E4%BA%92%E5%BE%AE%E4%BF%A1%E4%B9%8BJSAPI%E6%94%AF%E4%BB%98/"/>
    <id>https://www.zhuxingmin.com/2020/03/03/JS交互微信之JSAPI支付/</id>
    <published>2020-03-03T09:06:15.000Z</published>
    <updated>2020-03-04T06:31:44.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇为<strong>JS交互微信系列篇</strong>的第四篇<strong>微信JSAPI支付</strong>，记录在微信内置浏览器内用调用微信支付过程。</p><h2 id="一、-介绍"><a href="#一、-介绍" class="headerlink" title="一、 介绍"></a>一、 介绍</h2><p>JSAPI支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAPI接口调起微信支付模块完成支付。</p><a id="more"></a><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul><li>用户在微信公众账号内进入商家公众号，打开某个主页面，完成支付</li><li>用户的好友在朋友圈、聊天窗口等分享商家页面连接，用户点击链接打开商家页面，完成支付</li><li>将商户页面转换成二维码，用户扫描二维码后在微信浏览器中打开页面后完成支付</li></ul><h2 id="二、-准备"><a href="#二、-准备" class="headerlink" title="二、 准备"></a>二、 准备</h2><h3 id="1-准备内容"><a href="#1-准备内容" class="headerlink" title="1. 准备内容"></a>1. 准备内容</h3><p>要拥有两个账号：</p><ol><li>微信服务号，要通过认证（企业才拥有资格）</li><li>微信商户平台号(微信支付平台)</li></ol><h3 id="2-平台配置"><a href="#2-平台配置" class="headerlink" title="2. 平台配置"></a>2. 平台配置</h3><h4 id="2-1-微信支付-商户平台-中"><a href="#2-1-微信支付-商户平台-中" class="headerlink" title="2.1 微信支付(商户平台)中"></a>2.1 微信支付(商户平台)中</h4><p>要开通产品中心的JSAPI支付。然后<code>产品中心=&gt;开发配置=&gt;支付配置=&gt;公众号支付配置</code>绑定支付授权目录，写已通过ICP备案的域名。<br>另外，要在ip白名单中，配置测试地址ip和线上生产地址ip，不然各种回调都会失败！</p><h4 id="2-2-微信公众平台中"><a href="#2-2-微信公众平台中" class="headerlink" title="2.2 微信公众平台中"></a>2.2 微信公众平台中</h4><p>由于在微信内支付需要获取用户的<code>openid</code>，要获取它则必须通过网页授权配置。在公微信公众平台中，<code>公众号设置=&gt;功能设置=&gt;网页授权域名</code>中按要求填写。</p><h2 id="三、-开发"><a href="#三、-开发" class="headerlink" title="三、 开发"></a>三、 开发</h2><p>在支付流程方面，重点依然都在后端处理，前端方面步骤比较简单。本文只叙述前端内容。</p><h3 id="1-用户授权，获取code"><a href="#1-用户授权，获取code" class="headerlink" title="1. 用户授权，获取code"></a>1. 用户授权，获取code</h3><p>在将要进入支付的前一页面，直接接入微信授权，然后跳转进要支付的那个页面。举个例子：有a、b两个页面，在b页面用到支付，b页面由a页面跳转而来。那么在a页面跳b页面的时候，别直接跳转b的url，而是跳转到：<br><code>https://open.weixin.qq.com/connect/oauth2/authorize?appid={appId}&amp;redirect_uri={b.html}&amp;response_type=code&amp;scope=snsapi_base#wechat_redirect</code><br>我们注意到，这里有这两个需要自己写的参数：<code>appid</code>和<code>redirect_uri</code>，意义是：</p><ul><li>appid——服务号id</li><li>redirect_uri——获取授权后回调的页面地址，比如b页面</li></ul><p>另外，还有一个注意的点是，<strong><em>b.html这个url我们要进行encode转码，不然地址解析可能会出现问题！</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url转码</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">'a.html'</span>;</span><br><span class="line">url = <span class="built_in">escape</span>(url);</span><br></pre></td></tr></table></figure><h3 id="2-得到code，换取凭证获取openid"><a href="#2-得到code，换取凭证获取openid" class="headerlink" title="2. 得到code，换取凭证获取openid"></a>2. 得到code，换取凭证获取openid</h3><p>上一步执行完后，在微信浏览器中，我们会得到一个链接，类似：<br><code>b.html?&amp;code={code}&amp;state=#/</code><br>在此处，我们得到了一个code值，这就是我们获取<code>openid</code>的凭证了。<br>获取方法当然是把值传给后台，后台去处理啦~</p><h3 id="3-接收后端返回的我们需要的参数值"><a href="#3-接收后端返回的我们需要的参数值" class="headerlink" title="3. 接收后端返回的我们需要的参数值"></a>3. 接收后端返回的我们需要的参数值</h3><p>在上一步中，我们拿到code值后，就可以提交一些信息给后端了，比如商品相关属性、总价等，另外加上code值，传给后端。后端一顿操作后，返回给前端。我们需要的参数如下（后端返回下面这些参数）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信支付需要参数</span></span><br><span class="line">orderInfo: &#123;</span><br><span class="line">    package: <span class="string">''</span>,    <span class="comment">// 前端需要从后台获取该数据</span></span><br><span class="line">    paySign: <span class="string">''</span>,    <span class="comment">// 微信签名，前端需要从后台获取该数据</span></span><br><span class="line">    appId: <span class="string">''</span>,  <span class="comment">// 需要在微信绑定商户号，成功之后会生成有appid</span></span><br><span class="line">    signType: <span class="string">''</span>,   <span class="comment">// 微信签名方式,默认为"MD5",也可以从后台获取</span></span><br><span class="line">    nonceStr: <span class="string">''</span>,   <span class="comment">// 随机串，前端需要从后台获取该数据</span></span><br><span class="line">    timeStamp: <span class="string">''</span>,  <span class="comment">// 时间戳，自1970年以来的秒数，前端需要从后台获取该数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-交互微信"><a href="#4-交互微信" class="headerlink" title="4. 交互微信"></a>4. 交互微信</h3><p>上个步骤拿到需要交互微信的参数后，就开始调用微信的支付接口了，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 微信支付</span></span><br><span class="line">WeixinJSBridge.invoke(<span class="string">'getBrandWCPayRequest'</span>, &#123;</span><br><span class="line">    appId: _this.orderInfo.appId,   <span class="comment">// 上一步得到的参数</span></span><br><span class="line">    nonceStr: _this.orderInfo.nonceStr, <span class="comment">// 上一步得到的参数</span></span><br><span class="line">    package: _this.orderInfo.package,   <span class="comment">// 上一步得到的参数</span></span><br><span class="line">    signType: _this.orderInfo.signType, <span class="comment">// 上一步得到的参数</span></span><br><span class="line">    timeStamp: _this.orderInfo.timeStamp,   <span class="comment">// 上一步得到的参数</span></span><br><span class="line">    paySign: _this.orderInfo.paySign    <span class="comment">// 上一步得到的参数</span></span><br><span class="line">&#125;, res =&gt; &#123;</span><br><span class="line">    <span class="comment">// 调用后要做的事儿</span></span><br><span class="line">    <span class="comment">// codes...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据get_brand_wcpay_request的值判断支付状态</span></span><br><span class="line">    <span class="keyword">if</span> (res.err_msg === <span class="string">"get_brand_wcpay_request:ok"</span>) &#123;</span><br><span class="line">        <span class="comment">// ok：支付成功</span></span><br><span class="line">        <span class="comment">// 支付成功要做的事儿，比如跳转支付完成后的页面等</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.err_msg === <span class="string">"get_brand_wcpay_request:cancel"</span>) &#123;</span><br><span class="line">        <span class="comment">// cancel：用户取消支付</span></span><br><span class="line">        <span class="comment">// 取消支付要做的事儿，比如进入重新支付步骤等</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.err_msg === <span class="string">"get_brand_wcpay_request:fail"</span>) &#123;</span><br><span class="line">        <span class="comment">// fail： 支付失败</span></span><br><span class="line">        <span class="comment">// 支付失败要做的事儿，比如进入支付失败步骤等</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 注： 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回ok,但并不保证它绝对可靠。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="5-常见错误码"><a href="#5-常见错误码" class="headerlink" title="5. 常见错误码"></a>5. 常见错误码</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th><th style="text-align:left">原因</th><th style="text-align:left">解决方案</th></tr></thead><tbody><tr><td style="text-align:left">INVALID_REQUEST</td><td style="text-align:left">参数错误</td><td style="text-align:left">参数格式有误或者未按规则上传</td><td style="text-align:left">订单重入时，要求参数值与原请求一致，请确认参数问题</td></tr><tr><td style="text-align:left">NOAUTH</td><td style="text-align:left">商户无此接口权限</td><td style="text-align:left">商户未开通此接口权限</td><td style="text-align:left">请商户前往申请此接口权限</td></tr><tr><td style="text-align:left">NOTENOUGH</td><td style="text-align:left">余额不足</td><td style="text-align:left">用户帐号余额不足</td><td style="text-align:left">用户帐号余额不足，请用户充值或更换支付卡后再支付</td></tr><tr><td style="text-align:left">ORDERPAID</td><td style="text-align:left">商户订单已支付</td><td style="text-align:left">商户订单已支付，无需重复操作</td><td style="text-align:left">商户订单已支付，无需更多操作</td></tr><tr><td style="text-align:left">ORDERCLOSED</td><td style="text-align:left">订单已关闭</td><td style="text-align:left">当前订单已关闭，无法支付</td><td style="text-align:left">当前订单已关闭，请重新下单</td></tr><tr><td style="text-align:left">SYSTEMERROR</td><td style="text-align:left">系统错误</td><td style="text-align:left">系统超时</td><td style="text-align:left">系统异常，请用相同参数重新调用</td></tr><tr><td style="text-align:left">APPID_NOT_EXIST</td><td style="text-align:left">APPID不存在</td><td style="text-align:left">参数中缺少APPID</td><td style="text-align:left">请检查APPID是否正确</td></tr><tr><td style="text-align:left">MCHID_NOT_EXIST</td><td style="text-align:left">MCHID不存在</td><td style="text-align:left">参数中缺少MCHID</td><td style="text-align:left">请检查MCHID是否正确</td></tr><tr><td style="text-align:left">APPID_MCHID_NOT_MATCH</td><td style="text-align:left">appid和mch_id不匹配</td><td style="text-align:left">appid和mch_id不匹配</td><td style="text-align:left">请确认appid和mch_id是否匹配</td></tr><tr><td style="text-align:left">LACK_PARAMS</td><td style="text-align:left">缺少参数</td><td style="text-align:left">缺少必要的请求参数</td><td style="text-align:left">请检查参数是否齐全</td></tr><tr><td style="text-align:left">OUT_TRADE_NO_USED</td><td style="text-align:left">商户订单号重复</td><td style="text-align:left">同一笔交易不能多次提交</td><td style="text-align:left">请核实商户订单号是否重复提交</td></tr><tr><td style="text-align:left">SIGNERROR</td><td style="text-align:left">签名错误</td><td style="text-align:left">参数签名结果不正确</td><td style="text-align:left">请检查签名参数和方法是否都符合签名算法要求</td></tr><tr><td style="text-align:left">XML_FORMAT_ERROR</td><td style="text-align:left">XML格式错误</td><td style="text-align:left">XML格式错误</td><td style="text-align:left">请检查XML参数格式是否正确</td></tr><tr><td style="text-align:left">REQUIRE_POST_METHOD</td><td style="text-align:left">请使用post方法</td><td style="text-align:left">未使用post传递参数</td><td style="text-align:left">请检查请求参数是否通过post方法提交</td></tr><tr><td style="text-align:left">POST_DATA_EMPTY</td><td style="text-align:left">post数据为空</td><td style="text-align:left">post数据不能为空</td><td style="text-align:left">请检查post数据是否为空</td></tr><tr><td style="text-align:left">NOT_UTF8</td><td style="text-align:left">编码格式错误</td><td style="text-align:left">未使用指定编码格式</td><td style="text-align:left">请使用UTF-8编码格式</td></tr></tbody></table><h2 id="三、-完成"><a href="#三、-完成" class="headerlink" title="三、 完成"></a>三、 完成</h2><p>至此，调用微信JSAPI来完成在微信内的支付就完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇为&lt;strong&gt;JS交互微信系列篇&lt;/strong&gt;的第四篇&lt;strong&gt;微信JSAPI支付&lt;/strong&gt;，记录在微信内置浏览器内用调用微信支付过程。&lt;/p&gt;
&lt;h2 id=&quot;一、-介绍&quot;&gt;&lt;a href=&quot;#一、-介绍&quot; class=&quot;headerlink&quot; title=&quot;一、 介绍&quot;&gt;&lt;/a&gt;一、 介绍&lt;/h2&gt;&lt;p&gt;JSAPI支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAPI接口调起微信支付模块完成支付。&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="微信" scheme="https://www.zhuxingmin.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="jssdk" scheme="https://www.zhuxingmin.com/tags/jssdk/"/>
    
  </entry>
  
  <entry>
    <title>JS交互微信之自定义分享</title>
    <link href="https://www.zhuxingmin.com/2020/02/28/JS%E4%BA%A4%E4%BA%92%E5%BE%AE%E4%BF%A1%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E4%BA%AB/"/>
    <id>https://www.zhuxingmin.com/2020/02/28/JS交互微信之自定义分享/</id>
    <published>2020-02-28T06:12:23.000Z</published>
    <updated>2020-02-28T10:48:29.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇为<strong>JS交互微信系列篇</strong>的第三篇<strong>自定义微信分享</strong>，记录在微信内置浏览器打开页面再分享时对分享的处理。</p><h2 id="一、-介绍"><a href="#一、-介绍" class="headerlink" title="一、 介绍"></a>一、 介绍</h2><p>在微信中打开的页面，如果我们不加操作直接分享出去，除了分享的不太美观（只有title\url，而不是自定义的标题、副标题、图片等），也有可能不太符合正常流程，如：用户在a页面通过登录进如了b页面，然后将b页面直接分享给别的用户，如果我们不加以处理，那么别的用户点击b页面则会是错误页（因为跨过了登录）。当面临此类情况时，搞一下自定义分享还是十分有必要的。</p><a id="more"></a><h2 id="二、-注意事项"><a href="#二、-注意事项" class="headerlink" title="二、 注意事项"></a>二、 注意事项</h2><p><strong>请注意，不要有诱导分享等违规行为，对于诱导分享行为将永久回收公众号接口权限</strong></p><p><em>请注意，原有的 <code>wx.onMenuShareTimeline</code>、<code>wx.onMenuShareAppMessage</code>、<code>wx.onMenuShareQQ</code>、<code>wx.onMenuShareQZone</code> 接口，即将废弃。请尽快迁移使用客户端6.7.2及JSSDK 1.4.0以上版本支持的 <code>wx.updateAppMessageShareData</code>、<code>wx.updateTimelineShareData</code>接口。</em><br>引入低版本的script链接，这些接口暂时仍可用。</p><h2 id="三、-示例代码"><a href="#三、-示例代码" class="headerlink" title="三、 示例代码"></a>三、 示例代码</h2><h3 id="1-引入script"><a href="#1-引入script" class="headerlink" title="1. 引入script"></a>1. 引入script</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 主文件 或 入口文件 引入</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.1.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-wx-config配置"><a href="#2-wx-config配置" class="headerlink" title="2. wx.config配置"></a>2. wx.config配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信配置</span></span><br><span class="line"><span class="comment">// appId、timestamp、nonceStr、signature从公众号和后台获取</span></span><br><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: <span class="string">''</span>, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">    jsApiList: [</span><br><span class="line">        <span class="string">'checkJsApi'</span>,</span><br><span class="line">        <span class="string">'openAddress'</span></span><br><span class="line">    ] <span class="comment">// 必填，需要使用的JS接口列表 这里填写需要用到的微信api openlocation为使用微信内置地图查看位置接口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-自定义分享-老版本"><a href="#3-自定义分享-老版本" class="headerlink" title="3. 自定义分享[老版本]"></a>3. 自定义分享[老版本]</h3><h4 id="3-1-分享到朋友圈"><a href="#3-1-分享到朋友圈" class="headerlink" title="3.1 分享到朋友圈"></a>3.1 分享到朋友圈</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.onMenuShareTimeline(&#123;</span><br><span class="line">  title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">  link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">  imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用户点击了分享后执行的回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-分享给朋友"><a href="#3-2-分享给朋友" class="headerlink" title="3.2 分享给朋友"></a>3.2 分享给朋友</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.onMenuShareAppMessage(&#123;</span><br><span class="line">  title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">  desc: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">  link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">  imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">  type: <span class="string">''</span>, <span class="comment">// 分享类型,music、video或link，不填默认为link</span></span><br><span class="line">  dataUrl: <span class="string">''</span>, <span class="comment">// 如果type是music或video，则要提供数据链接，默认为空</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 用户点击了分享后执行的回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-3-分享到QQ"><a href="#3-3-分享到QQ" class="headerlink" title="3.3 分享到QQ"></a>3.3 分享到QQ</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.onMenuShareQQ(&#123;</span><br><span class="line">  title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">  desc: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">  link: <span class="string">''</span>, <span class="comment">// 分享链接</span></span><br><span class="line">  imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用户确认分享后执行的回调函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用户取消分享后执行的回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-4-分享到QQ空间"><a href="#3-4-分享到QQ空间" class="headerlink" title="3.4 分享到QQ空间"></a>3.4 分享到QQ空间</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.onMenuShareQZone(&#123;</span><br><span class="line">  title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">  desc: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">  link: <span class="string">''</span>, <span class="comment">// 分享链接</span></span><br><span class="line">  imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用户确认分享后执行的回调函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用户取消分享后执行的回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-自定义分享-新版本"><a href="#4-自定义分享-新版本" class="headerlink" title="4. 自定义分享[新版本]"></a>4. 自定义分享[新版本]</h3><h4 id="4-1-分享给朋友-amp-amp-分享到QQ"><a href="#4-1-分享给朋友-amp-amp-分享到QQ" class="headerlink" title="4.1 分享给朋友&amp;&amp;分享到QQ"></a>4.1 分享给朋友&amp;&amp;分享到QQ</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">  wx.updateAppMessageShareData(&#123; </span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    desc: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-2-分享到朋友圈-amp-amp-分享到QQ空间"><a href="#4-2-分享到朋友圈-amp-amp-分享到QQ空间" class="headerlink" title="4.2 分享到朋友圈 &amp;&amp; 分享到QQ空间"></a>4.2 分享到朋友圈 &amp;&amp; 分享到QQ空间</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">  wx.updateTimelineShareData(&#123; </span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇为&lt;strong&gt;JS交互微信系列篇&lt;/strong&gt;的第三篇&lt;strong&gt;自定义微信分享&lt;/strong&gt;，记录在微信内置浏览器打开页面再分享时对分享的处理。&lt;/p&gt;
&lt;h2 id=&quot;一、-介绍&quot;&gt;&lt;a href=&quot;#一、-介绍&quot; class=&quot;headerlink&quot; title=&quot;一、 介绍&quot;&gt;&lt;/a&gt;一、 介绍&lt;/h2&gt;&lt;p&gt;在微信中打开的页面，如果我们不加操作直接分享出去，除了分享的不太美观（只有title\url，而不是自定义的标题、副标题、图片等），也有可能不太符合正常流程，如：用户在a页面通过登录进如了b页面，然后将b页面直接分享给别的用户，如果我们不加以处理，那么别的用户点击b页面则会是错误页（因为跨过了登录）。当面临此类情况时，搞一下自定义分享还是十分有必要的。&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="微信" scheme="https://www.zhuxingmin.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="jssdk" scheme="https://www.zhuxingmin.com/tags/jssdk/"/>
    
  </entry>
  
  <entry>
    <title>JS交互微信之获取收货地址</title>
    <link href="https://www.zhuxingmin.com/2020/02/27/JS%E4%BA%A4%E4%BA%92%E5%BE%AE%E4%BF%A1%E4%B9%8B%E8%8E%B7%E5%8F%96%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/"/>
    <id>https://www.zhuxingmin.com/2020/02/27/JS交互微信之获取收货地址/</id>
    <published>2020-02-27T08:29:13.000Z</published>
    <updated>2020-02-27T09:09:32.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇为<strong>JS交互微信系列篇</strong>的第二篇，上一篇《JS交互微信之基础配置》讲述了基础配置，本篇记录获取（共享）用户收货地址。</p><h2 id="一、-场景"><a href="#一、-场景" class="headerlink" title="一、 场景"></a>一、 场景</h2><p>在需要用户实际收货地址时，可以直接拉取用户微信中存在的收货地址，或者在微信中新增、编辑及删除收货地址，而后传给商户</p><a id="more"></a><h2 id="二、-介绍"><a href="#二、-介绍" class="headerlink" title="二、 介绍"></a>二、 介绍</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>微信收货地址共享，是指用户在微信浏览器内打开网页，填写过地址后，后续可以免填写支持快速选择，也可增加和编辑。<br>此地址为用户属性，可在各商户的网页中共享使用。支持原生控件填写地址，地址数据会传递到商户。</p><h3 id="2-功能支持"><a href="#2-功能支持" class="headerlink" title="2. 功能支持"></a>2. 功能支持</h3><p>地址共享是基于微信JavaScript API 实现，<code>只能在微信内置浏览器中使用，其他浏览器调用无效</code>。同时，需要微信5.0 版本才能支持，建议通过user agent 来确定用户当前的版本号后再调用地址接口。<br>以iPhone 版本为例，可以通过useragent可获取如下微信版本示例信息：”<code>Mozilla/5.0(iphone;CPU iphone OS 5_1_1 like Mac OS X)AppleWebKit/534.46(KHTML,like Geocko) Mobile/9B206MicroMessenger/5.0</code>“其中5.0 为用户安装的微信版本号，商户可以判定版本号是否高于或者等于5.0。</p><h3 id="3-地址格式"><a href="#3-地址格式" class="headerlink" title="3. 地址格式"></a>3. 地址格式</h3><p>微信地址共享使用的数据字段包括：</p><ul><li>收货人姓名</li><li>地区，省市区三级</li><li>详细地址</li><li>邮编</li><li>联系电话</li><li>国际编码</li></ul><h2 id="三、-接口说明"><a href="#三、-接口说明" class="headerlink" title="三、 接口说明"></a>三、 接口说明</h2><p><strong>openAddress</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.openAddress(&#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 用户成功拉出地址 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 用户取消拉出地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>返回值说明</strong></p><table><thead><tr><th style="text-align:center">返回值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">errMsg</td><td>获取编辑收货地址成功返回“openAddress:ok”</td></tr><tr><td style="text-align:center">userName</td><td>收货人姓名</td></tr><tr><td style="text-align:center">postalCode</td><td>邮编</td></tr><tr><td style="text-align:center">provinceName</td><td>国标收货地址第一级地址（省）</td></tr><tr><td style="text-align:center">cityName</td><td>国标收货地址第二级地址（市）</td></tr><tr><td style="text-align:center">countryName</td><td>国标收货地址第三级地址（国家）</td></tr><tr><td style="text-align:center">detailInfo</td><td>详细收货地址信息</td></tr><tr><td style="text-align:center">nationalCode</td><td>收货地址国家码</td></tr><tr><td style="text-align:center">telNumber</td><td>收货人手机号码</td></tr></tbody></table><h2 id="四、-示例代码"><a href="#四、-示例代码" class="headerlink" title="四、 示例代码"></a>四、 示例代码</h2><h3 id="1-引入script"><a href="#1-引入script" class="headerlink" title="1. 引入script"></a>1. 引入script</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 主文件 或 入口文件 引入</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.1.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-wx-config配置"><a href="#2-wx-config配置" class="headerlink" title="2. wx.config配置"></a>2. wx.config配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信配置</span></span><br><span class="line"><span class="comment">// appId、timestamp、nonceStr、signature从公众号和后台获取</span></span><br><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: <span class="string">''</span>, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">    jsApiList: [</span><br><span class="line">        <span class="string">'checkJsApi'</span>,</span><br><span class="line">        <span class="string">'openAddress'</span></span><br><span class="line">    ] <span class="comment">// 必填，需要使用的JS接口列表 这里填写需要用到的微信api openlocation为使用微信内置地图查看位置接口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-获取地址"><a href="#3-获取地址" class="headerlink" title="3. 获取地址"></a>3. 获取地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检测接口是否可用，开发环境中测试用，生产环境没问题可不写</span></span><br><span class="line">    wx.checkJsApi(&#123;</span><br><span class="line">        jsApiList: [</span><br><span class="line">            <span class="string">'openAddress'</span>,</span><br><span class="line">        ],</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            alert(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 请求接口</span></span><br><span class="line">    wx.openAddress(&#123;</span><br><span class="line">        <span class="comment">// 请求成功要做的事</span></span><br><span class="line">        success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这里我把获取到的用户信息存储到了vuex中的state中保存，以防后续路由跳转带来的组件销毁带来的数据没法保存</span></span><br><span class="line">            <span class="comment">// 根据自己需求拿自己需要的参数即可，参数名可对照上面的返回值说明表</span></span><br><span class="line">            _this.$store.state.address.userName = res.userName;</span><br><span class="line">            _this.$store.state.address.telNumber = res.telNumber;</span><br><span class="line">            _this.$store.state.address.nationalCode = res.nationalCode;</span><br><span class="line">            _this.$store.state.address.provinceName = res.provinceName;</span><br><span class="line">            _this.$store.state.address.cityName = res.cityName;</span><br><span class="line">            _this.$store.state.address.countryName = res.countryName;</span><br><span class="line">            _this.$store.state.address.detailInfo = res.detailInfo;</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 用户取消要做的事儿</span></span><br><span class="line">            <span class="comment">// 这里我把请求时打开的一个loading动画给关闭了</span></span><br><span class="line">            _this.$layer.close();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="五、-常见问题"><a href="#五、-常见问题" class="headerlink" title="五、 常见问题"></a>五、 常见问题</h2><p>在开发中，我遇到的问题如下：</p><ol><li>必须发布到线上测试，没找到好的解决办法；</li><li>公众号（服务号）中要设置IP白名单，不然通不过验证！</li><li>安卓可以调起而iOS无法调起：引入<code>script</code>链接时，应引入<code>https</code>而不是<code>http</code>，可能iOS对安全策略这块儿比较严格，在此处踩了个坑。</li><li>在PC端无法调起！</li></ol><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇为&lt;strong&gt;JS交互微信系列篇&lt;/strong&gt;的第二篇，上一篇《JS交互微信之基础配置》讲述了基础配置，本篇记录获取（共享）用户收货地址。&lt;/p&gt;
&lt;h2 id=&quot;一、-场景&quot;&gt;&lt;a href=&quot;#一、-场景&quot; class=&quot;headerlink&quot; title=&quot;一、 场景&quot;&gt;&lt;/a&gt;一、 场景&lt;/h2&gt;&lt;p&gt;在需要用户实际收货地址时，可以直接拉取用户微信中存在的收货地址，或者在微信中新增、编辑及删除收货地址，而后传给商户&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="微信" scheme="https://www.zhuxingmin.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="jssdk" scheme="https://www.zhuxingmin.com/tags/jssdk/"/>
    
  </entry>
  
  <entry>
    <title>JS交互微信之基础配置</title>
    <link href="https://www.zhuxingmin.com/2020/02/25/JS%E4%BA%A4%E4%BA%92%E5%BE%AE%E4%BF%A1%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.zhuxingmin.com/2020/02/25/JS交互微信之基础配置/</id>
    <published>2020-02-25T10:12:58.000Z</published>
    <updated>2020-02-26T06:58:24.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近公司需求，需要在APP中分享出去的web页面中加入商品购买功能，目前需要使用微信支付。由于微信支付基础为0，因此不得不扒文档抄作业，加上度娘的支持，得以完成了一些功能，因此开一小模块记录下关于此项目中前端用到的东西。不过不得不说，复杂的东西都在后端执行，需要前端完成的真的是少之又少，都是一些基础配置以及调取微信文档中写的接口而已，不要想得过于复杂。</p><a id="more"></a><h3 id="篇章介绍"><a href="#篇章介绍" class="headerlink" title="篇章介绍"></a>篇章介绍</h3><p>目前可能会更新以下几块内容，每个模块仅与基础配置篇相关，其他的相互独立（如，获取用户地址模块不参与自定义分享模块内容，但都基于基础配置篇），每篇内容尽量简洁明了。</p><ul><li>基础配置（本篇）</li><li>获取用户收货地址</li><li>自定义分享</li><li>微信支付（微信浏览器，JSAPI支付）</li><li>微信支付（非微信浏览器,H5支付）</li></ul><h3 id="应用场景介绍"><a href="#应用场景介绍" class="headerlink" title="应用场景介绍"></a>应用场景介绍</h3><ol><li>在微信内打开网页时候，如果需要获取用户在微信填写的收获地址，可通过api直接调取。   ———— 微信地址共享</li><li>商户已有H5商城网站，用户通过消息、分享、链接或扫描二维码等方式在微信内打开网页时，可以调用微信支付完成下单购买的流程。    ———— JSAPI支付</li><li>用户在微信内某个页面想要分享给朋友或朋友圈时，需要对分享内容、标题及图片重新配置时使用。  ———— 自定义分享</li><li>H5支付是指商户在微信客户端外的移动端网页展示商品或服务，用户在前述页面确认使用微信支付时，商户发起本服务呼起微信客户端进行支付。  ———— H5支付</li></ol><hr><h2 id="一、-基础配置-JSSDK"><a href="#一、-基础配置-JSSDK" class="headerlink" title="一、 基础配置(JSSDK)"></a>一、 基础配置(JSSDK)</h2><p><strong><em>本块儿内容基本上是微信开放文档中配置，可忽略</em></strong></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信JS-SDK是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包。<br>通过使用微信JS-SDK，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1-绑定域名"><a href="#1-绑定域名" class="headerlink" title="1. 绑定域名"></a>1. 绑定域名</h4><p>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。<br><em>备注：登录后可在“开发者中心”查看对应的接口权限</em></p><h4 id="2-引入JS"><a href="#2-引入JS" class="headerlink" title="2. 引入JS"></a>2. 引入JS</h4><p>在需要调用JS接口的页面引入如下JS文件，（支持https）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.6.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><em>备注：支持使用 AMD/CMD 标准模块加载方法加载</em></p><h4 id="3-通过config接口注入权限验证配置"><a href="#3-通过config接口注入权限验证配置" class="headerlink" title="3. 通过config接口注入权限验证配置"></a>3. 通过config接口注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（<strong><em>同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复</em></strong>）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="4-接口验证"><a href="#4-接口验证" class="headerlink" title="4. 接口验证"></a>4. 接口验证</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功</span></span><br><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line">wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="二、-补充"><a href="#二、-补充" class="headerlink" title="二、 补充"></a>二、 补充</h2><p>在上面几个步骤中，有几个注意点：</p><ul><li>步骤3中的参数，后端提供；</li><li>步骤4中，通过ready验证成功的接口，有以下通用参数：<ol><li>success：接口调用成功时执行的回调函数。</li><li>fail：接口调用失败时执行的回调函数。</li><li>complete：接口调用完成时执行的回调函数，无论成功或失败都会执行。</li><li>cancel：用户点击取消时的回调函数，仅部分有用户取消操作的api才会用到。</li><li>trigger: 监听Menu中的按钮点击时触发的方法，该方法仅支持Menu中的相关接口。</li><li><em>备注：不要尝试在trigger中使用ajax异步请求修改本次分享的内容，因为客户端分享操作是一个同步操作，这时候使用ajax的回包会还没有返回。</em></li></ol></li><li><p>在使用每个JS接口前，可以使用<code>checkJsApi</code>的方法判断是否支持该接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.checkJsApi(&#123;</span><br><span class="line">  jsApiList: [<span class="string">'onMenuShareTimeline'</span>], <span class="comment">// 需要检测的JS接口列表，此处为分享到朋友圈接口示例</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 以键值对的形式返回，可用的api值true，不可用为false</span></span><br><span class="line">  <span class="comment">// 如：&#123;"checkResult":&#123;"onMenuShareTimeline":true&#125;,"errMsg":"checkJsApi:ok"&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>所有接口列表</p></li></ul><table><thead><tr><th style="text-align:center">接口名</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">updateAppMessageShareData</td><td style="text-align:center">分享给朋友</td></tr><tr><td style="text-align:center">updateTimelineShareData</td><td style="text-align:center">分享到朋友圈</td></tr><tr><td style="text-align:center">onMenuShareTimeline（即将废弃）</td><td style="text-align:center">分享到朋友圈</td></tr><tr><td style="text-align:center">onMenuShareAppMessage（即将废弃）</td><td style="text-align:center">分享给朋友</td></tr><tr><td style="text-align:center">onMenuShareQQ（即将废弃）</td><td style="text-align:center">分享到QQ</td></tr><tr><td style="text-align:center">onMenuShareWeibo</td><td style="text-align:center">分享到微博</td></tr><tr><td style="text-align:center">onMenuShareQZone</td><td style="text-align:center">分享到空间</td></tr><tr><td style="text-align:center">startRecord</td><td style="text-align:center">开始录音</td></tr><tr><td style="text-align:center">stopRecord</td><td style="text-align:center">停止录音</td></tr><tr><td style="text-align:center">onVoiceRecordEnd</td><td style="text-align:center">录音超时</td></tr><tr><td style="text-align:center">playVoice</td><td style="text-align:center">播放</td></tr><tr><td style="text-align:center">pauseVoice</td><td style="text-align:center">暂停</td></tr><tr><td style="text-align:center">stopVoice</td><td style="text-align:center">停止</td></tr><tr><td style="text-align:center">onVoicePlayEnd</td><td style="text-align:center">播放结束时执行</td></tr><tr><td style="text-align:center">uploadVoice</td><td style="text-align:center">上传录音</td></tr><tr><td style="text-align:center">downloadVoice</td><td style="text-align:center">下载录音</td></tr><tr><td style="text-align:center">chooseImage</td><td style="text-align:center">选择本地照片</td></tr><tr><td style="text-align:center">previewImage</td><td style="text-align:center">预览</td></tr><tr><td style="text-align:center">uploadImage</td><td style="text-align:center">上传</td></tr><tr><td style="text-align:center">downloadImage</td><td style="text-align:center">下载</td></tr><tr><td style="text-align:center">translateVoice</td><td style="text-align:center">翻译</td></tr><tr><td style="text-align:center">getNetworkType</td><td style="text-align:center">网络状况</td></tr><tr><td style="text-align:center">openLocation</td><td style="text-align:center">打开内置地图</td></tr><tr><td style="text-align:center">getLocation</td><td style="text-align:center">获取用户位置</td></tr><tr><td style="text-align:center">hideOptionMenu</td><td style="text-align:center">隐藏菜单</td></tr><tr><td style="text-align:center">showOptionMenu</td><td style="text-align:center">显示菜单</td></tr><tr><td style="text-align:center">hideMenuItems</td><td style="text-align:center">隐藏菜单按钮</td></tr><tr><td style="text-align:center">hideAllNonBaseMenuItem</td><td style="text-align:center">屏蔽所有按钮</td></tr><tr><td style="text-align:center">showAllNonBaseMenuItem</td><td style="text-align:center">显示所有按钮</td></tr><tr><td style="text-align:center">closeWindow</td><td style="text-align:center">关闭页面</td></tr><tr><td style="text-align:center">scanQRCode</td><td style="text-align:center">扫描二维码</td></tr><tr><td style="text-align:center">chooseWXPay</td><td style="text-align:center">微信支付</td></tr><tr><td style="text-align:center">openProductSpecificView</td><td style="text-align:center">微信卡券</td></tr><tr><td style="text-align:center">addCard</td><td style="text-align:center">添加卡券到卡包</td></tr><tr><td style="text-align:center">chooseCard</td><td style="text-align:center">拉取卡券</td></tr><tr><td style="text-align:center">openCard</td><td style="text-align:center">添加卡券</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近公司需求，需要在APP中分享出去的web页面中加入商品购买功能，目前需要使用微信支付。由于微信支付基础为0，因此不得不扒文档抄作业，加上度娘的支持，得以完成了一些功能，因此开一小模块记录下关于此项目中前端用到的东西。不过不得不说，复杂的东西都在后端执行，需要前端完成的真的是少之又少，都是一些基础配置以及调取微信文档中写的接口而已，不要想得过于复杂。&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="微信" scheme="https://www.zhuxingmin.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="jssdk" scheme="https://www.zhuxingmin.com/tags/jssdk/"/>
    
  </entry>
  
  <entry>
    <title>vue使用canvas签名之清空和保存</title>
    <link href="https://www.zhuxingmin.com/2020/02/03/vue%E4%BD%BF%E7%94%A8canvas%E7%AD%BE%E5%90%8D%E4%B9%8B%E6%B8%85%E7%A9%BA%E5%92%8C%E4%BF%9D%E5%AD%98/"/>
    <id>https://www.zhuxingmin.com/2020/02/03/vue使用canvas签名之清空和保存/</id>
    <published>2020-02-03T06:11:33.000Z</published>
    <updated>2020-02-14T08:33:23.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/posts/canvas画板清空保存.gif" alt="canvas画板清空保存" title="canvas画板清空保存"></p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp;在一些项目业务中，经常会使用到画板，让用户自己去写/画一些东西做标示，比如说在线签电子合约、签名等，在上两篇博客中，已经解决了PC端和移动端的Canvas签名，那么在签名完成之后，我们如何将画布上东西保存，或者清空呢？ <strong><em>【本篇包含PC和移动端的签名，以及清空和保存】</em></strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;在前两篇中，分辨实现了<code>PC端canvas签名</code>以及<code>移动端canvas签名</code>，要是形成一个简单且完整的功能点，我们起码还缺少清空和保存两个环节。接下来分析一下。</p><h3 id="1-清空"><a href="#1-清空" class="headerlink" title="1. 清空"></a>1. 清空</h3><p>&emsp;&emsp;就是将此前所画的所有笔画清除掉，方法则是清空存放点集合的数组重新设置画布宽高即可。另外一个方法，也可以使用<code>clearRect()</code>，这个方法是清空画布中一个矩形区域内的内容。由于我们并为保存所有点集合，所以采用此方法清空。</p><h4 id="1-1-关于clearRect"><a href="#1-1-关于clearRect" class="headerlink" title="1.1 关于clearRect"></a>1.1 关于clearRect</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clearRect() 方法清空给定矩形内的指定像素。</span></span><br><span class="line">context.clearRect(x,y,width,height);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th><th style="text-align:center">举例(全部清空)</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td style="text-align:center">要清除的矩形左上角的 x 坐标</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">要清除的矩形左上角的 y 坐标</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">要清除的矩形的宽度，以像素计</td><td style="text-align:center">context.width</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">要清除的矩形的高度，以像素计</td><td style="text-align:center">context.height</td></tr></tbody></table><h4 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2 代码示例"></a>1.2 代码示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> @<span class="attr">click</span>=<span class="string">"cleanCanvas"</span>&gt;</span></span><br><span class="line">    清空</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="keyword">let</span> board = <span class="keyword">this</span>.$refs.board;   <span class="comment">// 获取DOM</span></span><br><span class="line">    <span class="keyword">this</span>.width = board.width = <span class="keyword">this</span>.$refs.boardBox.offsetWidth;  <span class="comment">// 设置画布宽</span></span><br><span class="line">    <span class="keyword">this</span>.height = board.height = <span class="keyword">this</span>.$refs.boardBox.offsetHeight;    <span class="comment">// 设置画布高</span></span><br><span class="line">    ...     <span class="comment">// something codes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空画布</span></span><br><span class="line">cleanCanvas () &#123;</span><br><span class="line">    <span class="comment">// clearRect() 方法清空给定矩形内的指定像素。</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.clearRect(</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">this</span>.width,</span><br><span class="line">        <span class="keyword">this</span>.height</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-保存"><a href="#2-保存" class="headerlink" title="2. 保存"></a>2. 保存</h3><p>保存，需求简单明了，就是将canvas输出为一张图片。处理也简单粗暴，直接将此区域输出为一张base64的图片即可。方法是使用原生方法<code>toDataURL()</code></p><h4 id="2-1-关于toDataURL"><a href="#2-1-关于toDataURL" class="headerlink" title="2.1 关于toDataURL"></a>2.1 关于toDataURL</h4><p>HTMLCanvasElement.toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi。</p><ul><li>如果画布的高度或宽度是0，那么会返回字符串“data:,”。</li><li>如果传入的类型非“image/png”，但是返回的值以“data:image/png”开头，那么该传入的类型是不支持的。</li><li>Chrome支持“image/webp”类型。</li></ul><p><strong>方法</strong><br>canvas.toDataURL(type, encoderOptions);<br><strong>参数</strong></p><ul><li>type 可选<br>图片格式，默认为 image/png</li><li>encoderOptions 可选<br>图片质量。取值范围为 0 到 1 。如果指定图片格式为 image/jpeg 或 image/webp。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。</li></ul><p><strong>返回值</strong><br>包含 data URI 的DOMString。</p><h4 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2.2 代码示例"></a>2.2 代码示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> @<span class="attr">click</span>=<span class="string">"saveCanvas"</span>&gt;</span></span><br><span class="line">    保存</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"base64"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        base64: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存签名</span></span><br><span class="line">saveCanvas () &#123;</span><br><span class="line">    <span class="keyword">this</span>.base64 = <span class="keyword">this</span>.$refs.board.toDataURL(); <span class="comment">// 转为base64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>关于canvas签名的基本到这里就结束了，项目如果有遇到更复杂的再继续更新。目前更新的有</p><ul><li>PC端签名方法</li><li>移动端签名方法</li><li>PC和移动端签名方法以及清空和保存</li></ul><p>想了解本期源码的可以关注下公众号<code>流眸</code>回复<code>canvas</code>或者<code>签名</code>获取哦～<br><img src="/images/qrcode.jpg" alt="微信公众号" title="流眸"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/canvas画板清空保存.gif&quot; alt=&quot;canvas画板清空保存&quot; title=&quot;canvas画板清空保存&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="canvas" scheme="https://www.zhuxingmin.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>vue使用canvas签名之移动端</title>
    <link href="https://www.zhuxingmin.com/2020/01/14/vue%E4%BD%BF%E7%94%A8canvas%E7%AD%BE%E5%90%8D%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>https://www.zhuxingmin.com/2020/01/14/vue使用canvas签名之移动端/</id>
    <published>2020-01-14T07:04:37.000Z</published>
    <updated>2020-02-14T08:33:23.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/posts/canvas画板m.gif" alt="canvas移动端签名" title="canvas移动端签名"></p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp;在一些项目业务中，经常会使用到画板，让用户自己去写/画一些东西做标示，比如说在线签电子合约、签名等，如果不用插件，那么如何使用h5的canvas画布来实现这一需求呢？ <strong><em>【本篇只讨论移动端，PC端请看上篇】</em></strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;很明显，我们需要一个canvas，关于canvas的一些基本操作可以在w3school或者别的一些平台上熟悉一下，其实本例也是基础操作。本案例在vue中完成。（脱离vue也一样。）</p><ul><li>首先，需要一个canvas画布</li><li>其次，考虑逻辑</li><li>把逻辑实现</li></ul><h3 id="1-canvas画布"><a href="#1-canvas画布" class="headerlink" title="1. canvas画布"></a>1. canvas画布</h3><p>随意布局的一个画布，此处值得注意的是<strong>如果canvas的宽高确定，则在html&gt;canvas中直接写宽高，如果不确定，根据别的元素变化，那么可以在js中初始化画布时写</strong>。</p><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boardBox"</span> <span class="attr">ref</span>=<span class="string">"boardBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">"board"</span></span></span><br><span class="line"><span class="tag">            </span></span><br><span class="line">    &lt;/canvas&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boardBox</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25vh</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    canvas&#123;</span><br><span class="line">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#b3b3b3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="画布初始化"><a href="#画布初始化" class="headerlink" title="画布初始化"></a>画布初始化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> board = <span class="keyword">this</span>.$refs.board;   <span class="comment">// 获取DOM</span></span><br><span class="line">board.width = <span class="keyword">this</span>.$refs.boardBox.offsetWidth;  <span class="comment">// 设置画布宽</span></span><br><span class="line">board.height = <span class="keyword">this</span>.$refs.boardBox.offsetHeight;    <span class="comment">// 设置画布高</span></span><br><span class="line"><span class="keyword">this</span>.ctx = board.getContext(<span class="string">'2d'</span>);   <span class="comment">// 二维绘图</span></span><br><span class="line"><span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#000'</span>;   <span class="comment">// 颜色</span></span><br><span class="line"><span class="keyword">this</span>.ctx.lineWidth = <span class="number">3</span>;  <span class="comment">// 线条宽度</span></span><br></pre></td></tr></table></figure><h3 id="2-逻辑分析"><a href="#2-逻辑分析" class="headerlink" title="2. 逻辑分析"></a>2. 逻辑分析</h3><p>由于本篇只讨论移动端端，因此无非是在画布上监听三个触摸事件：<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>。<br>那么，在这三个事件中，分别需要做什么呢？</p><h4 id="touchstart"><a href="#touchstart" class="headerlink" title="touchstart"></a>touchstart</h4><p>开始滑动按下，需要做：</p><ul><li>获取触摸点做画布上的位置</li><li>存为一个点坐标（起始点）</li><li>以起始点建立一个路径</li><li>开启画布操作</li></ul><h4 id="touchmove"><a href="#touchmove" class="headerlink" title="touchmove"></a>touchmove</h4><p>触摸滑动时，又要做那些准备呢？</p><ul><li>判断是否开启画布操作，如果没开启就禁止绘制，因此先判断是否当前状态可绘制</li><li>获取触摸点做画布上的位置</li><li>上一个点到这一个点作连线</li><li>绘制出来</li><li>当前点存储，下一次用</li></ul><h4 id="touchend"><a href="#touchend" class="headerlink" title="touchend"></a>touchend</h4><p>滑动结束，事件结束：</p><ul><li>closePath（） // 停止绘制</li><li>关闭画布操作的开关</li></ul><p><strong>好了，其实就是这三个事件，理清楚之后去代码实现就简单得多了。附上代码一份。</strong></p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><p><strong>CSS略，如初始化即可，不是重点。</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boardBox"</span> <span class="attr">ref</span>=<span class="string">"boardBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">"board"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">touchstart</span>=<span class="string">"mStart"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">touchmove</span>=<span class="string">"mMove"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">touchend</span>=<span class="string">"mEnd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ctx: <span class="literal">null</span>,</span><br><span class="line">        point: &#123;</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        moving: <span class="literal">false</span>   <span class="comment">// 是否正在绘制中且移动</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">let</span> board = <span class="keyword">this</span>.$refs.board;   <span class="comment">// 获取DOM</span></span><br><span class="line">    board.width = <span class="keyword">this</span>.$refs.boardBox.offsetWidth;  <span class="comment">// 设置画布宽</span></span><br><span class="line">    board.height = <span class="keyword">this</span>.$refs.boardBox.offsetHeight;    <span class="comment">// 设置画布高</span></span><br><span class="line">    <span class="keyword">this</span>.ctx = board.getContext(<span class="string">'2d'</span>);   <span class="comment">// 二维绘图</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#000'</span>;   <span class="comment">// 颜色</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.lineWidth = <span class="number">3</span>;  <span class="comment">// 线条宽度</span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">// 触摸(开始)</span></span><br><span class="line">    mStart (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">        <span class="keyword">let</span> x = e.touches[<span class="number">0</span>].clientX - e.target.offsetLeft,</span><br><span class="line">            y = e.touches[<span class="number">0</span>].clientY - e.target.offsetTop;   <span class="comment">// 获取触摸点在画板（canvas）的坐标</span></span><br><span class="line">        <span class="keyword">this</span>.point.x = x;</span><br><span class="line">        <span class="keyword">this</span>.point.y = y;</span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.moving = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 滑动中...</span></span><br><span class="line">    mMove (e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.moving) &#123;</span><br><span class="line">            <span class="keyword">let</span> x = e.touches[<span class="number">0</span>].clientX - e.target.offsetLeft,</span><br><span class="line">                y = e.touches[<span class="number">0</span>].clientY - e.target.offsetTop;   <span class="comment">// 获取触摸点在画板（canvas）的坐标</span></span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.point.x, <span class="keyword">this</span>.point.y);    <span class="comment">// 把路径移动到画布中的指定点，不创建线条(起始点)</span></span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo(x, y);  <span class="comment">// 添加一个新点，然后创建从该点到画布中最后指定点的线条，不创建线条</span></span><br><span class="line">            <span class="keyword">this</span>.ctx.stroke();  <span class="comment">// 绘制</span></span><br><span class="line">            <span class="keyword">this</span>.point.x = x, <span class="keyword">this</span>.point.y = y;   <span class="comment">// 重置点坐标为上一个坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 滑动结束</span></span><br><span class="line">    mEnd () &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.moving) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.closePath();   <span class="comment">// 停止绘制</span></span><br><span class="line">            <span class="keyword">this</span>.moving = <span class="literal">false</span>;    <span class="comment">// 关闭绘制开关</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>上一篇，在PC端完成绘制，本篇如法炮制，在移动端也顺利完成，相比pc端只是稍微的修改了一下获取坐标点的算法而已。那么PC端和移动端如何并存呢？</li><li>出错了，怎么重新绘制呢？</li><li>绘制完成后，怎么保存呢？</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/canvas画板m.gif&quot; alt=&quot;canvas移动端签名&quot; title=&quot;canvas移动端签名&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="canvas" scheme="https://www.zhuxingmin.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>vue使用canvas签名之PC端</title>
    <link href="https://www.zhuxingmin.com/2020/01/10/vue%E4%BD%BF%E7%94%A8canvas%E7%AD%BE%E5%90%8D%E4%B9%8BPC%E7%AB%AF/"/>
    <id>https://www.zhuxingmin.com/2020/01/10/vue使用canvas签名之PC端/</id>
    <published>2020-01-10T03:39:08.000Z</published>
    <updated>2020-02-14T08:33:23.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/posts/canvas画板pc.gif" alt="canvas签名效果" title="签名效果"></p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp;在一些项目业务中，经常会使用到画板，让用户自己去写/画一些东西做标示，比如说在线签电子合约、签名等，如果不用插件，那么如何使用h5的canvas画布来实现这一需求呢？ <strong><em>【本篇只讨论PC端，移动端期待下篇】</em></strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;很明显，我们需要一个canvas，关于canvas的一些基本操作可以在w3school或者别的一些平台上熟悉一下，其实本例也是基础操作。本案例在vue中完成。（脱离vue也一样。）</p><ul><li>首先，需要一个canvas画布</li><li>其次，考虑逻辑</li><li>把逻辑实现</li></ul><h3 id="1-canvas画布"><a href="#1-canvas画布" class="headerlink" title="1. canvas画布"></a>1. canvas画布</h3><p>随意布局的一个画布，此处值得注意的是<strong>如果canvas的宽高确定，则在html&gt;canvas中直接写宽高，如果不确定，根据别的元素变化，那么可以在js中初始化画布时写</strong>。</p><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boardBox"</span> <span class="attr">ref</span>=<span class="string">"boardBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">"board"</span></span></span><br><span class="line"><span class="tag">            </span></span><br><span class="line">    &lt;/canvas&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boardBox</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35vh</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    canvas&#123;</span><br><span class="line">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#298cff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="画布初始化"><a href="#画布初始化" class="headerlink" title="画布初始化"></a>画布初始化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> board = <span class="keyword">this</span>.$refs.board;   <span class="comment">// 获取DOM</span></span><br><span class="line">board.width = <span class="keyword">this</span>.$refs.boardBox.offsetWidth;  <span class="comment">// 设置画布宽</span></span><br><span class="line">board.height = <span class="keyword">this</span>.$refs.boardBox.offsetHeight;    <span class="comment">// 设置画布高</span></span><br><span class="line"><span class="keyword">this</span>.ctx = board.getContext(<span class="string">'2d'</span>);   <span class="comment">// 二维绘图</span></span><br><span class="line"><span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#ff0000'</span>;   <span class="comment">// 颜色</span></span><br><span class="line"><span class="keyword">this</span>.ctx.lineWidth = <span class="number">5</span>;  <span class="comment">// 线条宽度</span></span><br></pre></td></tr></table></figure><h3 id="2-逻辑分析"><a href="#2-逻辑分析" class="headerlink" title="2. 逻辑分析"></a>2. 逻辑分析</h3><p>由于本篇只讨论PC端，因此无非是在画布上监听三个鼠标事件：<code>mousedown</code>、<code>mousemove</code>、<code>mouseup</code>。<br>那么，在这三个事件中，分别需要做什么呢？</p><h4 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown"></a>mousedown</h4><p>鼠标按下，需要做：</p><ul><li>获取鼠标做画布上的位置</li><li>存为一个点坐标（起始点）</li><li>以起始点建立一个路径</li><li>开启画布操作</li></ul><h4 id="mousemove"><a href="#mousemove" class="headerlink" title="mousemove"></a>mousemove</h4><p>鼠标移动时，又要做那些准备呢？</p><ul><li>判断是否开启画布操作，如果没开启我们当然不能鼠标在画布上移动就给绘制吧，因此先判断是否当前状态可绘制</li><li>获取鼠标做画布上的位置</li><li>上一个点到这一个点作连线</li><li>绘制出来</li><li>当前点存储，下一次用</li></ul><p>可能此处有些迷，大概意思就是，鼠标不停的运动，在某一时刻鼠标的位置A（x,y），在下一时刻A则会变成上一个位置，我们的思路无非是不断的绘制出鼠标上一个时刻到当前时刻的路径而已。一会儿上代码可能就好理解一点。</p><h4 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup"></a>mouseup</h4><p>鼠标抬起，事件结束：</p><ul><li>closePath（） // 停止绘制</li><li>关闭画布操作的开关</li></ul><p><strong>好了，其实就是这三个事件，理清楚之后去代码实现就简单得多了。附上代码一份。</strong></p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><p><strong>CSS略，如初始化即可，不是重点。</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boardBox"</span> <span class="attr">ref</span>=<span class="string">"boardBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">"board"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">mousedown</span>=<span class="string">"pcStart"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">mousemove</span>=<span class="string">"pcMove"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">mouseup</span>=<span class="string">"pcEnd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ctx: <span class="literal">null</span>,</span><br><span class="line">        point: &#123;</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        moving: <span class="literal">false</span>   <span class="comment">// 是否正在绘制中且移动</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">let</span> board = <span class="keyword">this</span>.$refs.board;   <span class="comment">// 获取DOM</span></span><br><span class="line">    board.width = <span class="keyword">this</span>.$refs.boardBox.offsetWidth;  <span class="comment">// 设置画布宽</span></span><br><span class="line">    board.height = <span class="keyword">this</span>.$refs.boardBox.offsetHeight;    <span class="comment">// 设置画布高</span></span><br><span class="line">    <span class="keyword">this</span>.ctx = board.getContext(<span class="string">'2d'</span>);   <span class="comment">// 二维绘图</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#ff0000'</span>;   <span class="comment">// 颜色</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.lineWidth = <span class="number">5</span>;  <span class="comment">// 线条宽度</span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">// 鼠标按下(开始)</span></span><br><span class="line">    pcStart (e) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = e.offsetX, y = e.offsetY;   <span class="comment">// 获取鼠标在画板（canvas）的坐标</span></span><br><span class="line">        <span class="keyword">this</span>.point.x = x;</span><br><span class="line">        <span class="keyword">this</span>.point.y = y;</span><br><span class="line">        <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">        <span class="keyword">this</span>.moving = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 鼠标移动（移动中...）</span></span><br><span class="line">    pcMove (e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.moving) &#123;</span><br><span class="line">            <span class="keyword">let</span> x = e.offsetX, y = e.offsetY;   <span class="comment">// 获取鼠标在画板（canvas）的坐标</span></span><br><span class="line">            <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.point.x, <span class="keyword">this</span>.point.y);    <span class="comment">// 把路径移动到画布中的指定点，不创建线条(起始点)</span></span><br><span class="line">            <span class="keyword">this</span>.ctx.lineTo(x, y);  <span class="comment">// 添加一个新点，然后创建从该点到画布中最后指定点的线条，不创建线条</span></span><br><span class="line">            <span class="keyword">this</span>.ctx.stroke();  <span class="comment">// 绘制</span></span><br><span class="line">            <span class="keyword">this</span>.point.x = x, <span class="keyword">this</span>.point.y = y;   <span class="comment">// 重置点坐标为上一个坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 鼠标松开（结束）</span></span><br><span class="line">    pcEnd () &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.moving) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ctx.closePath();   <span class="comment">// 停止绘制</span></span><br><span class="line">            <span class="keyword">this</span>.moving = <span class="literal">false</span>;    <span class="comment">// 关闭绘制开关</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>&emsp;&emsp;PC端出来了，而现在其实还是移动端偏多，并且这只是一个问题，是否还有延伸呢？</p><ul><li>移动端是否可以如法炮制呢？</li><li>出错了，怎么重新绘制呢？</li><li>绘制完成后，怎么保存呢？</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/canvas画板pc.gif&quot; alt=&quot;canvas签名效果&quot; title=&quot;签名效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="canvas" scheme="https://www.zhuxingmin.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>解决vue打包报错UglifyJs</title>
    <link href="https://www.zhuxingmin.com/2019/12/06/%E8%A7%A3%E5%86%B3vue%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99UglifyJs/"/>
    <id>https://www.zhuxingmin.com/2019/12/06/解决vue打包报错UglifyJs/</id>
    <published>2019-12-06T04:13:29.000Z</published>
    <updated>2020-02-14T08:33:23.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR in js/xxxxxx.js from UglifyJs</span><br><span class="line">Unexpected token: name «Dom7», expected: punc «;» [js/chunk-3068</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h3><p>在vue配置中，由于各插件版本兼容性差异可能会引发此问题的产生。<code>UglifyJs</code>是一款可以解析、混淆、压缩JS的工具，此处的UglifyJs是配置在脚手架/webpack中，运行在node环境中的小插件。<br>关于UglifyJs：</p><blockquote><ol><li>uglify-js@3具有简化的API和CLI，该API和CLI与不能向后兼容uglify-js@2。</li><li>UglifyJS 2.x版本的文档可以在这里找到。</li><li>glify-js 仅支持JavaScript（ECMAScript 5）。</li><li>要缩小ECMAScript 2015或更高版本，请使用Babel之类的工具进行翻译。</li></ol></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="低版本："><a href="#低版本：" class="headerlink" title="低版本："></a>低版本：</h4><ul><li>原因： UglifyJs不支持ES6语法，因此报错。</li><li>解决方案： 项目根目录下创建文件<code>.babelrc</code>，配置如下<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pressets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="高版本："><a href="#高版本：" class="headerlink" title="高版本："></a>高版本：</h4><ul><li>原因1：UglifyJs版本过低</li><li><p>解决方案： 升级UglifyJs版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglify-js -g</span><br></pre></td></tr></table></figure></li><li><p>原因2: babel 转译问题</p></li><li>解决方案： 找到babel的配置项<code>transpileDependencies</code>，如下操作：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旧</span></span><br><span class="line">transpileDependencies: [</span><br><span class="line"><span class="comment">/* string or regex */</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为如下⬇️ </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新  </span></span><br><span class="line">transpileDependencies: [</span><br><span class="line">    <span class="string">'vue-particles'</span>,</span><br><span class="line">    <span class="string">'animejs'</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul><h3 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h3><p><code>npm run build</code>，完毕。</p><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p><a href="mailto:vue-cli@3.x" target="_blank" rel="noopener">vue-cli@3.x</a> <code>vue.config.js</code>配置混淆压缩代js及去除console(缺少的插件先安装上)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除console</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css、js</span></span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要压缩的文件</span></span><br><span class="line"><span class="keyword">const</span> productionGzipExtensions = [<span class="string">'js'</span>, <span class="string">'css'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// something else codes</span></span><br><span class="line"></span><br><span class="line">    configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是开发环境</span></span><br><span class="line">        <span class="keyword">if</span> (env !== <span class="string">'development'</span>) &#123;</span><br><span class="line">            <span class="comment">// 代码压缩</span></span><br><span class="line">            config.plugins.push(<span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">                algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">                test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`\\.(<span class="subst">$&#123;productionGzipExtensions.join(<span class="string">'|'</span>)&#125;</span>)$`</span>),</span><br><span class="line">                threshold: <span class="number">10240</span>,</span><br><span class="line">                minRatio: <span class="number">0.8</span>,</span><br><span class="line">            &#125;));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打包后清除断点和控制台打印</span></span><br><span class="line">            config.plugins.push(</span><br><span class="line">                <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            drop_debugger: <span class="literal">true</span>, <span class="comment">// 注释debugger</span></span><br><span class="line">                            drop_console: <span class="literal">true</span>, <span class="comment">// 注释console</span></span><br><span class="line">                            pure_funcs:[<span class="string">'console.log'</span>] <span class="comment">// 移除console</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: <span class="literal">false</span>,   <span class="comment">// 去除打包后生成的.map文件</span></span><br><span class="line">                    parallel: <span class="literal">true</span>,</span><br><span class="line">                &#125;),</span><br><span class="line"></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>希望能够解决您的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;报错&quot;&gt;&lt;a href=&quot;#报错&quot; class=&quot;headerlink&quot; title=&quot;报错&quot;&gt;&lt;/a&gt;报错&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR in js/xxxxxx.js from UglifyJs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Unexpected token: name «Dom7», expected: punc «;» [js/chunk-3068&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="uglify报错" scheme="https://www.zhuxingmin.com/tags/uglify%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>vue中高德搭配echarts做迁徙流线图</title>
    <link href="https://www.zhuxingmin.com/2019/12/03/vue%E4%B8%AD%E9%AB%98%E5%BE%B7%E6%90%AD%E9%85%8Decharts%E5%81%9A%E8%BF%81%E5%BE%99%E6%B5%81%E7%BA%BF%E5%9B%BE/"/>
    <id>https://www.zhuxingmin.com/2019/12/03/vue中高德搭配echarts做迁徙流线图/</id>
    <published>2019-12-03T07:36:06.000Z</published>
    <updated>2020-02-14T08:33:23.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此系列共分为以下几篇</p><blockquote><ul><li>《vue中高德地图的使用》</li><li>《vue中基于高德的多行政区域覆盖》</li><li><strong>《vue中高德搭配echarts做数据迁徙流线图》</strong> <em>（本篇）</em></li></ul></blockquote><h3 id="本篇效果"><a href="#本篇效果" class="headerlink" title="本篇效果"></a>本篇效果</h3><p><img src="/images/posts/流线迁徙.gif" alt="效果展示" title="流线迁徙"><br><a id="more"></a></p><hr><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-思路分析"><a href="#1-思路分析" class="headerlink" title="1. 思路分析"></a>1. 思路分析</h4><p>第一篇的基础讲解，加上上一片的行政区域行政区域展示（描边及背景），其实可以完成很多炫酷效果了。本篇讲述系列篇的最后一篇：vue中高德搭配echarts做数据迁徙流线图。由于流线图使用的曲线是贝塞尔曲线，而在高德中无法直接简单粗暴的使用，想要完成此效果的话可能要进行一些算法操作才能完成该效果。在节约时间成本的条件下，找到了在echarts中完成该操作。简单的说，就是用echarts的功能，搭配高德的经纬度当背景板，来完成此操作。</p><blockquote><p>步骤分析</p><ol><li>echarts安装 引入</li><li>高德背景板设置（经纬度、中心点等）</li><li>挂载数据</li></ol></blockquote><h4 id="2-代码分析"><a href="#2-代码分析" class="headerlink" title="2. 代码分析"></a>2. 代码分析</h4><h5 id="echarts安装-引入"><a href="#echarts安装-引入" class="headerlink" title="echarts安装 引入"></a>echarts安装 引入</h5><ul><li>安装：<code>npm install echarts --save-dev</code></li><li>引入： <code>main.js</code> =&gt; <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局挂载echarts</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$echarts = echarts;</span><br></pre></td></tr></table></figure></li></ul><h5 id="高德背景板设置"><a href="#高德背景板设置" class="headerlink" title="高德背景板设置"></a>高德背景板设置</h5><p>在此中，可以自定义的调整一些关于地图背景板的配置，如样式、3D效果、旋转、动画等，在demo中有所注释，自己根据需要配置即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 amap 组件</span></span><br><span class="line">amap: &#123;</span><br><span class="line">    <span class="comment">// 高德地图中心经纬度</span></span><br><span class="line">    center: [<span class="number">105.397428</span>, <span class="number">38.90923</span>], <span class="comment">//中心点</span></span><br><span class="line">    <span class="comment">// 高德地图缩放</span></span><br><span class="line">    zoom: <span class="number">4</span>,</span><br><span class="line">    <span class="comment">// 启用resize</span></span><br><span class="line">    resizeEnable: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 自定义地图样式主题</span></span><br><span class="line">    mapStyle: <span class="string">"amap://xxxxxx"</span>, <span class="comment">// 地图主题 自己申请即可 我的是极夜蓝主题</span></span><br><span class="line">    <span class="comment">// viewMode:'3D',//开启3D视图,默认为关闭</span></span><br><span class="line">    <span class="comment">// expandZoomRange:true,</span></span><br><span class="line">    <span class="comment">// zooms:[3,20],</span></span><br><span class="line">    <span class="comment">// pitch: 40</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><p>此处写了两组数据，一组为<code>flyLine</code>代表流线数组，另一组为<code>goals</code>代表目标点。其中流线数据中坐标点有两个，是起始和终点的经纬度坐标。如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        flyLine: [</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">123.499706</span>,<span class="number">41.857793</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">86.113232</span>,<span class="number">43.684254</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">87.343701</span>,<span class="number">35.720308</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">101.406201</span>,<span class="number">24.177443</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">111.249951</span>,<span class="number">24.976714</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">107.206982</span>,<span class="number">33.843608</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">115.468701</span>,<span class="number">43.557002</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">107.031201</span>,<span class="number">37.134586</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">99.648388</span>,<span class="number">38.522914</span>]]&#125;,</span><br><span class="line">            &#123;<span class="attr">coords</span>: [[<span class="number">116.496437</span>,<span class="number">39.913523</span>], [<span class="number">124.081982</span>,<span class="number">49.361353</span>]]&#125;,</span><br><span class="line">        ],</span><br><span class="line">        goals: [</span><br><span class="line">            [<span class="number">123.499706</span>,<span class="number">41.857793</span>],</span><br><span class="line">            [<span class="number">86.113232</span>,<span class="number">43.684254</span>],</span><br><span class="line">            [<span class="number">87.343701</span>,<span class="number">35.720308</span>],</span><br><span class="line">            [<span class="number">101.406201</span>,<span class="number">24.177443</span>],</span><br><span class="line">            [<span class="number">111.249951</span>,<span class="number">24.976714</span>],</span><br><span class="line">            [<span class="number">107.206982</span>,<span class="number">33.843608</span>],</span><br><span class="line">            [<span class="number">115.468701</span>,<span class="number">43.557002</span>],</span><br><span class="line">            [<span class="number">107.031201</span>,<span class="number">37.134586</span>],</span><br><span class="line">            [<span class="number">107.031201</span>,<span class="number">37.134586</span>],</span><br><span class="line">            [<span class="number">99.648388</span>,<span class="number">38.522914</span>],</span><br><span class="line">            [<span class="number">124.081982</span>,<span class="number">49.361353</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h5 id="数据渲染"><a href="#数据渲染" class="headerlink" title="数据渲染"></a>数据渲染</h5><p>最后一步，其实是echarts的常规操作，可以配置流线、提示、流线背景、特效、效果、等等等等，依然是配置自己需要的即可，毕竟是搭配来的地图，特效多了会影响性能～如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map"</span> <span class="attr">ref</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">mapInit () &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">        <span class="comment">// 加载 amap 组件</span></span><br><span class="line">        amap: &#123;</span><br><span class="line">            <span class="comment">// 高德地图中心经纬度</span></span><br><span class="line">            center: [<span class="number">105.397428</span>, <span class="number">38.90923</span>], <span class="comment">//中心点</span></span><br><span class="line">            <span class="comment">// 高德地图缩放</span></span><br><span class="line">            zoom: <span class="number">4</span>,</span><br><span class="line">            <span class="comment">// 启用resize</span></span><br><span class="line">            resizeEnable: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 自定义地图样式主题</span></span><br><span class="line">            mapStyle: <span class="string">"amap://styles/bfb1bb3feb0db7082367abca96b8d214"</span>, <span class="comment">//地图主题</span></span><br><span class="line">            <span class="comment">// viewMode:'3D',//开启3D视图,默认为关闭</span></span><br><span class="line">            <span class="comment">// expandZoomRange:true,</span></span><br><span class="line">            <span class="comment">// zooms:[3,20],</span></span><br><span class="line">            <span class="comment">// pitch: 40</span></span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: <span class="string">'item'</span>,</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        animation: <span class="literal">false</span>,</span><br><span class="line">        series: [</span><br><span class="line">            <span class="comment">// 流线</span></span><br><span class="line">            &#123;</span><br><span class="line">                coordinateSystem: <span class="string">"amap"</span>, <span class="comment">// 该系列使用的坐标系是高德地图的坐标系</span></span><br><span class="line">                type: <span class="string">"lines"</span>, <span class="comment">// 该类型用于地图上路线的绘制</span></span><br><span class="line">                zlevel: <span class="number">1</span>, <span class="comment">// 相当于z-index</span></span><br><span class="line">                effect: &#123; <span class="comment">// 线特效的配置</span></span><br><span class="line">                    show: <span class="literal">true</span>,  <span class="comment">// 是否显示特效</span></span><br><span class="line">                    period: <span class="number">5</span>, <span class="comment">// 特效动画的时间</span></span><br><span class="line">                    trailLength: <span class="number">0.05</span>, <span class="comment">// 特效尾迹的长度 0-1</span></span><br><span class="line">                    color: <span class="string">"#3437ff"</span>, <span class="comment">// 特效的颜色</span></span><br><span class="line">                    symbolSize: <span class="number">5</span> <span class="comment">// 特效的大小</span></span><br><span class="line">                &#125;,</span><br><span class="line">                lineStyle: &#123; <span class="comment">// 线的颜色</span></span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        color: <span class="string">"rgba(47,68,200,0.1)"</span>,</span><br><span class="line">                        width: <span class="number">2</span>,</span><br><span class="line">                        curveness: <span class="number">0.2</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                data: _this.flyLine,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 目标点</span></span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'目标点'</span>,</span><br><span class="line">                type: <span class="string">"scatter"</span>,</span><br><span class="line">                <span class="comment">// 使用高德地图坐标系</span></span><br><span class="line">                coordinateSystem: <span class="string">"amap"</span>,</span><br><span class="line">                <span class="comment">// 数据格式跟在 geo 坐标系上一样，每一项都是 [经度，纬度，数值大小，其它维度...]</span></span><br><span class="line">                data:  _this.goals,</span><br><span class="line">                symbolSize: <span class="number">3</span>,</span><br><span class="line">                encode: &#123;</span><br><span class="line">                    value: <span class="number">2</span></span><br><span class="line">                &#125;,</span><br><span class="line">                label: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        formatter: <span class="string">'&#123;b&#125;'</span>,</span><br><span class="line">                        position: <span class="string">'right'</span>,</span><br><span class="line">                        show: <span class="literal">false</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    emphasis: &#123;</span><br><span class="line">                        show: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        color: <span class="string">'rgba(98,122,200,0.78)'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> chart = <span class="keyword">this</span>.$echarts.init(_this.$refs.map);</span><br><span class="line">    chart.setOption(option);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>至此，目的完成：<br><img src="/images/posts/流线迁徙.png" alt="效果展示" title="流线迁徙"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此系列共分为以下几篇&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;《vue中高德地图的使用》&lt;/li&gt;
&lt;li&gt;《vue中基于高德的多行政区域覆盖》&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;《vue中高德搭配echarts做数据迁徙流线图》&lt;/strong&gt; &lt;em&gt;（本篇）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;本篇效果&quot;&gt;&lt;a href=&quot;#本篇效果&quot; class=&quot;headerlink&quot; title=&quot;本篇效果&quot;&gt;&lt;/a&gt;本篇效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/流线迁徙.gif&quot; alt=&quot;效果展示&quot; title=&quot;流线迁徙&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="高德" scheme="https://www.zhuxingmin.com/tags/%E9%AB%98%E5%BE%B7/"/>
    
      <category term="echarts" scheme="https://www.zhuxingmin.com/tags/echarts/"/>
    
      <category term="流线" scheme="https://www.zhuxingmin.com/tags/%E6%B5%81%E7%BA%BF/"/>
    
      <category term="地图" scheme="https://www.zhuxingmin.com/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="迁徙" scheme="https://www.zhuxingmin.com/tags/%E8%BF%81%E5%BE%99/"/>
    
  </entry>
  
  <entry>
    <title>vue中基于高德的多行政区域覆盖</title>
    <link href="https://www.zhuxingmin.com/2019/11/12/vue%E4%B8%AD%E5%9F%BA%E4%BA%8E%E9%AB%98%E5%BE%B7%E7%9A%84%E5%A4%9A%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%9F%9F%E8%A6%86%E7%9B%96/"/>
    <id>https://www.zhuxingmin.com/2019/11/12/vue中基于高德的多行政区域覆盖/</id>
    <published>2019-11-12T06:45:03.000Z</published>
    <updated>2019-11-14T01:14:52.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此系列共分为以下几篇</p><blockquote><ul><li>《vue中高德地图的使用》</li><li><strong>《vue中基于高德的多行政区域覆盖》</strong> <em>（本篇）</em></li><li>《vue中高德搭配echarts做数据迁徙流线图》</li></ul></blockquote><h3 id="本篇效果"><a href="#本篇效果" class="headerlink" title="本篇效果"></a>本篇效果</h3><p><img src="/images/posts/行政区域展示.png" alt="效果展示" title="行政区域展示"><br><a id="more"></a></p><hr><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-思路分析"><a href="#1-思路分析" class="headerlink" title="1. 思路分析"></a>1. 思路分析</h4><p>基于上一篇的基础讲解，再来看本篇目的，行政区域展示（秒变及背景），其实就是基于在经纬度坐标系上将某个/些行政区域规划出来。如果仔细看官方文档的前端er，则更是发现在文档中提供灵了一个行政区域上色的工具方法。因此基础思路如下：</p><ol><li>加载基础坐标系；</li><li>给定具体行政区域上色；</li><li>多行政区域循环；</li></ol><h4 id="2-代码分析"><a href="#2-代码分析" class="headerlink" title="2. 代码分析"></a>2. 代码分析</h4><p>==详细代码在文章底部==</p><h5 id="初始化地图"><a href="#初始化地图" class="headerlink" title="初始化地图"></a>初始化地图</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 略 见文章底部详细代码</span></span><br></pre></td></tr></table></figure><h5 id="行政区域蒙层加载"><a href="#行政区域蒙层加载" class="headerlink" title="行政区域蒙层加载"></a>行政区域蒙层加载</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">areaBG (cityName) &#123;</span><br><span class="line">    <span class="comment">// 加载行政区划插件</span></span><br><span class="line">    AMap.service(<span class="string">'AMap.DistrictSearch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> opts = &#123;</span><br><span class="line">        subdistrict: <span class="number">1</span>,   <span class="comment">// 返回下一级行政区</span></span><br><span class="line">        extensions: <span class="string">'all'</span>,  <span class="comment">// 返回行政区边界坐标组等具体信息</span></span><br><span class="line">        level: <span class="string">'city'</span>  <span class="comment">// 查询行政级别为市</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 实例化DistrictSearch</span></span><br><span class="line">        <span class="keyword">let</span> district = <span class="keyword">new</span> AMap.DistrictSearch(opts);</span><br><span class="line">        district.setLevel(<span class="string">'district'</span>);</span><br><span class="line">        <span class="comment">// 行政区查询</span></span><br><span class="line">        district.search(<span class="string">`<span class="subst">$&#123;cityName&#125;</span>`</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status, result</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取边界信息</span></span><br><span class="line">        <span class="keyword">let</span> bounds = result.districtList[<span class="number">0</span>].boundaries;</span><br><span class="line">        <span class="comment">// 存放行政区划</span></span><br><span class="line">        <span class="keyword">let</span> polygons = [];</span><br><span class="line">        <span class="keyword">if</span> (bounds) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = bounds.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="comment">//生成行政区划polygon</span></span><br><span class="line">            <span class="keyword">let</span> polygon = <span class="keyword">new</span> AMap.Polygon(&#123;</span><br><span class="line">                map: <span class="keyword">new</span> AMap.Map(<span class="string">"map"</span>, &#123;</span><br><span class="line">                    center: [<span class="number">105.397428</span>, <span class="number">35.90923</span>],</span><br><span class="line">                    zoom: <span class="number">5</span></span><br><span class="line">                &#125;);,   <span class="comment">// 坐标系及主题</span></span><br><span class="line">                strokeWeight: <span class="number">1</span>,   </span><br><span class="line">                path: bounds[i],</span><br><span class="line">                fillOpacity: <span class="number">0.2</span>,</span><br><span class="line">                fillColor: <span class="string">'rgba(71,228,194,0.44)'</span>,</span><br><span class="line">                strokeColor: <span class="string">'rgba(83,204,79,0.65)'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            polygons.push(polygon);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.areaBG(<span class="string">'辽宁省'</span>);</span><br></pre></td></tr></table></figure><p>得到如下地图示例：<em>(此处添加了个人的’mapStyle’)</em></p><p><img src="/images/posts/行政区域-辽宁省.png" alt="行政区域-辽宁省" title="行政区域-辽宁省"></p><p>那么，如果是多个行政区域，如何循环遍历呢？</p><h5 id="多区域加载"><a href="#多区域加载" class="headerlink" title="多区域加载"></a>多区域加载</h5><p>机智的各位已经发现了,我们前面其实已经把城市名字提出来了，那么直接遍历即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行政区域加载</span></span><br><span class="line"><span class="keyword">let</span> cities = [<span class="string">'北京市'</span>,<span class="string">'郑州市'</span>,<span class="string">'西安市'</span>,<span class="string">'呼和浩特'</span>,<span class="string">'辽宁省'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _cities.length; i ++)&#123;</span><br><span class="line">    <span class="keyword">this</span>.areaBG(map, cities[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，目的完成：<br><img src="/images/posts/行政区域展示.png" alt="效果展示" title="行政区域展示"></p><h3 id="附：代码"><a href="#附：代码" class="headerlink" title="附：代码"></a>附：代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map"</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">// 加载行政区域</span></span><br><span class="line">    areaBG (map, cityName) &#123;</span><br><span class="line">        AMap.service(<span class="string">'AMap.DistrictSearch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> opts = &#123;</span><br><span class="line">                subdistrict: <span class="number">1</span>,   <span class="comment">// 返回下一级行政区</span></span><br><span class="line">                extensions: <span class="string">'all'</span>,  <span class="comment">// 返回行政区边界坐标组等具体信息</span></span><br><span class="line">                level: <span class="string">'city'</span>  <span class="comment">// 查询行政级别为市</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 实例化DistrictSearch</span></span><br><span class="line">            <span class="keyword">let</span> district = <span class="keyword">new</span> AMap.DistrictSearch(opts);</span><br><span class="line">            district.setLevel(<span class="string">'district'</span>);</span><br><span class="line">            <span class="comment">// 行政区查询</span></span><br><span class="line">            district.search(<span class="string">`<span class="subst">$&#123;cityName&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">status, result</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 获取边界信息</span></span><br><span class="line">                <span class="keyword">let</span> bounds = result.districtList[<span class="number">0</span>].boundaries;</span><br><span class="line">                <span class="keyword">let</span> polygons = [];</span><br><span class="line">                <span class="keyword">if</span> (bounds) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = bounds.length; i &lt; l; i++) &#123;</span><br><span class="line">                        <span class="comment">// 生成行政区划polygon</span></span><br><span class="line">                        <span class="keyword">let</span> polygon = <span class="keyword">new</span> AMap.Polygon(&#123;</span><br><span class="line">                            map: map,</span><br><span class="line">                            strokeWeight: <span class="number">1</span>,</span><br><span class="line">                            path: bounds[i],</span><br><span class="line">                            fillOpacity: <span class="number">0.2</span>,</span><br><span class="line">                            fillColor: <span class="string">'rgba(71,228,194,0.44)'</span>,</span><br><span class="line">                            strokeColor: <span class="string">'rgba(83,204,79,0.65)'</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                        polygons.push(polygon);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 初始化地图，并加载行政区域</span></span><br><span class="line">    mapInit () &#123;</span><br><span class="line">        <span class="keyword">let</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">"partnerMap"</span>, &#123;</span><br><span class="line">            center: [<span class="number">105.397428</span>, <span class="number">35.90923</span>],</span><br><span class="line">            mapStyle: <span class="string">"amap://styles/bfb1bb3feb0db7082367abca96b8d214"</span>, <span class="comment">// 设置地图的显示样式</span></span><br><span class="line">            zoom: <span class="number">5</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 行政区域加载</span></span><br><span class="line">        <span class="keyword">let</span> cities = [<span class="string">'北京市'</span>,<span class="string">'郑州市'</span>,<span class="string">'西安市'</span>,<span class="string">'呼和浩特'</span>,<span class="string">'辽宁省'</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _cities.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">this</span>.areaBG(map, cities[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.mapInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;此系列共分为以下几篇&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;《vue中高德地图的使用》&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;《vue中基于高德的多行政区域覆盖》&lt;/strong&gt; &lt;em&gt;（本篇）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;《vue中高德搭配echarts做数据迁徙流线图》&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;本篇效果&quot;&gt;&lt;a href=&quot;#本篇效果&quot; class=&quot;headerlink&quot; title=&quot;本篇效果&quot;&gt;&lt;/a&gt;本篇效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/posts/行政区域展示.png&quot; alt=&quot;效果展示&quot; title=&quot;行政区域展示&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="js" scheme="https://www.zhuxingmin.com/tags/js/"/>
    
      <category term="高德" scheme="https://www.zhuxingmin.com/tags/%E9%AB%98%E5%BE%B7/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用高德地图开发</title>
    <link href="https://www.zhuxingmin.com/2019/11/02/vue%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91/"/>
    <id>https://www.zhuxingmin.com/2019/11/02/vue中使用高德地图开发/</id>
    <published>2019-11-02T02:43:31.000Z</published>
    <updated>2019-11-14T01:14:52.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;最近两年比较热门的一个名次叫“数据可视化”，在前端方向大致体现为<code>地图数据展示</code>以及<code>图表类数据展示</code>。那么，如何在vue中使用基于高德地图来做地图数据可视化以及加上e Charts的图表类型数据可视化呢？接下来会分三篇文章来进行概述，最终实现下图内容：</p><p><img src="/images/posts/vue+amap+echarts示例.gif" alt="最终效果" title="最终效果"></p><a id="more"></a><p>共分为以下几篇</p><blockquote><ul><li><strong>《vue中高德地图的使用》</strong> <em>（本篇）</em></li><li>《vue中基于高德的多行政区域覆盖》</li><li>《vue中高德搭配echarts做数据迁徙流线图》</li></ul></blockquote><p>接下来，开始第一篇，实现效果如下：</p><p><img src="/images/posts/地图01.png" alt="实现效果" title="实现效果"></p><h2 id="vue中高德地图的使用"><a href="#vue中高德地图的使用" class="headerlink" title="vue中高德地图的使用"></a>vue中高德地图的使用</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ol><li>vue搭建</li><li>高德开发key值申请（<a href="链接：https://lbs.amap.com/api/yuntu/guide/create-project/permission/">链接：高德开放平台</a>），key值请放入以下需要对号入座的地方</li><li>地图样式挑选，需要申请到key值后，在高德开放平台自动移地图模板处挑选配置。此处用<code>极夜蓝</code>模板来示例，也可选择其他模板。然后发布=&gt;复制与分享=&gt;辅助出来样式ID。如：<code>bb7f5165253f57515d7ba226b2******</code>，然后放入以下需要对号入座的地方</li><li>注：第二步和第三步申请的两个值需要对应使用</li></ol><h3 id="2-地图引入项目"><a href="#2-地图引入项目" class="headerlink" title="2. 地图引入项目"></a>2. 地图引入项目</h3><h4 id="入口文件index-html引入标签"><a href="#入口文件index-html引入标签" class="headerlink" title="入口文件index.html引入标签:"></a>入口文件index.html引入标签:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=这里放入key值"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//webapi.amap.com/ui/1.0/main.js?v=1.0.11"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="vue-config-js中配置"><a href="#vue-config-js中配置" class="headerlink" title="vue.config.js中配置:"></a>vue.config.js中配置:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    configureWebpack(config) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        config.externals = &#123;</span><br><span class="line">            <span class="string">'AMap'</span>: <span class="string">'AMap'</span> <span class="comment">// 高德地图配置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用该功能的组件中引入："><a href="#使用该功能的组件中引入：" class="headerlink" title="使用该功能的组件中引入："></a>使用该功能的组件中引入：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AMap <span class="keyword">from</span> <span class="string">"AMap"</span></span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>地图初始化即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map"</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入地图组件</span></span><br><span class="line"><span class="keyword">import</span> AMap <span class="keyword">from</span> <span class="string">"AMap"</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">MapInit () &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">"map"</span>, &#123;</span><br><span class="line">        center: [<span class="number">105.397428</span>, <span class="number">35.90923</span>],</span><br><span class="line">        mapStyle: <span class="string">"amap://styles/这里放入样式ID"</span>, <span class="comment">//设置地图的显示样式</span></span><br><span class="line">        resizeEnable: <span class="literal">true</span>,</span><br><span class="line">        zoom: <span class="number">5</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到初始化的地图：<br><img src="/images/posts/地图02.png" alt="初始化地图" title="初始化地图"></p><h4 id="4-展示点"><a href="#4-展示点" class="headerlink" title="4. 展示点"></a>4. 展示点</h4><p>其实展示点在地图中叫做<code>地理编码</code>，意思是将某个点的经纬度在地图中展现出来。与之类似的，高德也提供逆地理编码服务，此处不在我们示例范围内，有兴趣的可以自行在官方API中查看。<br>接下来展示数据点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data中,location是地理编码，color 1绿2黄3红</span></span><br><span class="line">dataList: [</span><br><span class="line">    &#123; <span class="attr">location</span>: <span class="string">"113.772,22.785"</span>, <span class="attr">color</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">location</span>: <span class="string">"114.772,22.785"</span>, <span class="attr">color</span>: <span class="number">3</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">location</span>: <span class="string">"116.410778,39.897614"</span>, <span class="attr">color</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">location</span>: <span class="string">"123.499706,41.857793"</span>, <span class="attr">color</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">location</span>: <span class="string">"111.722363,40.868346"</span>, <span class="attr">color</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">location</span>: <span class="string">"103.987988,30.662124"</span>, <span class="attr">color</span>: <span class="number">3</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">"adMap"</span>, &#123;</span><br><span class="line">    center: [<span class="number">105.397428</span>, <span class="number">35.90923</span>],</span><br><span class="line">    mapStyle: <span class="string">"amap://styles/bb7f5165253f57515d7ba226b25ad7ec"</span>, <span class="comment">//设置地图的显示样式</span></span><br><span class="line">    resizeEnable: <span class="literal">true</span>,</span><br><span class="line">    zoom: <span class="number">5</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 根据color状态展示不同的图片</span></span><br><span class="line"><span class="keyword">const</span> style = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line">        url: <span class="string">"此处放一张图的url"</span>,</span><br><span class="line">        anchor: <span class="keyword">new</span> AMap.Pixel(<span class="number">5</span>, <span class="number">5</span>),   <span class="comment">// 位移</span></span><br><span class="line">        size: <span class="keyword">new</span> AMap.Size(<span class="number">10</span>, <span class="number">10</span>) <span class="comment">// 图片大小</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        url: <span class="string">"此处放另外一张图的url"</span>,</span><br><span class="line">        anchor: <span class="keyword">new</span> AMap.Pixel(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">        size: <span class="keyword">new</span> AMap.Size(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        url: <span class="string">"此处再放一张图的url"</span>,</span><br><span class="line">        anchor: <span class="keyword">new</span> AMap.Pixel(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">        size: <span class="keyword">new</span> AMap.Size(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> locationData = []; <span class="comment">//存放经纬度的数组</span></span><br><span class="line"><span class="keyword">let</span> status = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.dataList.length; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> locationArr = _this.dataList[i].location.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">// 判断需要展示的颜色类型</span></span><br><span class="line"><span class="keyword">if</span> (_this.dataList[i].dataList === <span class="number">1</span>) &#123;</span><br><span class="line">    status = <span class="number">0</span>; <span class="comment">//根据下标来相对应样式 例如：绿色对应style数组中的第0个样式</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (_this.dataList[i].color === <span class="number">2</span>) &#123;</span><br><span class="line">    status = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (_this.dataList[i].color === <span class="number">3</span>) &#123;</span><br><span class="line">    status = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">locationData.push(&#123;</span><br><span class="line">    lnglat: locationArr,</span><br><span class="line">    style: status <span class="comment">// 对应的status相对应的样式 style</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点放置</span></span><br><span class="line"><span class="keyword">let</span> mass = <span class="keyword">new</span> AMap.MassMarks(locationData, &#123;</span><br><span class="line">    opacity: <span class="number">0.8</span>,</span><br><span class="line">    zIndex: <span class="number">111</span>,</span><br><span class="line">    cursor: <span class="string">"pointer"</span>,</span><br><span class="line">    style: style</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> marker = <span class="keyword">new</span> AMap.Marker(&#123; <span class="attr">content</span>: <span class="string">" "</span>, <span class="attr">map</span>: map &#125;);</span><br><span class="line">    mass.on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    marker.setPosition(e.data.lnglat); <span class="comment">//用户相对应的经纬度</span></span><br><span class="line">    marker.setLabel(&#123; <span class="attr">content</span>: e.data.name &#125;); <span class="comment">//用户相对应的名字</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mass.setMap(map);</span><br></pre></td></tr></table></figure><h4 id="5-完成，启动"><a href="#5-完成，启动" class="headerlink" title="5. 完成，启动"></a>5. 完成，启动</h4><p><code>npm run serve</code>启动，查看该示例，得到应有效果：</p><p><img src="/images/posts/地图01.png" alt="实现效果" title="实现效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近两年比较热门的一个名次叫“数据可视化”，在前端方向大致体现为&lt;code&gt;地图数据展示&lt;/code&gt;以及&lt;code&gt;图表类数据展示&lt;/code&gt;。那么，如何在vue中使用基于高德地图来做地图数据可视化以及加上e Charts的图表类型数据可视化呢？接下来会分三篇文章来进行概述，最终实现下图内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/vue+amap+echarts示例.gif&quot; alt=&quot;最终效果&quot; title=&quot;最终效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端笔记" scheme="https://www.zhuxingmin.com/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.zhuxingmin.com/tags/vue/"/>
    
      <category term="高德地图" scheme="https://www.zhuxingmin.com/tags/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
</feed>

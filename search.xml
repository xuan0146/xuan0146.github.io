<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue项目搭建及基本配置]]></title>
    <url>%2F2019%2F03%2F27%2Fvue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言注：适用于windows系统本文讲述要点： vue-cli项目搭建基本环境配置； 常用插件描述及分享； 项目运行、调试及打包； 项目配置及优化； 适用人群： vue小白； 有html\css\js编程基础； vue项目整体优化（打包后压缩空间）； 一、准备阶段准备阶段会将项目环境配置完毕,包含node、npm、webpack和vue-cli。已经完成的小伙伴可以跳过此步骤看第二阶段。 1.安装node及npm&emsp;&emsp;从node.js中文网下载并安装nodejs点击下载.msi的32/64位安装包，然后双击本地文件一路点击下一步完成nodeJs的安装即可。注意安装8.10以上版本哟!安装完成后，打开命令行工具，输入node -v，如下：12E:\&gt;node -vv8.12.0 //版本号 顺便在此处继续输入npm -v12E:\&gt;npm -v6.4.1 //版本号 你会惊讶的发现npm已经神奇的安装完成了。这是因为npm在安装nodeJs的时候顺带已经装好了。 2.安装webpack注：以下所有npm操作，由于国内速度较慢甚至出现失败，可用淘宝镜像cnpm替代。下列所有npm命令，用cnpm替代即可。方式如下：1npm install -g cnpm --registry=https://registry.npm.taobao.org &emsp;&emsp;继续刚才的命令行工具，输入npm install webpack -g，-g代表全局安装。安装完成后继续输入webpack -v，出现相应版本号，代表安装成功。我在安装时出现如下状况：12345One CLI for webpack must be installed. These are recommended choices, delivered as separate packages: - webpack-cli (https://github.com/webpack/webpack-cli) The original webpack full-featured CLI.We will use &quot;npm&quot; to install the CLI via &quot;npm install -D&quot;.Do you want to install &apos;webpack-cli&apos; (yes/no): 解决方案是：输入npm install webpack-cli -g。安装成功后执行webpack -v查看版本号，如下：12345678910E:\&gt;npm install webpack-cli -g** 安* 装 省* 过 略* 程*E:\&gt;webpack -v4.29.6 //版本号 3.安装vue脚手架vue-cli&emsp;&emsp;继续上面的命令行工具。接下来就是安装配置今天的主角了，vue脚手架工具vue-cli。方法一样，键入命令行npm install vue-cli -g全局安装，然后输入vue -V注：是大写的-V检测是否安装成功。如下：12E:\&gt;vue -V2.9.6 //版本号 4.小结&emsp;&emsp;至此，我们已经完成了准备阶段的工作。主要完成的是node、npm、webpack和vue-cli四个工具的环境配置。目前为止，我们在命令行工具的总结应该是如下：版本号不必一致1234567891011E:\&gt;node -vv8.12.0E:\&gt;npm -v6.4.1E:\&gt;webpack -v4.29.6E:\&gt;vue -V2.9.6 二、项目搭建本阶段讲述vue-cli项目搭建及相关配置，包含创建项目、修改基础配置、项目运行三个模块，可自行选择阅读或跳过。 1.项目创建&emsp;&emsp;建立一个空文件夹，最好以纯英文命名。例，我项目路径为E&gt;stydy。打开命令行工具，cd到该文件目录下，执行vue init webpack name，name可替换为你要创建的项目名。回车之后，会要求输入一系列的信息，大部分可直接回车略过，注释如下，没有注释的回车略过即可：1234567891011121314E:\stydy&gt;vue init webpack blog? Project name blog //项目名? Project description A Vue.js project //项目简介? Author xuan0146 &lt;zxm0146@163.com&gt; //作者? Vue build runtime? Install vue-router? Yes //使用项目路由? Use ESLint to lint your code? No //不开启ESLint语法检测 注意选No? Set up unit tests Yes? Pick a test runner jest? Setup e2e tests with Nightwatch? Yes? Should we run `npm install` for you after the project has been created? (recommended) npm vue-cli · Generated &quot;blog&quot;. 最后一步选择npm或者yarn则会自动执行npm install安装项目所有依赖包。不选择的话，自己安装也是同样效果。安装步骤为： cd到项目路径； 执行npm install； 等待完成安装即可; 2.项目介绍&emsp;&emsp;cd到该项目，或者打开文件夹，项目目录及备注如下：1234567891011121314151617181920212223242526272829303132├── project //项目目录│ ├── build //webpack相关配置│ │ ├── build.js //生产环境构建│ │ ├── check-versions.js //版本检查│ │ ├── utils.js //构建相关工具│ │ ├── vue-loader.conf.js //处理vue文件的配置信息│ │ ├── webpack.base.conf.js //webpack基础配置│ │ ├── webpack.dev.conf.js //webpack开发环境配置│ │ ├── webpack.prod.conf.js //webpack生产环境配置│ ├── config //vue基本配置│ │ ├── dev.env.js //开发环境配置│ │ ├── index.js //主要配置│ │ ├── prod.env.js //生产环境配置│ │ ├── test.env.js //测试环境配置│ ├── node_modules //依赖包 忽略│ ├── src //项目核心文件│ │ ├── assets //静态资源 如公用js\css\image\媒体资源等│ │ ├── components //公用组件│ │ ├── router //项目路由│ │ │ ├── index.js //路由控制文件│ │ ├── App.vue //根组件│ │ ├── main.js //入口文件│ ├── static //静态资源│ ├── test //模拟测试│ ├── .babelrc //babel参数│ ├── .editorconfig //代码格式│ ├── .gitignore //git上传相关配置│ ├── .postcssrc.js //css相关工具│ ├── index.html //主页│ ├── package-lock.json //记录当前状态下实际安装的各个npm package的具体来源和版本号│ ├── package.json //项目信息│ ├── README.md //项目说明 3.启动项目&emsp;&emsp;命令行工具键入npm run dev，等待片刻，直到提示如下，则表示启动成功：1234567E:\stydy\blog&gt;npm run dev* * * * * * * ** 启动过程忽略 ** * * * * * * *Your application is running here: http://localhost:8080 然后复制http://localhost:8080，在浏览器地址栏输入该url，进入如下页面： 4.移动端调试&emsp;&emsp;有的人可能要问了，如果我做移动端项目，不能用localhost去访问了吧？当然不能，只需要稍微改一下配置即可。当然，端口号8080一样可以修改，不过一般不做变动。&emsp;&emsp;用代码工具（自己习惯的IDE）打开本项目。首先查看本机电脑ip,键入命令ipconfig，查看如下：1234567891011E:\stydy\blog&gt;ipconfig* ** *以太网适配器 以太网: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::da7:800d:d148:e06%10 IPv4 地址 . . . . . . . . . . . . : 192.168.200.127 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : fe80::48:5112:9520:564f%10 192.168.200.1 &emsp;&emsp;其中，IPv4 地址即为我们所需要的ip。在项目/config/index.js中，找到host: &#39;localhost&#39;，改成IPv4 地址，例:我的地址为192.168.200.127:123456module.exports = &#123; dev: &#123; host: &apos;192.168.200.127&apos;, //localhost改为ip port: 8080, //端口号 &#125;&#125; &emsp;&emsp;然后，我们重新启动项目。注意上次项目启动后，由于修改了配置文件，因此需要停止项目然后重新启动。停止项目的命令为Ctrl + C。重启项目后，如下：12345E:\stydy\blog&gt;npm run dev* * * * * * * ** 启 动 过 程 ** * * * * * * *Your application is running here: http://192.168.200.127:8080 &emsp;&emsp;注意要在同一网络下&emsp;&emsp;最后，我们复制该地址，即可在所有端PC、手机、pad等查看该项目啦~ 三、常用插件本章节记录一些vue常用插件，如axios、echarts、sass/scss、lib-flexible、layer等等。所有命令均可用cnpm替代。如不需要可直接跳过。 1.sacc/scss用途：可用sass/scss进行css书写代码。命令行工具依次键入如下命令：12npm install node-sass --save-devnpm install sass-loader --save-dev 安装完成后，.vue里的style里添加lang=&quot;scss&quot;来指定语言，即可用sass/scss编写css代码。如下：123&lt;style lang=&quot;scss&quot; scoped&gt;...&lt;/style&gt; 2.axios用途：平时前后端交互使用Ajax，在vue官方，给出vue-resource和axios的作为ajax的替代。在此处使用vue官方推荐首选的axios作为案例讲述。 安装 1npm install axios 全局引入在项目/src/main.js中引入如下代码，然后随意走个请求，发现……报错？并且在页面F12控制台Newwork&gt;Headers里面发现数据并没有Form Data形式提交，如何处理呢？见下一步解决。 1import axios from &apos;axios&apos; 解决数据格式问题 1234567891011121314151617181920212223242526272829//完整请求代码 post为例this.$axios.post(&apos;url&apos;, &#123; //路径 key1: &apos;value&apos;, //参数 key2: &apos;value&apos; //参数&#125;, /* ** 添加如下代码* * * * * * start * * * * * &#123; transformRequest: [function (data) &#123; let ret = &apos;&apos;; for (let it in data) &#123; ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos;; &#125; return ret &#125; ], headers: &#123; &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; &#125;&#125;/* * * * * * end * * * * *).then((response) =&gt; &#123; //返回数据 console.log(response)&#125;).catch((error) =&gt; &#123; //请求异常捕捉 console.log(error)&#125;) 3.axios解决方案&emsp;&emsp;另外一个axios数据格式问题的解决方案。 重磅推荐★★★★★此方案不仅解决数据格式问题，还顺便解决了跨域问题。第一步当然还是安装axios，同上一步。然后，安装qs，命令行工具键入npm install qs --save-dev。然后在项目/src/main.js中配置如下：12345import axios from &apos;axios&apos;import qs from &apos;qs&apos; Vue.prototype.$axios = axios;Vue.prototype.$qs = qs; 然后在项目/config/index.js中，找到proxyTable，配置及说明如下：12345678910proxyTable: &#123; &apos;/api&apos;: &#123; //设置url公用部分 target: &apos;http://192.168.1.100:8080/&apos;, changeOrigin: true, // 如果接口跨域，需要进行这个参数配置 pathRewrite: &#123; &apos;^/api&apos;: &apos;&apos; //这里理解成用‘/api’代替target里面的地址 &#125; &#125;&#125;, 配置完成之后，在.vue文件中，请求用例如下：12345678910//参数let params = this.$qs.stringify(&#123; key: value&#125;);//请求this.$axios.post(&apos;/api/test&apos;, params).then((response) =&gt; &#123; console.log(response);&#125;).catch((error) =&gt; &#123; console.log(error);&#125;) 最后，键入命令npm run dev，发现请求数据格式已经成为Form Data的格式，并且及时后端不处理跨域问题，也依然正常可用。原因是proxy作为中间层，先将数据请求回本地，此过程是中间层node请求后台，不存在跨域。然后请求过来的数据放在本地，前端再去请求这个数据，就可以解决跨域问题了。 未完待续…]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《面纱》随笔]]></title>
    <url>%2F2019%2F03%2F25%2F%E3%80%8A%E9%9D%A2%E7%BA%B1%E3%80%8B%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[简介面纱 （英国毛姆创作长篇小说） &emsp;&emsp;《面纱》是英国作家威廉·萨默塞特·毛姆创作的一部长篇小说，首次出版于1925年。&emsp;&emsp;小说的故事发生在英国的殖民地香港和中国内陆一个叫“湄潭府”的地方。女主人公凯蒂·费恩因为和香港助理布政司查理通奸，被丈夫瓦尔特（香港政府的细菌学家）发现后胁迫她去了霍乱横行的湄潭府，最终瓦尔特不幸染病死去，凯蒂回到香港，重投查理怀抱后羞愧不已，最终回到英国和父亲和解，并和父亲同往巴哈马群岛生活。&emsp;&emsp;从《面纱》一书中，读者能看到一个表面漠然中立的叙事者背后的模糊性和矛盾性：作为帝国叙事的一分子，作者的面纱之下隐藏着东方主义的政治文化观；作为一个关注人性的个体作家，他的面纱之下隐藏着他对爱的怀疑和渴求、对人性的嘲讽和宽容。 内容&emsp;&emsp;女主人公凯蒂是生活于伦敦名利场的一位富家小姐，她容貌娇美，但精神空虚；她向往爱情，但爱慕虚荣；她待字闺中，但处处受到母亲的责备与“逼婚”。面对这种种“危机”，她决定给自己的爱情来一次“历险”：匆匆嫁给了性格孤僻、沉默寡言但却深爱着她的医生瓦尔特，并随其来到了英国的殖民地——香港。冲动的历险为其婚后的出轨埋下了伏笔。婚前，凯蒂对幸福美满的生活充满了憧憬，但丈夫的刻板严肃、疯狂工作和乏味无趣，使她顿觉寂寞、孤独和失落，不久就被花言巧语、生性多情的有妇之夫查理·唐森俘获，坠入婚外情而迷失自我。奸情败露之后，丈夫的疯狂报复、情人的无情冷落和自己的无限悔恨使凯蒂再次陷入了人生的危机。无望的她决心再次历险：陪丈夫奔赴霍乱肆虐的偏远山村——湄潭府。&emsp;&emsp;在湄潭府，凯蒂经历了绝境下的自省，看清了查理的虚伪，体验了修女的博爱、无私以及对信仰的坚定，得到了宗教与道德的救赎，亲历了丈夫的死亡，彻悟了他的博爱与爱情的狭隘，遭遇了与查理的欲火复燃，经历了对情感本能、人性污点的幡然醒悟，坚定了追寻自我的意志和决心，最后她毅然踏上回家的路，重新开始了一段崭新的人生。 随笔由于看的是译本，不是原本，所以对语言的优美和辞藻的华丽与否暂不做赏析。&emsp;&emsp;《面纱》作者毛姆被很多评论家评论为“二流作家”，原因无他，创新性、逻辑性及技巧性不足够高。艺术来源于生活又高于生活，这部《面纱》我不知道能否到达“艺术”之境界，不知道是否升华于生活，但是它一定是贴切生活，深入到生活中去的。小说中所描述出的爱、责任、被判、救赎与觉醒深入人心，也编织成了全篇小说的脉络。&emsp;&emsp;故事从爱与责任讲起。女主凯蒂从小缺乏疼爱，母亲势力且强势，害怕26岁的自己变成老处女。男主瓦尔特不善言辞、沉默寡言，是一个缺乏生活趣味的细菌学家。从社交舞会上与女主相识，追到手后匆匆结婚。一次偶然发现了奉若上宾的妻子却与他人（沃丁顿）有染，随后给妻子凯蒂两个选择，要么离婚要么陪同自己到湄潭府瘟疫区，这个地方可以说九死一生。随后二人到香港霍乱区开始“新”生活。男主在湄潭府疯狂工作，尝试用工作去洗刷与妻子情感的污垢，而妻子凯蒂则终日彷徨，浑浑噩噩，直到那一天，走进了教堂。&emsp;&emsp;走进教堂的那一天，是自我救赎的开始。以前，自己容貌娇美，但精神空虚；向往爱情，但爱慕虚荣；待字闺中，却被“逼婚”…种种因果，造成了当下不可逆转之局势后，直到这天，在教堂帮忙了一天，蓦然回首，才开始自省。之后便成了教堂的常客，甚至工作于此。在这里，凯蒂体验了修女的博爱、无私以及对信仰的坚定，甚至后来得知丈夫对于霍乱区的贡献，以及丈夫染上霍乱也未曾停歇，直至生命的尽头，理解了丈夫瓦尔特的博爱以及对爱情的不圆满，甚至狭隘。在此过程中，女主凯蒂内心逐渐完成自我救赎，看到光亮，理解生活的意义。在男主病逝后，女主凯蒂回到香港（当时香港是英国殖民地），随后又遇到了查理。在欲火复燃之后，沃丁顿妻子出现。沃丁顿妻子是一位满洲格格，外貌特征符合西方对东方宫廷女性的想象与审美。与她见面却没有直接的言语对白，只有“心理交流”，但是却让自己感受到了这位格格身上所代表的的灿烂文明。与此同时，自己算是经历了一场领悟，坚定了追寻自我的意志和决心。最后毅然踏上回家的路，与父亲和好，走向新的人生。 关于爱与责任&emsp;&emsp;对于男主瓦尔特来讲，从原文我知道你愚蠢、轻佻、头脑空虚，然而我爱你。我知道你的企图、你的理想，你势力、庸俗，然后我爱你。我知道你是个二流货色，然而我爱你。开始，已是深情告白，而女主凯蒂却不为所动。对于沃尔特来说，自己的伤悲只有自己可以理解，非常单纯的爱。即使发现妻子不忠，开始唇枪舌战，也依然保持镇定姿态和绅士风度。也同样由于爱之深所以恨之切，从而走向报复道路，去到霍乱区。&emsp;&emsp;瓦尔特却一直深爱凯蒂不肯放手，沃丁顿深爱满洲格格（他的妻子），唐森深爱自己妻子，修道院姐们们走在前线与病魔抗争，一系列的周边情感感染着凯蒂，渐渐地凯蒂也有了希望和勇气，学会慈悲与爱，放下心魔。 关于人格觉醒&emsp;&emsp;某乎上有话题：为什么永远不要去考验人性？而其中高票回答：因为大多数时候，人是选择做一个好人，而不是本性如此。小说中女主从最开始的人格为精神空虚、爱慕虚荣，此后与男主结婚后，依然是处于精神空虚状态，因而让得第三者沃尔顿有机可乘。东窗事发之后，由于沃尔顿的劝告甚至不想卷入其中，导致精神萎靡不振、浑浑噩噩。去到霍乱区之后，更加严重。到修道院开始，内心仿佛有了些许光亮。进而经常去修道院帮忙之后，从修女姐妹们的日常生活中得到救赎，找到了一些生活的意义以及开始忠于内心。神秘的面纱一角被掀开之后，开始审视自己，自我救赎，最终完成内心的升华。 作品评价&emsp;&emsp;贴切生活，以故事的尖锐以及矛盾来铺垫人物的内心世界，加上道德冲突、人性考验，不矢为一部杰作。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三种境界]]></title>
    <url>%2F2019%2F03%2F24%2F%E4%B8%89%E7%A7%8D%E5%A2%83%E7%95%8C%2F</url>
    <content type="text"><![CDATA[前言古今之成大事业、大学问者，罔不经过三种之境界。 三种境界123昨夜西风凋碧树。独上高楼，望尽天涯路。衣带渐宽终不悔，为伊消得人憔悴。众里寻他千百度，回头蓦见，那人正在灯火阑珊处。 原文 &emsp;&emsp;古今之成大事业、大学问者，罔不经过三种之境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”此第一境界也。“衣带渐宽终不悔，为伊消得人憔悴。”此第二境界也。“众里寻他千百度，回头蓦见（当作‘蓦然回首’），那人正（当作‘却’）在灯火阑珊处。”此第三境界也。此等非大词人不能道。然遽依此意解释诸词，恐为晏、欧诸公所不许也。 译文&emsp;&emsp;古今那些成就大事业、大学问的人，都必然经历三种境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”这是第一层境界。“衣带渐宽终不悔，为伊消得人憔悴。”这是第二层境界。“众里寻他千百度，回头蓦见，那人正在灯火阑珊处。”这是第三种境界。像这样的语言，只有大词人才讲得出来。但是，我竟然这样来解释上面的词，恐怕晏殊、欧阳修这些大词人是不会同意的吧。 赏析&emsp;&emsp;《人间词话》赖以成名的数段话中，这一段毫无疑问占据了一个重要位置。这段话比喻贴切，佳句宛如浑然天成般镶嵌其中，让人称绝。王老先生正是“成大学问者”，说的这些话也正是他的切身感触。&emsp;&emsp;昨夜西风凋碧树。独上高楼，望尽天涯路。第一境界即入门前茫无头绪、求索无门的疑惑与痛苦。王国维最得意的学问在于史学、古文学和美学。这几门学问千头万绪，典籍浩如烟海，那种想要入门之前的彷徨、痛苦与渴求，用独上高楼，望尽天涯路来比喻，实在是再贴切不过。&emsp;&emsp;衣带渐宽终不悔，为伊消得人憔悴。第二境界是叩门时以苦做舟、以勤为径、上下求索的执着于忍耐。古往今来的大师无不经历过此阶段。不执着，无以成。既已入门，注定将为心中的伊人把此生消磨。王国维在乱世之中，一心治学，那种执着、悲愤、孤苦的心境，恐怕不是现代人所能理解的。唯有这种执着于隐忍，才成就了他在近代史上第一无二的大师地位。&emsp;&emsp;众里寻他千百度，回头蓦见，那人正在灯火阑珊处。第三境界则是功夫到处，灵犀一点、参透真谛、已入门中的喜悦与释然。以勤为径，很多人都如此，但是要攀上顶峰，就不是一般人能做到了。那种灵犀一点参透真谛的大智慧、大喜悦，也只有古今中外各个领域中的天才们感悟得到。这种顿悟就好比掉在牛顿身边的那个苹果，释迦牟尼眼前的那颗菩提，一切的一切忽然间都豁然开朗，往西追寻之中的种种艰辛苦楚，在这一瞬间都得到了完美补偿。&emsp;&emsp;当然，这些都不可能是词作者的愿意，所以王国维接着又说：此等非大词人不能道。然遽依此意解释诸词，恐为晏、欧诸公所不许也。这段话鞭辟入里，贴切浑融，其深致款曲已经不止于词话的范围了，即使晏、欧诸公在世，香叶不容置喙，不得不叹服王氏的才情与睿智吧。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js监测页面滑至底部响应事件]]></title>
    <url>%2F2019%2F03%2F18%2Fjs%E7%9B%91%E6%B5%8B%E9%A1%B5%E9%9D%A2%E6%BB%91%E8%87%B3%E5%BA%95%E9%83%A8%E5%93%8D%E5%BA%94%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[需求&emsp;&emsp;页面滑动至底部时候，触发响应 应用场景 服务协议滑动完毕可点击同意按钮; 页面滑至底部加载更多(新闻、列表等); 自动加载下一页等… 分析&emsp;&emsp;首先，既然是监听，则首要条件便是监听页面滑动(滚动)事件；其次，由于一般页面不会一屏展示完，因此需要依赖BOM来辅助完成一些计算。最后，达到某种条件，触发方法。 代码12345678910111213 window.onscroll = function()&#123; //滚动条滚动时，距离顶部的距离 let scrollTop = document.documentElement.scrollTop||document.body.scrollTop; //可视区的高度 let windowHeight = document.documentElement.clientHeight || document.body.clientHeight; //滚动条的总高度 let scrollHeight = document.documentElement.scrollHeight||document.body.scrollHeight; //滚动条到底部的条件 if(scrollTop + windowHeight &gt;= scrollHeight)&#123; //此处触发响应事件 ... &#125;&#125; 附录12345678910111213网页可见区域宽：document.body.clientWidth网页可见区域高：document.body.clientHeight网页可见区域宽：document.body.offsetWidth (包括边线的宽)网页可见区域高：document.body.offsetHeight (包括边线的高)网页正文全文宽：document.body.scrollWidth网页正文全文高：document.body.scrollHeight网页被卷去的高：document.body.scrollTop网页被卷去的左：document.body.scrollLeft//对应的dom元素的宽高有以下几个常用的：元素的实际高度：document.getElementById(&quot;div&quot;).offsetHeight元素的实际宽度：document.getElementById(&quot;div&quot;).offsetWidth元素的实际距离左边界的距离：document.getElementById(&quot;div&quot;).offsetLeft元素的实际距离上边界的距离：document.getElementById(&quot;div&quot;).offsetTop]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《惊奇队长》随笔]]></title>
    <url>%2F2019%2F03%2F10%2F%E3%80%8A%E6%83%8A%E5%A5%87%E9%98%9F%E9%95%BF%E3%80%8B%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[简介 &emsp;&emsp;卡罗尔·丹弗斯（布丽·拉尔森饰）是克里人的精英部队一员，但她挣扎着回忆过去，对于怎么获得超能力、以及之前的人生等超能力之前的人生，她只在梦中有片段不成章的记忆，这层困扰引起的情绪波动也进而影响她对超能力的掌控。所幸，在星际战队指挥官（裘德·洛饰）的调教之下，卡罗尔·丹弗斯学会如何控制自己的超能力。&emsp;&emsp;一次外星任务中，卡罗尔·丹弗斯因故来到了地球，并遇到还是低阶探员的尼克·弗瑞（塞缪尔·杰克逊饰），卡罗尔·丹弗斯与尼克·弗瑞一起追捕在地球惹事的变形人塔罗斯（本·门德尔森饰），同时，也发现自己如何获得超能力。 起&emsp;&emsp;时间回到前天(2019年3月8日18:00:00)。这是不寻常的一天，不仅仅是女神节，更是跟基友约好看惊奇队长首映的日子。&emsp;&emsp;下午6点，准备下班。但是作为猿，按时下班显然不是我们的风格，于是噼里啪啦一顿操作又改了个产品刚提出的优化，并且自测完毕。ok，天儿也不早了，赶紧挤地铁回家准备观影去吧。没想到的是，为了一场电影，会有一场场刺激等待着我们。 Then&emsp;&emsp;19:35，超市购物了一波回到家，小憩了一下下，喝点酸奶补补体力。&emsp;&emsp;20:35，嘀嘀了一辆优享专车，下楼跟基友等车。&emsp;&emsp;上车。&emsp;&emsp;堵车。&emsp;&emsp;司机人很nice，一个看起来有修养的大龄先生。&emsp;&emsp;两分钟后，我们在后排毫无感觉，司机下了车，前面司机也下了车。&emsp;&emsp;嗯，追尾。&emsp;&emsp;ok,下车，换车。&emsp;&emsp;重新嘀嘀。&emsp;&emsp;“耐心”等待中…&emsp;&emsp;上车。&emsp;&emsp;驾驶过堵车区，一路飞……额，红灯。&emsp;&emsp;“铃铃铃铃铃铃”电话响起来~&emsp;&emsp;“…………”&emsp;&emsp;基友：“完了，一个需求忘记处理”&emsp;&emsp;“……看急不急，不急了明天上午公司处理”&emsp;&emsp;下车。&emsp;&emsp;取票。&emsp;&emsp;21:03，等待进场。&emsp;&emsp;21:05，开始检票。&emsp;&emsp;21:06,，“不行，我得回去先处理需求去了……”。&emsp;&emsp;于是，检票只检了一张，有了下图： So&emsp;&emsp;被迫一个人看完了整场。 随笔关于剧情&emsp;&emsp;一向的漫威思维，并且在女神节这么个档期，祭出目前最强大的主角英雄，且为女英雄，应景至极。前半篇在不停的铺垫，以及给出一些断断续续的女主回忆。从女主发现自己被骗之后，一系列举动将剧情推向高潮。&emsp;&emsp;故事发生于上世纪90年代，在此之时，复仇者联盟尚未建立。居中也道出了神盾局局长独眼的原因以及建立复仇者联盟的初心。&emsp;&emsp;斯克鲁人怕猫，检测猫为“噬元兽”，克里人怕尬舞。然而关键时刻，猫吞噬“魔方”，吞噬“敌军”，真的救了神盾局长。 关于彩蛋&emsp;&emsp;很多评论说，又是“看彩蛋送电影”，第一个彩蛋比正片好看。确实，在漫威宇宙中，自打复联出来之后，新出的超级英雄好像都与复联有着密不可分的联系，甚至都是为了复联去添砖加瓦。但是在多方面关于复联四的猜测中，惊奇队长却是救世中不可或缺且极为重要的一环。如果只是粗略的一笔带过，进而在复联四中直接使用其几乎藐视现阶段复联所有人所有技能的特殊能力，那在复联四中将会显得极为仓促且莫名其妙。因此，此英雄作为一部新的超级英雄，极有必要对齐以及复联历史进行一些必要的补充，以及填坑。 关于斯坦●李&emsp;&emsp;老爷子去年过世，与东方的金庸大侠先后将生命挪出了时间。至此，东方再无江湖，漫威再无宇宙。&emsp;&emsp;剧中老爷子作为路人，在公交车上看书，与惊奇队长偶遇。上一次同样是在公交车看书，遇到了奇异博士。&emsp;&emsp;所以是不是为我们敲响警钟，多出门，多读书，不要总在家里宅着，说不定也能偶遇超级英雄呢。 猜测&emsp;&emsp;《蚁人2》片尾彩蛋中，蚁人进入量子域，在入口处，小女友及其父母随着灭霸的响指化为了灰烬，因此是否在复联四中也会贡献在即的一份力量呢？ 等待ing复联四…]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读书笔记</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js/vue输入联想功能]]></title>
    <url>%2F2019%2F03%2F04%2Fjs-vue%E8%BE%93%E5%85%A5%E8%81%94%E6%83%B3%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[实现功能如下 介绍&emsp;&emsp;最近需求要有一个输入框模糊搜索功能，且需要匹配输入字符联想。从网上看了一些demo，总结出来一套思路，配合vue将其开发并稍做优化处理。 思路基础： 1.一个输入框（输入字符）、一个ul框（展示匹配数据） 2.将输入字符与列表中字符比对 3.新建空数组，将比对结果匹配项放入此数组中 4.将数组数据铺到ul中 优化： 5.鼠标滑入某一项变更背景色 6.点击选中数据展示到input框中 7.键盘上下键控制上一个下一个 8.回车键将选中项目展示到input框中 代码1.HTML1234567891011121314151617//input框 &lt;input type=&quot;text&quot; @keydown.down=&quot;changeDown&quot; //键盘事件 @keydown.up=&quot;changeUp&quot; v-model=&quot;searchVal&quot; //绑定输入的值 @keyup=&quot;searchFn&quot; @keyup.enter=&quot;enter&quot; //回车将选中项目展示到input框中 placeholder=&quot;input name&quot;/&gt; //选项框 判断如果新数组中有值则显示本备选框&lt;ul class=&quot;ulAdd&quot; v-if=&quot;searchResult&quot;&gt; &lt;li v-for=&quot;(item, index) in searchResult&quot; :class=&quot;&#123;bgColor: index === now&#125;&quot; //渲染样式 @click=&quot;alertFn&quot; //点击将选中项目展示到input框中 @mouseenter=&quot;mouseEnter(index)&quot; //渲染鼠标移入/移出样式 @mouseleave=&quot;mouseleave&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;&lt;/ul&gt; 2.数据12345678searchVal: &apos;&apos;, //绑定namesearchResult: [], //匹配结果now: -1, //索引nameList: [ //name列表 &#123;name: &apos;张三&apos;,id: &apos;9001&apos;&#125;, &#123;name: &apos;张四&apos;,id: &apos;9002&apos;&#125;, &#123;name: &apos;李三&apos;,id: &apos;9003&apos;&#125;] 3.事件处理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//过滤searchFn (e) &#123; let val = e.target.value; //输入的值 this.searchResult = []; //清空存结果的数组 if (val) &#123; this.nameList.forEach(function(item) &#123; let pattern = new RegExp(&apos;&apos;+val, &apos;g&apos;); //正则校验 if (pattern.test(item.name)) &#123; this.searchResult.push(&#123;name: item.name,id: item.id&#125;); &#125; &#125;.bind(this)); // 绑定当前实例对象 &#125;&#125;//将选中项目展示到input框中alertFn () &#123; this.searchVal = this.searchResult[this.now].agentname; this.searchResult = [];&#125;,//按键盘↓键changeDown () &#123; this.now ++; if(this.now == this.searchResult.length) &#123; this.now = -1; &#125;&#125;,//按键盘↑键changeUp () &#123; this.now --; if (this.now === -2) &#123; this.now = this.searchResult.length; &#125;&#125;,//回车将选中项目展示到input框中enter () &#123; this.searchVal = this.searchResult[this.now].agentname; this.searchResult = [];&#125;,//清空结果deleteList () &#123; this.searchResult = [];&#125;,//鼠标移入mouseEnter (index) &#123; this.now = index;&#125;,//鼠标移出mouseleave (index) &#123; this.now = -1;&#125; 注&emsp;&emsp;样式自定义即可。 总结功能实现，且完成了一定的优化，但存在一定的不足： 数组循环可用新语法； 多个方法可合并； 可以进一步优化，做出输入字母也同样联想。]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>js</tag>
        <tag>输入框联想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue项目打包后资源路径与背景图路径问题]]></title>
    <url>%2F2019%2F02%2F28%2Fvue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%90%8E%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言本文主要解决基于vue/vuex打包后经常出现的两个问题： 静态资源路径错位问题 css背景图路径错位问题 问题的出现&emsp;&emsp;一般通过vue-cli脚手架开发的时候，开发模式使用npm run dev进行开发，一切配置正常。但是当打包后会出现各种问题，其中两个最为常见且致命的问题莫过于上述的两个资源路径错位问题，但是当我们分析后，发现依旧是配置问题。尤其是当好多猿把assetsPublicPath: &#39;/&#39;的&#39;/&#39;改为&#39;./&#39;后，一般的资源路径包括css、js、图片音视频等都能校正，然而唯独css设置的背景图却全部失效。接下来请看此bug图。 bug图：1. 资源路径4042. 背景图路径404可以看到背景图的路径错且重复。 解决方案1. 静态资源路径错位问题解决方案：在项目/config/index.js中找到module.exports中的build，其中的assetsPublicPath项改为：1assetsPublicPath: &apos;./&apos;, //解决静态资源路径错位问题 2. css背景图路径错位问题解决方案：在项目/build/utils.js中找到ExtractTextPlugin.extract，追加publicPath: &#39;../../&#39;：代码片段为：12345return ExtractTextPlugin.extract(&#123; use: loaders, fallback: &apos;vue-style-loader&apos;, publicPath: &apos;../../&apos; //解决css背景图路径错位问题 &#125;) 测试结果：ok，配置完毕，打包测试下~npm run build 倒数10个数：10,9,8,7,6…控制台空空如也~完美！]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[to 2019]]></title>
    <url>%2F2019%2F02%2F25%2Fto-2019%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;2019悄然来袭，且2月将逝。值此春天即醒之际，万物复苏之时，应对2018正式告别，并在充满期待的2019之中完成一些目标来积累沉淀自己。 规划规划大致分为以下四（+1）个大方面： 学习 工作 生活 财务 其他 （愿世界和平） 其详细信息将通过X-Mind作导图式的png图片展示，如下： 规则 完成后做“√”标记； 定期更新：月更，更新文本及感受类图文；季更，更新图片及日期； 不定期更新： 完成后更新； 更新准则：上传新图，标明日期； 训练自律;随心所欲的日子里，大部分时候都怅然若失。 更新0226完成 可乐鸡翅，招待朋友songleitravel,于2019.02.16完成； 建站，GitHub+Hexo+nexT，于2019.02.20完成； 发表博文，包括读书随笔与技术随笔； 总结&emsp;&emsp;本月前期学习阮一峰老师的《ES6》，后期项目压力上来，暂搁一旁。这种行为不可取，在此反思。另，本季度读书及笔记均会在本站博客中体现，已完成《小狗钱钱1》随想。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue中axios跨域问题]]></title>
    <url>%2F2019%2F02%2F24%2Fvue%E4%B8%ADaxios%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言兴冲冲的开始用vue封装组件、自定义指令之后，开始实战。诶，等等，貌似少了……交互？大致研究了一下axios，但是存在以下两个问题： 跨域问题 数据格式问题跨域信息示例：1234Failed to load http://localhost:8080/login:Response to preflight request doesn&apos;t pass access control check:No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:8080&apos; is therefore not allowed access. 所以针对该问题给出一套解决方案（以post请求为例）： 1.跨域处理cinfig/index.js中对proxyTable做如下配置：123456789proxyTable: &#123; &apos;/api&apos;: &#123; target: &apos;https://0.0.0.0:8080/login&apos;, //设置url公用部分，记得加http/https和端口号 changeOrigin: true, pathRewrite: &#123; &apos;^/api&apos;: &apos;/&apos; //这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用&apos;http://40.00.100.100:3002/user/add&apos;，直接写‘/api/user/add’即可 &#125; &#125; &#125;, main.js中引入axios并作为Vue属性使用123import axios from &apos;axios&apos;Vue.prototype.HOST = &apos;/api&apos; 在调取数据组件中，axios配置如下（可以自行封装）：12345678910111213141516getData () &#123; this.$axios(&#123; method: &apos;post&apos;, //请求方式 一般为get\post 此处以post为例 url: this.HOST + &apos;/login&apos;, //url data: &#123; //数据 loginId: &apos;123456&apos;, password: &apos;123456&apos; &#125;, &#125;).then(function (res) &#123; console.log(res); debugger; &#125;.bind(this)).catch(function (err) &#123; //bind 绑定当前作用域 console.log(err); debugger; &#125;) &#125; ok，保存，然后npm run dev咦？发生了什么？没跨域啊？数据发过去了啊？为什么服务器给我抛异常==、12345&#123; code:100, data: &#123;&#125;, msg: &quot;服务器异常&quot; &#125; 检查发现错误原因：数据发送时没有走formdata，接下来处理该问题。 2.数据格式修正formdata形式提交数据处理方法则是在刚才配置的getData()中的this.$axios()加上一段格式化代码配置即可，代码如下：123456789101112//formdata transformRequest: [function (data) &#123; let ret = &apos;&apos;; for (let it in data) &#123; ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos;; &#125; return ret &#125;],//头信息 headers: &#123; &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; &#125; 注：说明步骤2 formdata形式提交数据，可直接解决跨域问题，不用执行步骤1完整axios的post配置如下：1234567891011121314151617181920212223242526getData () &#123; this.$axios(&#123; method: &apos;post&apos;, //请求方式 一般为get\post 此处以post为例 url: &apos;http://localhost:8080/login&apos;, data: &#123; //数据 loginId: &apos;123456&apos;, password: &apos;123456&apos; &#125;, transformRequest: [function (data) &#123; let ret = &apos;&apos;; for (let it in data) &#123; ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos;; &#125; return ret &#125;], headers: &#123; &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; &#125; &#125;).then(function (res) &#123; console.log(res); debugger; &#125;.bind(this)).catch(function (err) &#123; console.log(err); debugger; &#125;)&#125; 继续测试：保存之后npm run dev完美~~，接下来看返回数据： ok，解决方案到此结束，希望对大家有所帮助。继续快乐的采坑吧各位~]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cli自适应|flexible屏幕字体自适应布局及配置]]></title>
    <url>%2F2019%2F02%2F23%2Fvue-cli%E8%87%AA%E9%80%82%E5%BA%94-flexible%E5%B1%8F%E5%B9%95%E5%AD%97%E4%BD%93%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E5%8F%8A%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言：很多前端小伙伴在写页面尤其是移动端页面的时候，要求页面布局以及字体大小随屏幕宽度变化而随之按比例自适应【注：非响应式】，那么，在vue-cli脚手架中应该如何去实现呢？ 1.安装flexible库12//在项目库下运行：npm i lib-flexible --save-dev 2.引入项目入口文件main.js中引入lib-flexible:12//main.js中：import &apos;lib-flexible&apos; 3.配置meta在项目index.html的head中配置meta`：12&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; 4.安装px2rem-loader12//在项目库下运行npm install px2rem-loader --save-dev 5.配置px2rem编译器在build/utils.js中，将px2rem-loader添加到cssLoaders中：123456789101112131415//自适应字体配置const px2remLoader = &#123; loader: &apos;px2rem-loader&apos;, options: &#123; remUnit: 37.5 //设计稿的宽度 除以 10，现阶段一般设计稿的宽度都为750px。如果基于iPhone5设计则为32.0(320 / 10 = 32) &#125;&#125;// generate loader string to be used with extract text plugin function generateLoaders (loader, loaderOptions) &#123; const loaders = options.usePostCSS ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader] /** *其余的不用改 */ &#125; 6.启动项目1npm run dev 后语：启动项目之后会惊讶的发现已经完美解决了，即使在PC端也是适用的哦~想要了解更多关于px2rem的想伙伴可以戳下方飞机票去官方看介绍：点击飞机票：px2rem]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《小狗钱钱1》随想]]></title>
    <url>%2F2019%2F02%2F23%2F%E3%80%8A%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B11%E3%80%8B%E9%9A%8F%E6%83%B3%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;相信大家都买过基金吧，比如支付宝的余额宝就是一种货币基金。我的钱一直也在支付宝存放。但是从去年（2018年）年初开始，收益好像走了下坡路。为了追求更高的收益，我便把目光转向了支付宝里面的基金市场，然后再零理财基础的情况下辛辛苦苦选了好几个（我认为）收益高的基金，结果一天掉一百多块……不到半个月 差不多赔了小一千，因此觉得开始学习并积累一些理财知识，但是迟迟没有行动。直到规划本年度（2019）目标时，才想起此事，并提上日程。一顿操作猛如虎，找到了一本理财的启蒙书《小狗钱钱》，并且用了一下午3小时26分钟的时间通读了一遍，由此感悟颇深。&emsp;&emsp;读书不写笔记犹如过眼云烟，学习重在输出。 介绍&emsp;&emsp;《小狗钱钱》讲述的是一个童话故事：有一天，吉娅发现一只受伤的猎狗，并把它带回了家。可是，有谁会想到，这只普通的四脚动物却是一个真正的理财天才呢？吉娅和小狗成为了朋友，并从它那里得知，原来所有的愿望都是可以实现的。&emsp;&emsp;从这个童话故事里可以了解一些金钱的秘密和真相，以及投资、理财的办法。这个故事描述了在实施这些方法的过程中可能遇到的挑战，并且说明了一些令人难以置信的结果。 钱钱语录 金钱有一些秘密和规律，要想了解这些秘密和规律，前提条件是，你自己必须真的有这个愿望。 如果你只是带着试试看的心态，那么你最后只会以失败而告终，你会一事无成。尝试纯粹是一种借口，你还没有做，就已经给自己想好退路了。不能试验。你只有两个选择：做，或者不做。 你是否能挣到钱，最关键的因素并不在于你是不是有一个好点子。你有多聪明也不是主要原因，决定因素是你的自信程度。 一个人把精力集中在自己所能做的，知道的和拥有的东西上的那一天起，他的成功就已经拉开了序幕。这也使得一个孩子完全有能力比成人挣到更多的钱。 你最好想清楚，你喜欢做什么，然后再考虑你怎么用它来挣钱。 你要每天不间断地去做对称的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让一切变得不同。 欠债的人应当毁掉所有的信用卡。 应当尽可能少地偿还贷款。 应当将不用于生活的那部分钱中的一半存起来，另一半用于还债。最好不要申请消费贷款。 每次借债前问自己：“这真的有必要吗？” 当你定下了大目标的时候，就意味着你必须付付出比别人多得多的努力。 假如我没有了我的“鹅”，我就总是得为了赚钱而工作，但是一旦我有了属于自己的“鹅”，我的钱就会自动为我工作了。 幸运其实只是充分准备加上努力工作的结果。 钱只令留在那些为之付出努力的人身边，用非法手段取得不义之财的人，反而会比没钱的时候感觉更糟糕。 恐惧总是在我们设想事情会如何不顺的时候出现。我们对失败的可能性想得越多，就越害怕。而当你朝看积极的目标去思考的时候，就不会心生畏惧。 关于投资 确定自己希望获得财务上的成功。 自信，有想法，做自己喜欢做的事。 把钱分成日常开销、梦想目标和金鹅账户三部分。 进行明智的投资。 享受生活。 如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能够做到些什么。一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。 挑选基金时的注意事项： 基金应该至少有十年历史。假如它在这么长时间内一直有丰厚的盈利，那我们可以认为，它在未来也会运作良好。 应该选择大型的跨国股票基金，这种基金在世界各地购买股票，以此分做风险，所以十分安全。 对基金的走势图进行比较。我们应该观察在过去10年间哪些基金的年终获利最好。用72除以投资的年收益率的百分比，得出的数字就是这笔钱翻一倍所要的年数。 每当冬天过后，春天就来了，接着是夏天，每个夏天之后又跟着是秋天，然后又是冬天，年年如此。跟大自然的变化一样，交易所里也总有四季更替，循环往复。 最主要的是，在人们眼中钱应该是一种再自然、再普通不过的东西了。 感悟&emsp;&emsp;故事新颖，通俗易懂，并且道出挣钱的终极目的：让钱变得不再重要。&emsp;&emsp;对啊，曾几何时，我们为了生活奔波，打拼，一切都是为了钱。有人说，不忘初心。那货币的本质是一般等价物，一定程度上代替了以物易物。一路发展而来，初心早已更改，到如今的世道上已经完全演变为了“没钱万万不能”的时代。什么世外桃源，田间小居，都是在经济支撑下才能完成的愿望。&emsp;&emsp;书中也提到适量的方法、态度以及对理财中多个名词的通俗解释，都是让理财新人能够快速接受且消化的，不得不说作者是下了大工夫的。书中主人公吉娅以及其家庭遇到的问题相信在大多数人的生活中都有存在，比如： 是否遇到问题的时候经常说，我试着…… 从小被教导，金钱是万恶之源…… 常听父母说，小孩子不用想钱的事儿…… 是否常常入不敷出…… 是否用着信用卡，每个月都在大笔的分期付款…… 是否心里曾有过宏大的目标（精神或者物质），但又告诉自己这不大可能实现…… 是否做什么事情，在没行动前总想着，我没有这个条件，这个事情不能成功…… 是否每个月仍有结余，但是仅仅是存在银行里…… 是否不够自信，但又不知道怎么去提高……等等问题。吉娅出现的每一个问题，都与我们极其相似，但是我们常常只是想想，然后迷茫，彷徨，不自信，忘记。我们却能从这本书里学习到如何想，如何做，一步一步，一个个的习惯养成，大有裨益。 &emsp;&emsp;关于金钱的意义。钱是中性的，没有善恶之分。但是往往金钱能使人性的阴暗面暴露出来，因此怎么有钱，有了钱如何使用，便是一个很大的课题，终究取决于学习，修善，成长等。在此之前，我应该先考虑钱的用途，以及自己要成为怎样的人。 &emsp;&emsp;关于“小金鹅”。故事是这样的： &emsp;&emsp;从前有一个年轻的农夫，他每天的愿望就是从鹅笼里捡一个鹅蛋当早饭。有一天，他竟然在鹅笼里发现了一只金蛋。当然，一开始他不相信这是真的。他想，也许是有人在捉弄他。为了谨慎起见，他把金蛋拿去让金匠看，可是金匠向他保证说，这只蛋完全是纯金铸成的。于是农夫卖了这只金蛋，然后举行了一个盛大的庆祝会。&emsp;&emsp;第二天清晨，他起了个大早，赶到鹅笼处一看，那里果真又放着一个金蛋。这样的情况延续了好几天。&emsp;&emsp;可是这个农夫是一个贪婪的人，他对自己的鹅，非常不满意，因为鹅没法向他解释是怎么下出金蛋的，否则也许他自己就可以制造金蛋了。他还气呼呼地想，这只懒惰的鹅每天至少应该下两只金蛋，现在这样的速度太慢了。他的怒火越来越大，最后，他终于怒不可遏地把鹅揪出鹅笼，劈成两半。从那以后，他再也得不到金蛋了。 &emsp;&emsp;其实，理财不是针对有资产的人，而是所有人。《小狗钱钱》一书中，“养鹅”一事贯穿全文。鹅代表你的钱，如果你存钱，就会得到利息，利息就是金蛋。穷人越穷，每天鸡蛋都生不出来，富人越富，每天有金蛋甚至会有越来越多的鹅。两极分化不是没有道理的。书中将赚到的钱，分成三个账户，分别是“日常开销”、“梦想目标”、“金鹅账户”，并以此达到开源节流的目的。 关于72定理 用72除以年收益率百分比，得出的数字就是这笔钱翻一倍的年数。 在通货膨胀率下，我们的钱在多长时间贬值一半，用72除以通胀率，即可得知多少年后你的钱是现在的一半。 假如目前存（投）一笔1万人民币，年收益为12%，那么72 / 12 = 6年时间就可以翻倍本金。当然，至于如何达到年收益12%甚至更高，则需要继续努力学习相关知识并且不断的实践并积累了。假定以后每年通货膨胀率6%，那么在72 / 6 = 12年后你的钱将只能买到现在购买力能买的的一半。 结语《小狗钱钱》带来最大的收获便是让我获得了一把打开新世界的钥匙。后续需要持续学习不断提高，跑赢通货膨胀，养一只能下优质蛋的鹅。好在年轻即资本，生命不息，学习不止。 后记财商决定后半生是否富裕]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue打包后map文件处理]]></title>
    <url>%2F2019%2F02%2F22%2FVue%E6%89%93%E5%8C%85%E5%90%8Emap%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言最近踩坑vue，打包之后js中，会自动生成一些map文件，无形之中就增大了dist包的体积，可能会增加服务器压力。那我们怎么把它去掉呢？ 1.找到productionSourceMap在项目下进入目录：项目包/config/index.js找到productionSourceMap123456 /** * Source Maps */productionSourceMap: true,// https://webpack.js.org/configuration/devtool/#productiondevtool: &apos;#source-map&apos;, 2.改为false将productionSourceMap的true改为false即可123productionSourceMap: false,// https://webpack.js.org/configuration/devtool/#productiondevtool: &apos;#source-map&apos;, 3.打生产包打包:npm run build12345678910111213141516171819202122Hash: 450e46e5a578d8ed5832Version: webpack 3.12.0Time: 19211ms Asset Size Chunks Chunk Names static/js/2.f45baf9afd59da355a2c.js 17.9 kB 2 [emitted] static/img/healthIcon2.0a76940.png 21.7 kB [emitted] static/img/healthIcon1.7f9e278.png 21 kB [emitted] static/img/healthIcon3.a2530d6.png 20.3 kB [emitted] static/js/0.2623d3f24b6cb900e249.js 182 kB 0 [emitted] static/js/1.68a7b37dd5366d3385bc.js 62.6 kB 1 [emitted] static/img/healthIcon4.42cd92c.png 18.9 kB [emitted] static/js/3.dd658b712540b545b1a8.js 6.57 kB 3 [emitted] static/js/vendor.ed30b6e3d0cfb8529feb.js 962 kB 4 [emitted] [big] vendor static/js/app.ab727f325a694968cc20.js 1.22 kB 5 [emitted] app static/js/manifest.bad9ce278a16a20c8817.js 1.48 kB 6 [emitted] manifeststatic/css/app.e93cb55eadaef6e12f4bccfcc6e2e3cc.css 35.6 kB 5 [emitted] app index.html 555 bytes [emitted] Build complete. Tip: built files are meant to be served over an HTTP server. Opening index.html over file:// won&apos;t work. 4.解决打包成功，看项目/dist/static/js/xxxx.js已经没有各种.map文件，问题解决。 【注】.map文件的作用：项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浮世三千]]></title>
    <url>%2F2019%2F02%2F22%2F%E6%B5%AE%E4%B8%96%E4%B8%89%E5%8D%83%2F</url>
    <content type="text"><![CDATA[浮世三千，吾爱有三：日、月与卿。日为朝、月为暮，卿为朝朝暮暮 我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
